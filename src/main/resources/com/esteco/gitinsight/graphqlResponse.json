{"data":{"repository":{"id":"MDEwOlJlcG9zaXRvcnkyNTk0NjM2ODU=","url":"https://github.com/carbon-language/carbon-lang","updatedAt":"2025-01-27T04:17:06Z","createdAt":"2020-04-27T21:45:16Z","isPrivate":false,"isLocked":false,"languages":{"totalCount":19,"edges":[{"node":{"id":"MDg6TGFuZ3VhZ2U1MDY=","color":null,"name":"GDB"}},{"node":{"id":"MDg6TGFuZ3VhZ2U3NDY=","color":"#76d275","name":"Starlark"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNDU=","color":"#3572A5","name":"Python"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNDI=","color":"#f34b7d","name":"C++"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNDk=","color":"#555555","name":"C"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxMzk=","color":"#89e051","name":"Shell"}},{"node":{"id":"MDg6TGFuZ3VhZ2U0MDM=","color":"#427819","name":"Makefile"}},{"node":{"id":"MDg6TGFuZ3VhZ2U0NzQ=","color":"#DBCA00","name":"Lex"}},{"node":{"id":"MDg6TGFuZ3VhZ2U0NzM=","color":"#4B6C4B","name":"Yacc"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNDA=","color":"#f1e05a","name":"JavaScript"}},{"node":{"id":"MDg6TGFuZ3VhZ2U0MTc=","color":"#e34c26","name":"HTML"}},{"node":{"id":"MDg6TGFuZ3VhZ2U1MzU=","color":"#384d54","name":"Dockerfile"}},{"node":{"id":"MDg6TGFuZ3VhZ2U1Njk=","color":"#199f4b","name":"Vim Script"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNDQ=","color":"#1e4aec","name":"Scheme"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNjQ=","color":"#000080","name":"Lua"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNDE=","color":"#701516","name":"Ruby"}},{"node":{"id":"MDg6TGFuZ3VhZ2U2MDU=","color":"#c6538c","name":"SCSS"}},{"node":{"id":"LAN_kgDNA60","color":"#222222","name":"Carbon"}},{"node":{"id":"MDg6TGFuZ3VhZ2UyODc=","color":"#3178c6","name":"TypeScript"}}]},"issues":{"totalCount":510,"pageInfo":{"hasNextPage":true,"endCursor":"Y3Vyc29yOnYyOpK5MjAyMi0wNy0yM1QyMToyMTo0NSswNTozMM5Oa1be"},"edges":[{"node":{"id":"MDU6SXNzdWU2NTg0NDU1NjM=","title":"Requested changes to Carbon overview","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2NjY2OTA0Mg==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"This has been addressed in #83 ","createdAt":"2020-07-30T20:22:38Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/114","body":"(Prior discussion: https://github.com/carbon-language/carbon-lang/pull/83#discussion_r443076929)\r\n\r\nIn docs/design/README.md, I think the section titled \"Carbon &lt;-> C/C++ interoperability\" should be renamed to something like \"Bidirectional C++ interoperability\": I think it puts more emphasis on the bidirectionality, without requiring the \"&lt;\" HTML entity (or untypable \"↔\" character, as with prior drafts\"), and without the redundant mention of \"Carbon\". The same applies to the title of docs/design/interoperability/template.md. ","closed":true,"closedAt":"2020-07-30T20:22:38Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2020-07-16T18:26:21Z","labels":{"edges":[]},"author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"assignees":{"edges":[{"node":{"login":"jonmeow"}}]}}},{"node":{"id":"MDU6SXNzdWU2MjA3NjQ4MzE=","title":"[proposal] An initial, draft, rough language design overview","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2NjY2OTQxNg==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I'm marking this closed by #83, although we also aren't doing these proposal issues anymore.","createdAt":"2020-07-30T20:23:24Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/18","body":"","closed":true,"closedAt":"2020-07-30T20:23:24Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2020-05-19T08:01:31Z","labels":{"edges":[]},"author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"assignees":{"edges":[{"node":{"login":"chandlerc"}}]}}},{"node":{"id":"MDU6SXNzdWU2MjI3ODg2MzU=","title":"An initial draft of \"Carbon principle: Generics\"","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2NjY2OTc2MA==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I'm going to mark this issue closed: we no longer use tracking issues for proposals.","createdAt":"2020-07-30T20:24:00Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/23","body":"","closed":true,"closedAt":"2020-07-30T20:24:00Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2020-05-21T21:06:58Z","labels":{"edges":[]},"author":{"login":"josh11b","url":"https://github.com/josh11b"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU2MjA2OTgwOTc=","title":"[proposal] Lexical conventions","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2NjY2OTc5Ng==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I'm going to mark this issue closed: we no longer use tracking issues for proposals.","createdAt":"2020-07-30T20:24:05Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/16","body":"","closed":true,"closedAt":"2020-07-30T20:24:05Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2020-05-19T05:52:12Z","labels":{"edges":[]},"author":{"login":"zygoloid","url":"https://github.com/zygoloid"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU2NTM2NTA0MDM=","title":"Changes requested to goals doc","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY1NTgwODI4Mw==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"193: overarching goal can be decomposed into a few specific aspects.\r\n\r\njosh11b:\r\nDo we want to say anything about \"reasonably fast by default\" or \"favors constructs that can be compiled to efficient code\" or something like that? It was the sort of statement I just assumed was in the goals until I reread this section. The way this is written now, we could create a slow language as long as it was predictable and had an inline assembly escape hatch that was painful to use and hence rarely used.\r\n\r\njonmeow:\r\nTODO in https://github.com/carbon-language/carbon-lang/issues/106\r\n\r\nNote though, I don't think this is an issue right now due to \"leave no room for a lower level language\" -- inline ASM is still breaking the \"rules and structure of Carbon\". Arguably it may be unavoidable, but I think the implications should address most of your concern, could maybe just be more explicit.\r\n\r\n364: to understand.\r\n\r\njosh11b:\r\n\"... and the resulting performance more predictable\"?\r\n\r\njonmeow:\r\nAdding as a TODO; https://github.com/carbon-language/carbon-lang/issues/106\r\n\r\n424: scalability options for build systems of large software.\r\n\r\njosh11b:\r\nDo we want to say anything about development vs. release builds here? If the overall goal is fast development, separate compilation would mostly apply to development builds. For the same reason, incremental build and link performance may be as or even more important than separate compilation.\r\n\r\njonmeow:\r\nI'll think this over, it definitely seems too much for this change. https://github.com/carbon-language/carbon-lang/issues/106\r\n\r\n439: is good but insufficient. Both SIMD and SPMD must be directly addressable in\r\n\r\njosh11b:\r\nI found it a bit unclear what point these two sentences about SIMD and SPMD were after. Are SIMD & SPMD supposed to be an exhaustive list of ways of implementing parallel constructs? Is this specifying that there should be at least three ways of writing parallel code (SIMD, SPMD, and something higher level that compiles to one of the other in some mysterious black box way)? Is it saying there is some relationship between SIMD/SPMD and the native programming models of platforms we want to target?\r\n\r\njonmeow:\r\nTODO work on phrasing; https://github.com/carbon-language/carbon-lang/issues/106\r\n\r\n442: OS/environment distinctions such as desktop versus mobile versus bare metal.\r\n\r\njosh11b:\r\nAdd \"embedded\" here? I'm thinking of examples like game developers writing software for game consoles, which doesn't really fit in any of the three categories.\r\n\r\njonmeow:\r\nTODO work on phrasing; https://github.com/carbon-language/carbon-lang/issues/106\r\n\r\n584: and having reasonable test coverage that passes under sanitizers.\r\n\r\njosh11b:\r\nWording nit: tests are the thing that pass under sanitizers, not coverage\r\n\r\njonmeow:\r\nTODO work on phrasing; https://github.com/carbon-language/carbon-lang/issues/106\r\n","createdAt":"2020-07-08T23:24:59Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY1NzkzMjY3OA==","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Another one to capture here is a formatting quirk w.r.t. the emdash used with the John Carmack quote. Applying the hyphenation rule from the style guide here seems odd as this isn't a hyphen.","createdAt":"2020-07-14T02:42:00Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2MjY2NTc1OQ==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"\"... and the resulting performance more predictable\"?\r\n\r\nI'm skipping this one: after adding the paragraph to the performance goal, I think it's not necessary, especially in the \"Code that is easy to read, understand, and write\" section. The relevant sentence/paragraph from 364 is currently focused on understandability.","createdAt":"2020-07-22T20:00:08Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2MjY3NzMwNw==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"\"Add \"embedded\" here?\"\r\n\r\nAround 442, embedded could be added, as could microcontrollers, etc. I think we need to let the success criteria address this -- we shouldn't aim to have this duplicate that. Also, a 4-way \"versus\" I think becomes really just quite difficult to read. To whit, rephrasing a bit, and dropping \"bare metal\" rather than adding \"embedded\"","createdAt":"2020-07-22T20:24:18Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2MjcwNzA0Nw==","author":{"login":"josh11b","url":"https://github.com/josh11b"},"body":"> \"... and the resulting performance more predictable\"?\r\n> \r\n> I'm skipping this one: after adding the paragraph to the performance goal, I think it's not necessary, especially in the \"Code that is easy to read, understand, and write\" section. The relevant sentence/paragraph from 364 is currently focused on understandability.\r\n\r\nI think this document would still benefit from some statement establishing a link between simple implementation and predictable performance, beyond stating we want them individually.","createdAt":"2020-07-22T21:29:18Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2Mjc0MjE0NA==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"> > \"... and the resulting performance more predictable\"?\r\n> > I'm skipping this one: after adding the paragraph to the performance goal, I think it's not necessary, especially in the \"Code that is easy to read, understand, and write\" section. The relevant sentence/paragraph from 364 is currently focused on understandability.\r\n> \r\n> I think this document would still benefit from some statement establishing a link between simple implementation and predictable performance, beyond stating we want them individually.\r\n\r\nI agree, and think that my changes to the performance section do that.","createdAt":"2020-07-22T23:10:38Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2Mjc0NDQ0MQ==","author":{"login":"josh11b","url":"https://github.com/josh11b"},"body":"I must be missing some change, I don't see anything like that. Could you\ngive me a quote to search for?\n\nOn Wed, Jul 22, 2020 at 4:10 PM Jon Meow <notifications@github.com> wrote:\n\n> \"... and the resulting performance more predictable\"?\n> I'm skipping this one: after adding the paragraph to the performance goal,\n> I think it's not necessary, especially in the \"Code that is easy to read,\n> understand, and write\" section. The relevant sentence/paragraph from 364 is\n> currently focused on understandability.\n>\n> I think this document would still benefit from some statement establishing\n> a link between simple implementation and predictable performance, beyond\n> stating we want them individually.\n>\n> I agree, and think that my changes to the performance section do that.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/carbon-language/carbon-lang/issues/106#issuecomment-662742144>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ADUNHVZPJCHIHP7LCUZZA53R45WXZANCNFSM4OVBAFAQ>\n> .\n>\n\n\n-- \nJosh\n","createdAt":"2020-07-22T23:17:58Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2Mjc1MDk5NQ==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"> I must be missing some change, I don't see anything like that. Could you give me a quote to search for?\r\n> […](#)\r\n> On Wed, Jul 22, 2020 at 4:10 PM Jon Meow ***@***.***> wrote: \"... and the resulting performance more predictable\"? I'm skipping this one: after adding the paragraph to the performance goal, I think it's not necessary, especially in the \"Code that is easy to read, understand, and write\" section. The relevant sentence/paragraph from 364 is currently focused on understandability. I think this document would still benefit from some statement establishing a link between simple implementation and predictable performance, beyond stating we want them individually. I agree, and think that my changes to the performance section do that. — You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub <[#106 (comment)](https://github.com/carbon-language/carbon-lang/issues/106#issuecomment-662742144)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ADUNHVZPJCHIHP7LCUZZA53R45WXZANCNFSM4OVBAFAQ> .\r\n> -- Josh\r\n\r\n\"Idiomatic code should have good performance.\"","createdAt":"2020-07-22T23:40:44Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2MzE2OTc0OA==","author":{"login":"josh11b","url":"https://github.com/josh11b"},"body":"> > I must be missing some change, I don't see anything like that. Could you give me a quote to search for?\r\n> > […](#)\r\n> > On Wed, Jul 22, 2020 at 4:10 PM Jon Meow _**@**_.***> wrote: \"... and the resulting performance more predictable\"? I'm skipping this one: after adding the paragraph to the performance goal, I think it's not necessary, especially in the \"Code that is easy to read, understand, and write\" section. The relevant sentence/paragraph from 364 is currently focused on understandability. I think this document would still benefit from some statement establishing a link between simple implementation and predictable performance, beyond stating we want them individually. I agree, and think that my changes to the performance section do that. — You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub <[#106 (comment)](https://github.com/carbon-language/carbon-lang/issues/106#issuecomment-662742144)>, or unsubscribe https://github.com/notifications/unsubscribe-auth/ADUNHVZPJCHIHP7LCUZZA53R45WXZANCNFSM4OVBAFAQ .\r\n> > -- Josh\r\n> \r\n> \"Idiomatic code should have good performance.\"\r\n\r\nThat does not capture what I was trying to convey. Yes, idiomatic code should have good performance. And yes, it says performance should be predictable. I had requested something additional conveying, in the simple implementation section, that a simple implementation is part of our strategy from for achieving the goal of predictable performance. Right now nothing in the doc captures that link.","createdAt":"2020-07-23T18:42:42Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2MzI3NTAyNA==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"> > > I must be missing some change, I don't see anything like that. Could you give me a quote to search for?\r\n> > > […](#)\r\n> > > On Wed, Jul 22, 2020 at 4:10 PM Jon Meow _**@**_.***> wrote: \"... and the resulting performance more predictable\"? I'm skipping this one: after adding the paragraph to the performance goal, I think it's not necessary, especially in the \"Code that is easy to read, understand, and write\" section. The relevant sentence/paragraph from 364 is currently focused on understandability. I think this document would still benefit from some statement establishing a link between simple implementation and predictable performance, beyond stating we want them individually. I agree, and think that my changes to the performance section do that. — You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub <[#106 (comment)](https://github.com/carbon-language/carbon-lang/issues/106#issuecomment-662742144)>, or unsubscribe https://github.com/notifications/unsubscribe-auth/ADUNHVZPJCHIHP7LCUZZA53R45WXZANCNFSM4OVBAFAQ .\r\n> > > -- Josh\r\n> > \r\n> > \r\n> > \"Idiomatic code should have good performance.\"\r\n> \r\n> That does not capture what I was trying to convey. Yes, idiomatic code should have good performance. And yes, it says performance should be predictable. I had requested something additional conveying, in the simple implementation section, that a simple implementation is part of our strategy from for achieving the goal of predictable performance. Right now nothing in the doc captures that link.\r\n\r\nTo explain my point of view:\r\n\r\n- Performance goal says idiomatic code should be performant without creating a readability trade-off.\r\n- Understanding goal says Carbon should have excellent ergonomics. (or perhaps you're referring to \"clearly and simply specified\"? but I think that bullet is heading off in a different direction about undefined behavior)\r\n\r\nIdiomatic carbon code should thus be performant, and have excellent ergonomics. But I really do think that the text under performance should be saying what you want, and I've adjusted it a little further.\r\n\r\nAnyways, I'm shifting the PR to RFC, also adding another paragraph about docs that I now feel is missing. It may be helpful to shift comment there, and if you have specific edits to suggest, that may help too.","createdAt":"2020-07-23T23:09:30Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2MzI4MTIwNw==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"[RFC](https://forums.carbon-lang.dev/t/rfc-add-idiomatic-code-performance-and-developer-facing-docs-to-goals/105)","createdAt":"2020-07-23T23:28:43Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2Mzc4NzMzMQ==","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"> > > > I must be missing some change, I don't see anything like that. Could you give me a quote to search for?\r\n> > > \r\n> > > \r\n> > > \"Idiomatic code should have good performance.\"\r\n> > \r\n> > \r\n> > That does not capture what I was trying to convey. Yes, idiomatic code should have good performance. And yes, it says performance should be predictable. I had requested something additional conveying, in the simple implementation section, that a simple implementation is part of our strategy from for achieving the goal of predictable performance. Right now nothing in the doc captures that link.\r\n> \r\n> To explain my point of view:\r\n> \r\n> * Performance goal says idiomatic code should be performant without creating a readability trade-off.\r\n> * Understanding goal says Carbon should have excellent ergonomics. (or perhaps you're referring to \"clearly and simply specified\"? but I think that bullet is heading off in a different direction about undefined behavior)\r\n> \r\n> Idiomatic carbon code should thus be performant, and have excellent ergonomics. But I really do think that the text under performance should be saying what you want, and I've adjusted it a little further.\r\n\r\nI don't think this is what @josh11b is talking about here really...\r\n\r\nTo illustrate, I think @josh11b is suggesting something along the lines of https://github.com/carbon-language/carbon-lang/pull/126\r\n\r\nHowever, I'm not sure this is necessary, and it feels somewhat awkward and forced. I feel like the overall point might be better made with a *principle* rather than an adjustment of the goals, where we actually talk about the underlying desire: to not make performance contingent on complex, and thus unpredictable compiler optimizations. An example that might be used as an extreme but especially well analyzed case is making all methods virtual in Java and relying on the HotSpot optimization techniques (profiling, speculation, and deoptimization) to ensure this does not create a performance overhead. There is lots of research to support the idea that these optimization techniques *can* eliminate the cost of unnecessary virtual dispatch abstraction points, but there is also a lot to show that they are extremely complex and can be very difficult to predict in a performance constrained environment.","createdAt":"2020-07-25T01:02:12Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDY2MzkxMjQ2NA==","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Just a quick note - not suggesting we run #126 through the whole proposal process. *If* that's the approach we want can likely fold it together with other wording improvements. I just couldn't make a suggested edit to unchanged lines in the review of #120 for example.","createdAt":"2020-07-25T22:29:07Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/106","body":"Just tracking a few changes to the goals #51 requested by @josh11b \r\n\r\n(not making these up-front due to decision in progress)","closed":true,"closedAt":"2020-08-20T22:26:59Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NDU1MzM3ODE1","title":"Add idiomatic code performance and developer-facing docs to goals","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"- [RFC topic](https://forums.carbon-lang.dev/t/rfc-add-idiomatic-code-performance-and-developer-facing-docs-to-goals/105)\r\n- [Announcement topic](https://forums.carbon-lang.dev/t/accepted-add-idiomatic-code-performance-and-developer-facing-docs-to-goals/122)\r\n\r\nMost of this is addressing issue #106.\r\n\r\nTwo new explicit sub-goals:\r\n\r\n- Idiomatic code should be performant, stemming from #106.\r\n- User-facing documentation, separate thought from #83 discussion.\r\n\r\nI think both of these are on people's minds and assumed, but still worth spelling out.","url":"https://github.com/carbon-language/carbon-lang/pull/120","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/1d98bf833d0cabd7e11770a44d88f58e20d5d959"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjFkOThiZjgzM2QwY2FiZDdlMTE3NzBhNDRkODhmNThlMjBkNWQ5NTk=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/1d98bf833d0cabd7e11770a44d88f58e20d5d959"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/51bbe87813cc951d699d142ca5650418e1a46b6d"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjUxYmJlODc4MTNjYzk1MWQ2OTlkMTQyY2E1NjUwNDE4ZTFhNDZiNmQ=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/51bbe87813cc951d699d142ca5650418e1a46b6d"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/8655eb932be50425e0d60c77211fd2885f39e18d"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1Ojg2NTVlYjkzMmJlNTA0MjVlMGQ2MGM3NzIxMWZkMjg4NWYzOWUxOGQ=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/8655eb932be50425e0d60c77211fd2885f39e18d"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/d196527343d2c6e65b25b6f733fcf2c4597566c8"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OmQxOTY1MjczNDNkMmM2ZTY1YjI1YjZmNzMzZmNmMmM0NTk3NTY2Yzg=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/d196527343d2c6e65b25b6f733fcf2c4597566c8"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/7c589600bdd92ce6076fdcee2c92f85aee1ae87f"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjdjNTg5NjAwYmRkOTJjZTYwNzZmZGNlZTJjOTJmODVhZWUxYWU4N2Y=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/7c589600bdd92ce6076fdcee2c92f85aee1ae87f"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/50a99ce200b9d1c85bbdfa0fc10d994c750fb41b"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjUwYTk5Y2UyMDBiOWQxYzg1YmJkZmEwZmMxMGQ5OTRjNzUwZmI0MWI=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/50a99ce200b9d1c85bbdfa0fc10d994c750fb41b"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/5481496dc085179eead207f08795a29a0a2af81a"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjU0ODE0OTZkYzA4NTE3OWVlYWQyMDdmMDg3OTVhMjlhMGEyYWY4MWE=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/5481496dc085179eead207f08795a29a0a2af81a"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/41948c6461e66642d8797920ac20176e37a73a10"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjQxOTQ4YzY0NjFlNjY2NDJkODc5NzkyMGFjMjAxNzZlMzdhNzNhMTA=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/41948c6461e66642d8797920ac20176e37a73a10"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/2be36e01074f2a236955033abc38f12d7596ae45"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjJiZTM2ZTAxMDc0ZjJhMjM2OTU1MDMzYWJjMzhmMTJkNzU5NmFlNDU=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/2be36e01074f2a236955033abc38f12d7596ae45"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/5be803c1c3088d2e27a0f0699be4f33e5209b31c"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjViZTgwM2MxYzMwODhkMmUyN2EwZjA2OTliZTRmMzNlNTIwOWIzMWM=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/5be803c1c3088d2e27a0f0699be4f33e5209b31c"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/755e2478845346008d6087afbc65189ab5d5f247"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1Ojc1NWUyNDc4ODQ1MzQ2MDA4ZDYwODdhZmJjNjUxODlhYjVkNWYyNDc=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/755e2478845346008d6087afbc65189ab5d5f247"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/ea19ab2189f4615e916e5ff06f07d2ab6fc61e75"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OmVhMTlhYjIxODlmNDYxNWU5MTZlNWZmMDZmMDdkMmFiNmZjNjFlNzU=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/ea19ab2189f4615e916e5ff06f07d2ab6fc61e75"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/5b7a5698ea7b222d9aa53fd92fb09170fa55a85f"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjViN2E1Njk4ZWE3YjIyMmQ5YWE1M2ZkOTJmYjA5MTcwZmE1NWE4NWY=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/5b7a5698ea7b222d9aa53fd92fb09170fa55a85f"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/93b6bcfcdbc1d8ae1c2ed9fc0fb95787cb7a47cf"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjkzYjZiY2ZjZGJjMWQ4YWUxYzJlZDlmYzBmYjk1Nzg3Y2I3YTQ3Y2Y=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/93b6bcfcdbc1d8ae1c2ed9fc0fb95787cb7a47cf"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/98d719d041f9ddebbe5b93b4fa2d8842b77f7431"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1Ojk4ZDcxOWQwNDFmOWRkZWJiZTViOTNiNGZhMmQ4ODQyYjc3Zjc0MzE=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/98d719d041f9ddebbe5b93b4fa2d8842b77f7431"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/0000c37a29d344b8f1227f1e57cec35084937914"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjAwMDBjMzdhMjlkMzQ0YjhmMTIyN2YxZTU3Y2VjMzUwODQ5Mzc5MTQ=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/0000c37a29d344b8f1227f1e57cec35084937914"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/87838c7402c82ba3c54264252cb7d3a776e8bb8c"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1Ojg3ODM4Yzc0MDJjODJiYTNjNTQyNjQyNTJjYjdkM2E3NzZlOGJiOGM=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/87838c7402c82ba3c54264252cb7d3a776e8bb8c"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/59efd977cdb753bbf13731ebc27760f8d17bc320"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjU5ZWZkOTc3Y2RiNzUzYmJmMTM3MzFlYmMyNzc2MGY4ZDE3YmMzMjA=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/59efd977cdb753bbf13731ebc27760f8d17bc320"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/356c336513ffa72c7e0fb9dab1dcb9528573e177"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjM1NmMzMzY1MTNmZmE3MmM3ZTBmYjlkYWIxZGNiOTUyODU3M2UxNzc=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/356c336513ffa72c7e0fb9dab1dcb9528573e177"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/50a6d1cc64fd51c8c6b290f91d9eed909d9c9356"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU1MzM3ODE1OjUwYTZkMWNjNjRmZDUxYzhjNmIyOTBmOTFkOWVlZDkwOWQ5YzkzNTY=","resourcePath":"/carbon-language/carbon-lang/pull/120/commits/50a6d1cc64fd51c8c6b290f91d9eed909d9c9356"}}]},"createdAt":"2020-07-22T20:27:50Z","closed":true,"closedAt":"2020-08-20T22:26:59Z"}}]},"createdAt":"2020-07-08T23:07:29Z","labels":{"edges":[]},"author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"assignees":{"edges":[{"node":{"login":"jonmeow"}}]}}},{"node":{"id":"MDU6SXNzdWU3MDY4OTg2ODc=","title":"Choose a markdown style guide","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDcwODcyMTE3OQ==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Addressed: https://github.com/carbon-language/carbon-lang/pull/165#pullrequestreview-508627114","createdAt":"2020-10-14T23:56:09Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/166","body":"At the 2020-09-22 core team meeting, it was [decided](https://github.com/carbon-language/carbon-lang/pull/165) that the open question in the \"[Change markdown style guide](https://github.com/carbon-language/carbon-lang/pull/149)\" proposal of which style guide to use would be left to the Painter. This issue is to track that decision.","closed":true,"closedAt":"2020-10-14T23:56:09Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2020-09-23T02:09:37Z","labels":{"edges":[]},"author":{"login":"sidney13","url":"https://github.com/sidney13"},"assignees":{"edges":[{"node":{"login":"chandlerc"}}]}}},{"node":{"id":"MDU6SXNzdWU4MDA0OTU1NzU=","title":"Proposal + decision can't be viewed at once","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc3MzQ3ODkwOQ==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Regarding the proposal header, generally we're trying to keep state in the PR itself. e.g., if you look at the top of https://github.com/carbon-language/carbon-lang/pull/83, you'll find several links to discussion about the proposal. This is why the proposal doc has a link back to the PR, we're just using the PR as a nexus for links.","createdAt":"2021-02-04T17:29:43Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc3MzQ5MDE3NA==","author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"body":"Let's see how that works out.  I'm reviewing proposals in the repo.  I look at https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/p0083.md, and want to know if that's been accepted.  I am a new contributor to the project, so I don't know anything about these conventions.  First I have to know that \"it's in the PR\", so I ask somewhere and eventually somebody tells me.  I click the PR link and arrive at https://github.com/carbon-language/carbon-lang/pull/83.  Oh, but it's actually not in the PR; there's just a link to the announcement in the PR.  So I follow that, and I have an answer.  That's a lot of clicks and web page hopping. \r\n\r\nIMO it's better if  the things that represent the official artifacts produced by the design process (proposals + decisions) are in one document that links to all its supporting material.","createdAt":"2021-02-04T17:47:22Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc3MzUwMDEwOA==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"While I understand new contributors may not know conventions, the [README.md](https://github.com/carbon-language/carbon-lang/blob/trunk/proposals/README.md) notes the directory structure, and more can always be added to explain to look at the PR to minimize confusion.\r\n\r\nWhile I recognize you're familiar with Swift's processes, I will note our current template is similar to [Rust](https://github.com/rust-lang/rfcs/blob/master/0000-template.md). My impression has been our proposal processes are closer to theirs overall, even though Swift and Rust aren't all that different.\r\n\r\nYes there are more clicks this way, but it's also easier to maintain and update. GitHub also has built-in facilities to link PRs and issues, and there are other conveniences. We used to have a little more in the template and steadily stripped it out to use a PR as the single source of truth.","createdAt":"2021-02-04T18:03:29Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/254","body":"It's not great to look through the proposals and not have the resolution of the proposal visible in the document.  The Swift process with revision numbers (for things that went through multiple reviews) and references to discussion threads is easier for me (example here: https://github.com/apple/swift-evolution/blob/main/proposals/0244-opaque-result-types.md).  Can we consider a format like that?","closed":true,"closedAt":"2021-02-04T18:11:15Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-02-03T16:33:32Z","labels":{"edges":[]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MDk3NzM1NDM=","title":"HTML tags are being stripped from Markdown documents","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/270","body":"proposals/p0143.md contains the following line:\r\n\r\n```markdown\r\n`0x123.p456` (= 123<sub>16</sub> \\* 2<sup>456</sup>)\r\n```\r\n\r\nAs currently published at https://carbon-lang.dev/proposals/p0143.html, that line appears as:\r\n\r\n```html\r\n<code>0x123.p456</code> (= 123<!-- raw HTML omitted -->16<!-- raw HTML omitted --> * 2<!-- raw HTML omitted -->456<!-- raw HTML omitted -->)\r\n```\r\n\r\nWhich renders in the browser as \"`0x123.p456` (= 12316 * 2456)\" instead of the intended \"`0x123.p456` (= 123<sub>16</sub> \\* 2<sup>456</sup>)\"","closed":true,"closedAt":"2021-02-17T22:26:44Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NTc1MjMxNDMw","title":"Fixing some skew with GitHub markdown rendering","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"This fixes the rendering issues noted in #270 and #271.","url":"https://github.com/carbon-language/carbon-lang/pull/272","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/7a5733208acb233cba97b29898061527420a47de"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOjdhNTczMzIwOGFjYjIzM2NiYTk3YjI5ODk4MDYxNTI3NDIwYTQ3ZGU=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/7a5733208acb233cba97b29898061527420a47de"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/83e1cf3f803bf6c5ca5593bd1395cb8959929273"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOjgzZTFjZjNmODAzYmY2YzVjYTU1OTNiZDEzOTVjYjg5NTk5MjkyNzM=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/83e1cf3f803bf6c5ca5593bd1395cb8959929273"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/21bfa19fe3e90a4a59d921044fa0b968f08faf21"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOjIxYmZhMTlmZTNlOTBhNGE1OWQ5MjEwNDRmYTBiOTY4ZjA4ZmFmMjE=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/21bfa19fe3e90a4a59d921044fa0b968f08faf21"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/76fc1a4a639960a0a56609313dcf2d16a6c0a899"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOjc2ZmMxYTRhNjM5OTYwYTBhNTY2MDkzMTNkY2YyZDE2YTZjMGE4OTk=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/76fc1a4a639960a0a56609313dcf2d16a6c0a899"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/a2183528a670103b4aba757161fe00921a54c882"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOmEyMTgzNTI4YTY3MDEwM2I0YWJhNzU3MTYxZmUwMDkyMWE1NGM4ODI=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/a2183528a670103b4aba757161fe00921a54c882"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/1c00000408735604677e950056013625437fcfdf"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOjFjMDAwMDA0MDg3MzU2MDQ2NzdlOTUwMDU2MDEzNjI1NDM3ZmNmZGY=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/1c00000408735604677e950056013625437fcfdf"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/ef7ba065220e4acad326be801abb14419c989f25"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOmVmN2JhMDY1MjIwZTRhY2FkMzI2YmU4MDFhYmIxNDQxOWM5ODlmMjU=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/ef7ba065220e4acad326be801abb14419c989f25"}}]},"createdAt":"2021-02-17T21:42:39Z","closed":true,"closedAt":"2021-02-17T22:26:45Z"}}]},"createdAt":"2021-02-17T01:20:26Z","labels":{"edges":[]},"author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"assignees":{"edges":[{"node":{"login":"jonmeow"}}]}}},{"node":{"id":"MDU6SXNzdWU4MDk3NzYxMjQ=","title":"Markdown tables are not rendering on the HTML site","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/271","body":"proposals/p0143.md contains the following table:\r\n\r\n```markdown\r\n| Base specifier | Base | Digits                   |\r\n| -------------- | ---- | ------------------------ |\r\n| `b`            | 2    | `0` and `1`              |\r\n| `x`            | 16   | `0` ... `9`, `A` ... `F` |\r\n```\r\n\r\nIn the GitHub preview, this renders as a table, as intended, but on https://carbon-lang.dev/proposals/p0143.html it becomes\r\n\r\n```html\r\n<p>| Base specifier | Base | Digits                   |\r\n| -------------- | ---- | ------------------------ |\r\n| <code>b</code>            | 2    | <code>0</code> and <code>1</code>              |\r\n| <code>x</code>            | 16   | <code>0</code> ... <code>9</code>, <code>A</code> ... <code>F</code> |</p>\r\n```\r\n\r\nWhich renders as something like \"| Base specifier | Base | Digits | | -------------- | ---- | ------------------------ | | `b` | 2 | `0` and `1` | | `x` | 16 | `0` ... `9`, `A` ... `F` |\"\r\n\r\n","closed":true,"closedAt":"2021-02-17T22:26:44Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NTc1MjMxNDMw","title":"Fixing some skew with GitHub markdown rendering","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"This fixes the rendering issues noted in #270 and #271.","url":"https://github.com/carbon-language/carbon-lang/pull/272","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/7a5733208acb233cba97b29898061527420a47de"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOjdhNTczMzIwOGFjYjIzM2NiYTk3YjI5ODk4MDYxNTI3NDIwYTQ3ZGU=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/7a5733208acb233cba97b29898061527420a47de"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/83e1cf3f803bf6c5ca5593bd1395cb8959929273"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOjgzZTFjZjNmODAzYmY2YzVjYTU1OTNiZDEzOTVjYjg5NTk5MjkyNzM=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/83e1cf3f803bf6c5ca5593bd1395cb8959929273"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/21bfa19fe3e90a4a59d921044fa0b968f08faf21"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOjIxYmZhMTlmZTNlOTBhNGE1OWQ5MjEwNDRmYTBiOTY4ZjA4ZmFmMjE=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/21bfa19fe3e90a4a59d921044fa0b968f08faf21"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/76fc1a4a639960a0a56609313dcf2d16a6c0a899"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOjc2ZmMxYTRhNjM5OTYwYTBhNTY2MDkzMTNkY2YyZDE2YTZjMGE4OTk=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/76fc1a4a639960a0a56609313dcf2d16a6c0a899"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/a2183528a670103b4aba757161fe00921a54c882"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOmEyMTgzNTI4YTY3MDEwM2I0YWJhNzU3MTYxZmUwMDkyMWE1NGM4ODI=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/a2183528a670103b4aba757161fe00921a54c882"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/1c00000408735604677e950056013625437fcfdf"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOjFjMDAwMDA0MDg3MzU2MDQ2NzdlOTUwMDU2MDEzNjI1NDM3ZmNmZGY=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/1c00000408735604677e950056013625437fcfdf"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/ef7ba065220e4acad326be801abb14419c989f25"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1MjMxNDMwOmVmN2JhMDY1MjIwZTRhY2FkMzI2YmU4MDFhYmIxNDQxOWM5ODlmMjU=","resourcePath":"/carbon-language/carbon-lang/pull/272/commits/ef7ba065220e4acad326be801abb14419c989f25"}}]},"createdAt":"2021-02-17T21:42:39Z","closed":true,"closedAt":"2021-02-17T22:26:45Z"}}]},"createdAt":"2021-02-17T01:27:20Z","labels":{"edges":[]},"author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"assignees":{"edges":[{"node":{"login":"jonmeow"}}]}}},{"node":{"id":"MDU6SXNzdWU4MTY3OTAxNzU=","title":"pr_comments script no longer works for me: fails with Syntax Error GraphQL (1:1) Unexpected Name \"null\"","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4NjE5MDAwNw==","author":{"login":"zygoloid","url":"https://github.com/zygoloid"},"body":"Here's the version of `gql` I have installed:\r\n```\r\n$ pip show gql\r\nName: gql\r\nVersion: 2.0.0\r\nSummary: GraphQL client for Python\r\nHome-page: https://github.com/graphql-python/gql\r\nAuthor: Syrus Akbary\r\nAuthor-email: me@syrusakbary.com\r\nLicense: MIT\r\nLocation: /Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages\r\nRequires: promise, six, requests, graphql-core\r\nRequired-by: \r\n```","createdAt":"2021-02-25T20:42:06Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4NjkyMjUwNQ==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"FWIW I have gql 2.0 too, I don't think I've upgraded recently, I'm suspicious it's a server change.","createdAt":"2021-02-26T22:15:48Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/300","body":"Example failure:\r\n\r\n```\r\ngithub_tools/pr_comments.py  --comments-after zygoloid 273\r\nLoading https://github.com/carbon-language/carbon-lang/pull/273 ...Traceback (most recent call last):\r\n  File \"github_tools/pr_comments.py\", line 457, in <module>\r\n    main()\r\n  File \"github_tools/pr_comments.py\", line 438, in main\r\n    comments, threads_by_path = _fetch_comments(parsed_args)\r\n  File \"github_tools/pr_comments.py\", line 390, in _fetch_comments\r\n    client = github_helpers.Client(parsed_args)\r\n  File \"github_tools/github_helpers.py\", line 51, in __init__\r\n    self._client = gql.Client(\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/gql/client.py\", line 42, in __init__\r\n    schema = build_client_schema(introspection)\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/utils/build_client_schema.py\", line 310, in build_client_schema\r\n    return GraphQLSchema(\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/schema.py\", line 106, in __init__\r\n    self._type_map = GraphQLTypeMap(initial_types)\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 31, in __init__\r\n    self.update(reduce(self.reducer, types, OrderedDict()))  # type: ignore\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 142, in reducer\r\n    reduced_map = cls.reducer(reduced_map, getattr(field, \"type\", None))\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 142, in reducer\r\n    reduced_map = cls.reducer(reduced_map, getattr(field, \"type\", None))\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 85, in reducer\r\n    return cls.reducer(map_, type_.of_type)\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 142, in reducer\r\n    reduced_map = cls.reducer(reduced_map, getattr(field, \"type\", None))\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 85, in reducer\r\n    return cls.reducer(map_, type_.of_type)\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 142, in reducer\r\n    reduced_map = cls.reducer(reduced_map, getattr(field, \"type\", None))\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 100, in reducer\r\n    reduced_map = cls.reducer(reduced_map, t)\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 142, in reducer\r\n    reduced_map = cls.reducer(reduced_map, getattr(field, \"type\", None))\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 85, in reducer\r\n    return cls.reducer(map_, type_.of_type)\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 142, in reducer\r\n    reduced_map = cls.reducer(reduced_map, getattr(field, \"type\", None))\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 85, in reducer\r\n    return cls.reducer(map_, type_.of_type)\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 142, in reducer\r\n    reduced_map = cls.reducer(reduced_map, getattr(field, \"type\", None))\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/typemap.py\", line 109, in reducer\r\n    field_map = type_.fields\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/pyutils/cached_property.py\", line 22, in __get__\r\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/definition.py\", line 198, in fields\r\n    return define_field_map(self, self._fields)\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/type/definition.py\", line 212, in define_field_map\r\n    field_map = field_map()\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/utils/build_client_schema.py\", line 163, in <lambda>\r\n    fields=lambda: build_field_def_map(object_introspection),\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/utils/build_client_schema.py\", line 224, in build_field_def_map\r\n    [\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/utils/build_client_schema.py\", line 232, in <listcomp>\r\n    args=build_input_value_def_map(f.get(\"args\"), GraphQLArgument),\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/utils/build_client_schema.py\", line 248, in build_input_value_def_map\r\n    [\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/utils/build_client_schema.py\", line 249, in <listcomp>\r\n    (f[\"name\"], build_input_value(f, argument_type))\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/utils/build_client_schema.py\", line 258, in build_input_value\r\n    default_value=build_default_value(input_value_introspection),\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/utils/build_client_schema.py\", line 244, in build_default_value\r\n    return value_from_ast(parse_value(default_value), get_input_type(f[\"type\"]))\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/language/parser.py\", line 76, in parse_value\r\n    return parse_value_literal(parser, False)\r\n  File \"/Users/richardsmith/.pyenv/versions/3.8.6/lib/python3.8/site-packages/graphql/language/parser.py\", line 512, in parse_value_literal\r\n    raise unexpected(parser)\r\ngraphql.error.syntax_error.GraphQLSyntaxError: Syntax Error GraphQL (1:1) Unexpected Name \"null\"\r\n\r\n1: null\r\n   ^\r\n\r\n```\r\n\r\nThis seems to happen for all PRs. (Tested 198, 199, 273.) Doesn't look like anything's changed in the script.\r\n\r\nHere's the input value that it's processing in `build_input_value`:\r\n\r\n```\r\n{'name': 'isVerified', 'description': 'Filter by if the domain is verified.', 'type': {'kind': 'SCALAR', 'name': 'Boolean', 'ofType': None}, 'defaultValue': 'null'}\r\n```","closed":true,"closedAt":"2021-02-26T23:05:03Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NTgxMTc5NDUx","title":"Stop pulling the schema, it's optional and hits a github/gql incompatibility (not sure whose bug)","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Should fix #300 ","url":"https://github.com/carbon-language/carbon-lang/pull/306","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/10212636526868b091d6c36b859886afc2c4b6f1"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTgxMTc5NDUxOjEwMjEyNjM2NTI2ODY4YjA5MWQ2YzM2Yjg1OTg4NmFmYzJjNGI2ZjE=","resourcePath":"/carbon-language/carbon-lang/pull/306/commits/10212636526868b091d6c36b859886afc2c4b6f1"}}]},"createdAt":"2021-02-26T22:50:04Z","closed":true,"closedAt":"2021-02-26T23:05:03Z"}}]},"createdAt":"2021-02-25T20:41:06Z","labels":{"edges":[]},"author":{"login":"zygoloid","url":"https://github.com/zygoloid"},"assignees":{"edges":[{"node":{"login":"jonmeow"}}]}}},{"node":{"id":"MDU6SXNzdWU4MDQ4MTM1NDk=","title":"Migrate bison/flex usage to a more hermetic bazel build","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4ODQzMjE2NQ==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Addressed by #279 ","createdAt":"2021-03-02T00:27:11Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/266","body":"#237 (particularly executable_semantics/BUILD) relies on a system-installed bison/flex. It'd be nice to have these built via bazel.\r\n\r\nNote, I'm aware of https://github.com/jmillikin/rules_bison and https://github.com/jmillikin/rules_flex; however, these print build warnings with Carbon's toolchain, and I think those build warnings make a bad experience. One option would be to contribute changes to those to disable the necessary warnings (without an explanation referencing Carbon in a leaking way), another would be to build something hermetic from scratch.","closed":true,"closedAt":"2021-03-02T00:27:11Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-02-09T18:41:45Z","labels":{"edges":[]},"author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MjAyNTE5MzM=","title":"use LLVM's CommandLine to handle flags for the executable semantics","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4OTc0OTQwMQ==","author":{"login":"jsiek","url":"https://github.com/jsiek"},"body":"This issue is resolved by #332.","createdAt":"2021-03-03T14:22:55Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/329","body":"","closed":true,"closedAt":"2021-03-03T14:22:56Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-03-02T17:57:54Z","labels":{"edges":[]},"author":{"login":"jsiek","url":"https://github.com/jsiek"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MTgyMDIzMjE=","title":"add iterators to AssocList then make the head member private","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc5MTM5Mjg1Mw==","author":{"login":"jsiek","url":"https://github.com/jsiek"},"body":"resolved by #327 ","createdAt":"2021-03-05T12:36:13Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/316","body":"update PrintEnv and PrintTypeEnv to use the iterators","closed":true,"closedAt":"2021-03-05T12:36:13Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-02-28T13:06:50Z","labels":{"edges":[]},"author":{"login":"jsiek","url":"https://github.com/jsiek"},"assignees":{"edges":[{"node":{"login":"jsiek"}}]}}},{"node":{"id":"MDU6SXNzdWU4MTgwNzk1MjE=","title":"[executable semantics] if2.6c example segfaults","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4NzQ0NzYwMw==","author":{"login":"jsiek","url":"https://github.com/jsiek"},"body":"This bug should be fixed with the following PR\r\nhttps://github.com/carbon-language/carbon-lang/pull/315","createdAt":"2021-02-28T12:52:13Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4ODk3MDI3Mg==","author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"body":"@jsiek then you should feel free to close it, along with saying so.  At least that's how it is on most projects I've worked on.  Also see https://github.blog/2013-01-22-closing-issues-via-commit-messages/","createdAt":"2021-03-02T15:00:30Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4ODk4Njg1Ng==","author":{"login":"jsiek","url":"https://github.com/jsiek"},"body":"Ok, thanks for the tip!\n\nBTW, the fix is in #323 which hasn’t landed yet.\n\n\n> On Mar 2, 2021, at 10:00 AM, Dave Abrahams <notifications@github.com> wrote:\n> \n> \n> @jsiek <https://github.com/jsiek> then you should feel free to close it, along with saying so. At least that's how it is on most projects I've worked on. Also see https://github.blog/2013-01-22-closing-issues-via-commit-messages/ <https://github.blog/2013-01-22-closing-issues-via-commit-messages/>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/carbon-language/carbon-lang/issues/311#issuecomment-788970272>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AA5IGPDDNCI5YIOMQOHHLDTTBT4SDANCNFSM4YKRWOGQ>.\n> \n\n","createdAt":"2021-03-02T15:21:32Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc5MTk3OTg3Nw==","author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"body":"Oh, in that case, just procedurally, we shouldn't have closed it until #323 landed.  And \"Fixes #311\" in 323's message would've done that automatically.","createdAt":"2021-03-06T16:12:27Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/311","body":"The if2.6c example segfaults.  I'm currently in the process of temporarily disabling it and making our build not hide the problem. #312 will disable the test by commenting it out of the `BUILD` file.","closed":true,"closedAt":"2021-03-02T15:00:30Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-02-28T02:20:25Z","labels":{"edges":[]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[{"node":{"login":"jsiek"}}]}}},{"node":{"id":"MDU6SXNzdWU4MjEzMzIxMjE=","title":"Repo configuration: set up pr-dependency-check for dependent pull requests","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc5MDA3OTIyMQ==","author":{"login":"mmdriley","url":"https://github.com/mmdriley"},"body":"`dpulls` is a GitHub app, and \"installing\" it for our repo/organization involves granting access to a third party. It's also not free for private repositories.\r\n\r\nNeither is a deal-breaker. And I'm explicitly not trying to set a NIH precedent where we avoid paying for things that improve productivity. But in this case I'd suggest we look at solving the same problem with a GitHub Action. There is already a step available that looks like we could wire it in: https://github.com/marketplace/actions/pr-dependency-check","createdAt":"2021-03-03T21:40:03Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc5MDgyNDIyNA==","author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"body":"Even better; let's try the action!  Retitling the issue","createdAt":"2021-03-04T18:17:34Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc5MDgzMzIxMA==","author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"body":"One concern I have is that landing the dependency PR may not cause the action to re-run for the dependent one, which would be a pain.  Testing to find out.","createdAt":"2021-03-04T18:31:24Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc5MDk1MzY2MQ==","author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"body":"@mmdriley #343 is ready to test out; I'd like someone to scrutinize the test with me, so if nobody volunteers before then, perhaps when you're back.","createdAt":"2021-03-04T21:24:31Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/337","body":"This OSS Github plugin appears to “just work” (I tested it) and is super-easy to set up.  We should try it.\r\n\r\nhttps://github.com/marketplace/dpulls","closed":true,"closedAt":"2021-03-09T23:11:09Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NTg1MDIxMzM5","title":"[Infrastructure] Set up a dependent PR check","author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"body":"This will block stacked PRs from landing until their dependencies land.\r\nhttps://github.com/marketplace/actions/pr-dependency-check\r\nFixes #337\r\n\r\n","url":"https://github.com/carbon-language/carbon-lang/pull/343","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/d5ec51706b19536aa925b9c1d4f4718781148dcb"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg1MDIxMzM5OmQ1ZWM1MTcwNmIxOTUzNmFhOTI1YjljMWQ0ZjQ3MTg3ODExNDhkY2I=","resourcePath":"/carbon-language/carbon-lang/pull/343/commits/d5ec51706b19536aa925b9c1d4f4718781148dcb"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/ac7afc93826126e2dee754bb11943c0d910d2b46"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg1MDIxMzM5OmFjN2FmYzkzODI2MTI2ZTJkZWU3NTRiYjExOTQzYzBkOTEwZDJiNDY=","resourcePath":"/carbon-language/carbon-lang/pull/343/commits/ac7afc93826126e2dee754bb11943c0d910d2b46"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/d2d23e1de3999b8bf8b7fe8af24ac0dafd1dd877"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg1MDIxMzM5OmQyZDIzZTFkZTM5OTliOGJmOGI3ZmU4YWYyNGFjMGRhZmQxZGQ4Nzc=","resourcePath":"/carbon-language/carbon-lang/pull/343/commits/d2d23e1de3999b8bf8b7fe8af24ac0dafd1dd877"}}]},"createdAt":"2021-03-04T18:27:00Z","closed":true,"closedAt":"2021-03-09T23:11:09Z"}}]},"createdAt":"2021-03-03T17:36:44Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzg5NzQ3Njc1","color":"8FA36E","name":"infrastructure"}}]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[{"node":{"login":"chandlerc"}},{"node":{"login":"mmdriley"}}]}}},{"node":{"id":"MDU6SXNzdWU4MzI3NzYzNzY=","title":"Rename ExecutionEnvironment to TypeCheckContext","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/394","body":"The term \"execution\" implies runtime, but these two tables are for type checking at compile time.\r\nAlso, using std::pair hurts the readability of the code because it makes it more difficult\r\nto understand the different roles of the two different symbol tables. The first maps names of runtime entities to their declared types. The second maps names of compile-time entities to their values.","closed":true,"closedAt":"2021-03-19T02:19:33Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-03-16T13:02:39Z","labels":{"edges":[]},"author":{"login":"jsiek","url":"https://github.com/jsiek"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MzQzMTkyNzc=","title":"Eliminate the DEBUG message we're getting from bazel","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/400","body":"The message looks like this:\n\n```\nDEBUG: /private/var/tmp/_bazel_dabrahams/7eb59300bade26410e9aa17cfd0b52e9/external/rules_foreign_cc/workspace_definitions.bzl:6:6: `@rules_foreign_cc//:workspace_definitions.bzl` has been replaced by `@rules_foreign_cc//foreign_cc:repositories.bzl`. Please use the updated source location\n```","closed":true,"closedAt":"2021-03-19T08:00:27Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NTk1Mzk3NzI3","title":"Remove unused bits from our WORKSPACE and format it.","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Originally, I experimented with special rules for C++ builds of LLVM but\r\nwe ended up with a native build of it instead. Loading and using this\r\nwas completely unnecessary now and would have needed an update. Just\r\nremove it.\r\n\r\nFixes #400","url":"https://github.com/carbon-language/carbon-lang/pull/402","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/3f40420bec0d9fc04ede43f937cf82c19b908eaf"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTk1Mzk3NzI3OjNmNDA0MjBiZWMwZDlmYzA0ZWRlNDNmOTM3Y2Y4MmMxOWI5MDhlYWY=","resourcePath":"/carbon-language/carbon-lang/pull/402/commits/3f40420bec0d9fc04ede43f937cf82c19b908eaf"}}]},"createdAt":"2021-03-18T10:20:14Z","closed":true,"closedAt":"2021-03-19T08:00:27Z"}}]},"createdAt":"2021-03-18T02:01:42Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzg5NzQ3Njc1","color":"8FA36E","name":"infrastructure"}}]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[{"node":{"login":"chandlerc"}}]}}},{"node":{"id":"MDU6SXNzdWU4MjMwNTAxNDg=","title":"Demo control-flow operator","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/349","body":"As we refactor the interpreter, we need to make sure that we don't accidentally box ourselves in with\r\nand approach that can't handle the control-flow features that we may want to add in the future, such as\r\nexceptions, question mark, coroutines, threads, etc.\r\n\r\nSo the idea is to demo a fairly powerful control-flow feature now as a place-holder, such as first-class continuations (or perhaps delimited continuations), even though we may not (probably do not?) want this feature in Carbon.","closed":true,"closedAt":"2021-03-26T15:22:49Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NTg3OTg5OTg1","title":"Experimental control-flow operator","author":{"login":"jsiek","url":"https://github.com/jsiek"},"body":"This adds \"delimited continuations\" with `delimit`, `yield` and `resume` features that provide a kind of resumable exception with first-class continuations. The point of adding this feature is not to say that we want delimited continuations in Carbon, but this represents a place-holder for other powerful control-flow features that might eventually be in Carbon, such as coroutines, threads, exceptions, etc. As we refactor the executable semantics, having this feature in place will keep us honest and prevent us from accidentally simplifying the interpreter to the point where it can't handle features like this one.\r\n\r\nInstead of delimited continuations, we could have instead done regular continuations with callcc. However, there seems to be a consensus amongst the experts that delimited continuations are better than regular ones.\r\n\r\nThis implementation needs more testing. However, the examples from the literature that I'd like to use as tests all use `lambda`, so I'm going to do an experimental `lambda` and then circle back to add more tests for the delimited continuations.\r\n\r\nFixes #349","url":"https://github.com/carbon-language/carbon-lang/pull/368","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/3b427d0f72200c8f6bcde2ffaa633fd9830e729c"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjNiNDI3ZDBmNzIyMDBjOGY2YmNkZTJmZmFhNjMzZmQ5ODMwZTcyOWM=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/3b427d0f72200c8f6bcde2ffaa633fd9830e729c"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/0ee42fbe7daff5d181dd00f8495184097e9c4f61"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjBlZTQyZmJlN2RhZmY1ZDE4MWRkMDBmODQ5NTE4NDA5N2U5YzRmNjE=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/0ee42fbe7daff5d181dd00f8495184097e9c4f61"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/da93611be1936a3c335ab36095405f429807471c"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmRhOTM2MTFiZTE5MzZhM2MzMzVhYjM2MDk1NDA1ZjQyOTgwNzQ3MWM=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/da93611be1936a3c335ab36095405f429807471c"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/d1d134d2c08583ba3ce6ff83e752f03905f21884"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmQxZDEzNGQyYzA4NTgzYmEzY2U2ZmY4M2U3NTJmMDM5MDVmMjE4ODQ=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/d1d134d2c08583ba3ce6ff83e752f03905f21884"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/043f8b4130d6f1978f475622e2dc3a7bea28a5c1"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjA0M2Y4YjQxMzBkNmYxOTc4ZjQ3NTYyMmUyZGMzYTdiZWEyOGE1YzE=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/043f8b4130d6f1978f475622e2dc3a7bea28a5c1"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/2870945d2ae669c40d69c6a1cba5eaf3738b6a92"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjI4NzA5NDVkMmFlNjY5YzQwZDY5YzZhMWNiYTVlYWYzNzM4YjZhOTI=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/2870945d2ae669c40d69c6a1cba5eaf3738b6a92"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/39d2f67a8324aae4f78625eb67d8ccdcba1b867b"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjM5ZDJmNjdhODMyNGFhZTRmNzg2MjVlYjY3ZDhjY2RjYmExYjg2N2I=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/39d2f67a8324aae4f78625eb67d8ccdcba1b867b"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/d661ad5bead839fe03f9af499294c48e3a854b09"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmQ2NjFhZDViZWFkODM5ZmUwM2Y5YWY0OTkyOTRjNDhlM2E4NTRiMDk=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/d661ad5bead839fe03f9af499294c48e3a854b09"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/10f732b3cd9180512466b6fc0bfb4f90a7e9b4d3"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjEwZjczMmIzY2Q5MTgwNTEyNDY2YjZmYzBiZmI0ZjkwYTdlOWI0ZDM=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/10f732b3cd9180512466b6fc0bfb4f90a7e9b4d3"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/eccac491d15263e2e169a8efd6134623e013ad4b"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmVjY2FjNDkxZDE1MjYzZTJlMTY5YThlZmQ2MTM0NjIzZTAxM2FkNGI=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/eccac491d15263e2e169a8efd6134623e013ad4b"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/339b4caae0465858e1a2441958b403f04c57ccfb"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjMzOWI0Y2FhZTA0NjU4NThlMWEyNDQxOTU4YjQwM2YwNGM1N2NjZmI=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/339b4caae0465858e1a2441958b403f04c57ccfb"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/341e172cce2f5918399d187465ce875e3146923b"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjM0MWUxNzJjY2UyZjU5MTgzOTlkMTg3NDY1Y2U4NzVlMzE0NjkyM2I=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/341e172cce2f5918399d187465ce875e3146923b"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/ed2f6e17237388bc6457018f332650537fc7c298"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmVkMmY2ZTE3MjM3Mzg4YmM2NDU3MDE4ZjMzMjY1MDUzN2ZjN2MyOTg=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/ed2f6e17237388bc6457018f332650537fc7c298"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/14e663a03c1726939a522e83ddb965c90754c497"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjE0ZTY2M2EwM2MxNzI2OTM5YTUyMmU4M2RkYjk2NWM5MDc1NGM0OTc=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/14e663a03c1726939a522e83ddb965c90754c497"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/bab615ebef447592649a6c15e547faa78cb71a35"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmJhYjYxNWViZWY0NDc1OTI2NDlhNmMxNWU1NDdmYWE3OGNiNzFhMzU=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/bab615ebef447592649a6c15e547faa78cb71a35"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/e4b344bd685ecb1dde3438ed7ee81db200370392"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmU0YjM0NGJkNjg1ZWNiMWRkZTM0MzhlZDdlZTgxZGIyMDAzNzAzOTI=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/e4b344bd685ecb1dde3438ed7ee81db200370392"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/1384bc68689d49a5aafceda6720db0b9ffcd01ec"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjEzODRiYzY4Njg5ZDQ5YTVhYWZjZWRhNjcyMGRiMGI5ZmZjZDAxZWM=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/1384bc68689d49a5aafceda6720db0b9ffcd01ec"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/3ed461c1fe8b93a90fc0bd317e3c87b01bd46fa7"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjNlZDQ2MWMxZmU4YjkzYTkwZmMwYmQzMTdlM2M4N2IwMWJkNDZmYTc=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/3ed461c1fe8b93a90fc0bd317e3c87b01bd46fa7"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/6d3da99c2f22b672d46d82911ec9433de270a8d2"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjZkM2RhOTljMmYyMmI2NzJkNDZkODI5MTFlYzk0MzNkZTI3MGE4ZDI=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/6d3da99c2f22b672d46d82911ec9433de270a8d2"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/91417255892263388f0ed6a34d7f32f2fb3378ea"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjkxNDE3MjU1ODkyMjYzMzg4ZjBlZDZhMzRkN2YzMmYyZmIzMzc4ZWE=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/91417255892263388f0ed6a34d7f32f2fb3378ea"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/d87035207ff9396a6b8acd88ba36ff6b7d733141"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmQ4NzAzNTIwN2ZmOTM5NmE2YjhhY2Q4OGJhMzZmZjZiN2Q3MzMxNDE=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/d87035207ff9396a6b8acd88ba36ff6b7d733141"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/47d76abcf041c941d0da7faa0c17637e7849b1fb"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjQ3ZDc2YWJjZjA0MWM5NDFkMGRhN2ZhYTBjMTc2MzdlNzg0OWIxZmI=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/47d76abcf041c941d0da7faa0c17637e7849b1fb"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/ea0f5d992aa2e5d421d811ea4a383a513a4f523d"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmVhMGY1ZDk5MmFhMmU1ZDQyMWQ4MTFlYTRhMzgzYTUxM2E0ZjUyM2Q=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/ea0f5d992aa2e5d421d811ea4a383a513a4f523d"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/20482647854ef0e31bb85ea607f13ce7832677e7"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjIwNDgyNjQ3ODU0ZWYwZTMxYmI4NWVhNjA3ZjEzY2U3ODMyNjc3ZTc=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/20482647854ef0e31bb85ea607f13ce7832677e7"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/30399455261e4c0d846c88c869e8ed09bb1bdcbb"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjMwMzk5NDU1MjYxZTRjMGQ4NDZjODhjODY5ZThlZDA5YmIxYmRjYmI=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/30399455261e4c0d846c88c869e8ed09bb1bdcbb"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/a823a1f38f8367c3338e4f6910493828f100c3b4"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmE4MjNhMWYzOGY4MzY3YzMzMzhlNGY2OTEwNDkzODI4ZjEwMGMzYjQ=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/a823a1f38f8367c3338e4f6910493828f100c3b4"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/acfab98ebd280e1c74d48fb1e32ec3d5d5e38a4d"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmFjZmFiOThlYmQyODBlMWM3NGQ0OGZiMWUzMmVjM2Q1ZDVlMzhhNGQ=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/acfab98ebd280e1c74d48fb1e32ec3d5d5e38a4d"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/1d784395444df1b5ea23f146f692818634f9e71b"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjFkNzg0Mzk1NDQ0ZGYxYjVlYTIzZjE0NmY2OTI4MTg2MzRmOWU3MWI=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/1d784395444df1b5ea23f146f692818634f9e71b"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/2bb355dbfa5d599a9eeb65adcb8d939220ccdacf"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjJiYjM1NWRiZmE1ZDU5OWE5ZWViNjVhZGNiOGQ5MzkyMjBjY2RhY2Y=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/2bb355dbfa5d599a9eeb65adcb8d939220ccdacf"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/64f7893c931fe73e3f401c7d128425d323f1b126"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjY0Zjc4OTNjOTMxZmU3M2UzZjQwMWM3ZDEyODQyNWQzMjNmMWIxMjY=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/64f7893c931fe73e3f401c7d128425d323f1b126"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/53c5a6832405f155821f926c1198b21903ed270d"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjUzYzVhNjgzMjQwNWYxNTU4MjFmOTI2YzExOThiMjE5MDNlZDI3MGQ=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/53c5a6832405f155821f926c1198b21903ed270d"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/1bac4150ac21581d33a85ad127170d9dbe3001d7"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjFiYWM0MTUwYWMyMTU4MWQzM2E4NWFkMTI3MTcwZDlkYmUzMDAxZDc=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/1bac4150ac21581d33a85ad127170d9dbe3001d7"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/33794d54620ad5f9e21f0ab6415e40cf299bdc43"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjMzNzk0ZDU0NjIwYWQ1ZjllMjFmMGFiNjQxNWU0MGNmMjk5YmRjNDM=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/33794d54620ad5f9e21f0ab6415e40cf299bdc43"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/229618f9643126a11029eaf7fd484d3991e474f6"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjIyOTYxOGY5NjQzMTI2YTExMDI5ZWFmN2ZkNDg0ZDM5OTFlNDc0ZjY=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/229618f9643126a11029eaf7fd484d3991e474f6"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/957ce0b2c55e45b552c1e30be3145a5245e3db47"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1Ojk1N2NlMGIyYzU1ZTQ1YjU1MmMxZTMwYmUzMTQ1YTUyNDVlM2RiNDc=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/957ce0b2c55e45b552c1e30be3145a5245e3db47"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/b3baaff1b60d6d155aa6fb262a2d5ed723dd47f8"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmIzYmFhZmYxYjYwZDZkMTU1YWE2ZmIyNjJhMmQ1ZWQ3MjNkZDQ3Zjg=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/b3baaff1b60d6d155aa6fb262a2d5ed723dd47f8"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/83ad2ada7d77622982ccda39e10a511c226ca632"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjgzYWQyYWRhN2Q3NzYyMjk4MmNjZGEzOWUxMGE1MTFjMjI2Y2E2MzI=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/83ad2ada7d77622982ccda39e10a511c226ca632"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/98748f8f1265ffae8ebd4336959168ed3eff5b05"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1Ojk4NzQ4ZjhmMTI2NWZmYWU4ZWJkNDMzNjk1OTE2OGVkM2VmZjViMDU=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/98748f8f1265ffae8ebd4336959168ed3eff5b05"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/f6407f1bb2b1e691b39585344106844fdd77a17b"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmY2NDA3ZjFiYjJiMWU2OTFiMzk1ODUzNDQxMDY4NDRmZGQ3N2ExN2I=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/f6407f1bb2b1e691b39585344106844fdd77a17b"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/161754a6d7f11b15866d757429722cbddef5faf6"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjE2MTc1NGE2ZDdmMTFiMTU4NjZkNzU3NDI5NzIyY2JkZGVmNWZhZjY=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/161754a6d7f11b15866d757429722cbddef5faf6"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/a4375ea3ae2effcc5be255a888034445f961eb71"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmE0Mzc1ZWEzYWUyZWZmY2M1YmUyNTVhODg4MDM0NDQ1Zjk2MWViNzE=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/a4375ea3ae2effcc5be255a888034445f961eb71"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/5d821d58e19fb6adf45e581b0a83bb9a6428aab7"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjVkODIxZDU4ZTE5ZmI2YWRmNDVlNTgxYjBhODNiYjlhNjQyOGFhYjc=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/5d821d58e19fb6adf45e581b0a83bb9a6428aab7"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/1fbaca8a8eeba9ee03154cd5c63bd4c314650b44"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjFmYmFjYThhOGVlYmE5ZWUwMzE1NGNkNWM2M2JkNGMzMTQ2NTBiNDQ=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/1fbaca8a8eeba9ee03154cd5c63bd4c314650b44"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/b2171d470c332bf3a7d6d90d1346f10ef3205035"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OmIyMTcxZDQ3MGMzMzJiZjNhN2Q2ZDkwZDEzNDZmMTBlZjMyMDUwMzU=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/b2171d470c332bf3a7d6d90d1346f10ef3205035"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/7b20757bef48999ffa41f8036dcd795b83afc94f"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg3OTg5OTg1OjdiMjA3NTdiZWY0ODk5OWZmYTQxZjgwMzZkY2Q3OTViODNhZmM5NGY=","resourcePath":"/carbon-language/carbon-lang/pull/368/commits/7b20757bef48999ffa41f8036dcd795b83afc94f"}}]},"createdAt":"2021-03-09T13:38:09Z","closed":true,"closedAt":"2021-03-26T15:22:49Z"}}]},"createdAt":"2021-03-05T12:42:36Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}}]},"author":{"login":"jsiek","url":"https://github.com/jsiek"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4NDEyOTE4NDI=","title":"Spurious failures in GitHub checks","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDgwODAzNTM4Mg==","author":{"login":"mmdriley","url":"https://github.com/mmdriley"},"body":"it appears upstream Bazel is aware this is a failure mode of their CI.\r\n\r\nhttps://github.com/bazelbuild/bazelisk/issues/69\r\nhttps://github.com/bazelbuild/bazel/issues/11242","createdAt":"2021-03-26T08:30:05Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDgwOTQ5OTExMw==","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I expect #420 fixed this","createdAt":"2021-03-29T15:58:03Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/418","body":"The \"test (ubuntu-latest, opt)\" and \"test (ubuntu-latest, fastbuild)\" checks for PR #417 are [failing](https://github.com/carbon-language/carbon-lang/actions/runs/687742452) with errors like the following:\r\n\r\n```\r\nRun bazelisk --version\r\n2021/03/25 19:53:14 Using unreleased version at commit 1d20ea76113e49f7fb607ef92231f3665797b8e6\r\n2021/03/25 19:53:14 Downloading https://storage.googleapis.com/bazel-builds/artifacts/ubuntu1404/1d20ea76113e49f7fb607ef92231f3665797b8e6/bazel...\r\n2021/03/25 19:53:14 could not download Bazel: HTTP GET https://storage.googleapis.com/bazel-builds/artifacts/ubuntu1404/1d20ea76113e49f7fb607ef92231f3665797b8e6/bazel failed with error 404\r\nError: Process completed with exit code 1.\r\n```\r\n\r\nThis doesn't have any plausible relation to the content of the PR, so I think it's an infrastructure bug.","closed":true,"closedAt":"2021-03-29T15:58:03Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-03-25T20:41:10Z","labels":{"edges":[]},"author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MzAyNzc3OTg=","title":"rename env and ct_env","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/387","body":"In the type checker, rename `env` to `types` and `ct_env` to `values`.\r\nIn the interpreter, rename `env` to `values`.","closed":true,"closedAt":"2021-03-30T17:41:24Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NjAyMjU5NTcy","title":"rename env and ct_env","author":{"login":"jsiek","url":"https://github.com/jsiek"},"body":"change env to types, ct_env to values in type checker, change env to values in interpreter.\r\n\r\nFixes #387 ","url":"https://github.com/carbon-language/carbon-lang/pull/419","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/202520b364ec6c7bfb02e2bcdb23cda1d7a04c96"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjAyMjU5NTcyOjIwMjUyMGIzNjRlYzZjN2JmYjAyZTJiY2RiMjNjZGExZDdhMDRjOTY=","resourcePath":"/carbon-language/carbon-lang/pull/419/commits/202520b364ec6c7bfb02e2bcdb23cda1d7a04c96"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/3530cb007ad69a44980b9bc0e59fe937b22297ab"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjAyMjU5NTcyOjM1MzBjYjAwN2FkNjlhNDQ5ODBiOWJjMGU1OWZlOTM3YjIyMjk3YWI=","resourcePath":"/carbon-language/carbon-lang/pull/419/commits/3530cb007ad69a44980b9bc0e59fe937b22297ab"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/a6d72dca11b47e0ff0dc6df99fececca8ec99ea7"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjAyMjU5NTcyOmE2ZDcyZGNhMTFiNDdlMGZmMGRjNmRmOTlmZWNlY2NhOGVjOTllYTc=","resourcePath":"/carbon-language/carbon-lang/pull/419/commits/a6d72dca11b47e0ff0dc6df99fececca8ec99ea7"}}]},"createdAt":"2021-03-28T15:33:21Z","closed":true,"closedAt":"2021-03-30T17:41:24Z"}}]},"createdAt":"2021-03-12T16:33:28Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}}]},"author":{"login":"jsiek","url":"https://github.com/jsiek"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MjMyNzc4NzA=","title":"delete undef1 and undef2 test cases","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/350","body":"Those were both accidentally included. They both use pointers which are not present in the executable semantics.","closed":true,"closedAt":"2021-03-30T17:46:43Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-03-05T17:23:05Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyMTA2MTAzNDYx","color":"311add","name":"proposal declined"}},{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}}]},"author":{"login":"jsiek","url":"https://github.com/jsiek"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MjMwNDcyNDU=","title":"executable semantics: disable tracing by default, update goldens","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/348","body":"","closed":true,"closedAt":"2021-04-06T13:10:55Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-03-05T12:37:59Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}}]},"author":{"login":"jsiek","url":"https://github.com/jsiek"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4NjQyOTYyNjU=","title":"implement tuple restrictions in executable semantics","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDgyNjExMzI0OA==","author":{"login":"jsiek","url":"https://github.com/jsiek"},"body":"Resolved by #486","createdAt":"2021-04-24T15:57:20Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDgyNjExNDc4MA==","author":{"login":"jsiek","url":"https://github.com/jsiek"},"body":"done!","createdAt":"2021-04-24T16:06:33Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/481","body":"Some updates needed to match the tuples proposal:\r\n\r\n- positional elements must come first\r\n- ordering of named-fields matters","closed":true,"closedAt":"2021-04-24T16:06:23Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-04-21T21:04:55Z","labels":{"edges":[]},"author":{"login":"jsiek","url":"https://github.com/jsiek"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MzQxNzk4ODg=","title":"Principle: Write Building Codes, Not Style Guides","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDgwMjM3NjIwNA==","author":{"login":"fowles","url":"https://github.com/fowles"},"body":"Just chiming in to say that I think you are completely accurate here.  (trying to avoid https://en.wikipedia.org/wiki/Warnock%27s_dilemma)","createdAt":"2021-03-18T23:15:29Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDg0NjMxNDcxNA==","author":{"login":"mmdriley","url":"https://github.com/mmdriley"},"body":"Ported to a proposal in #546 ","createdAt":"2021-05-22T00:01:23Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/398","body":"# Principle: Write Building Codes, Not Style Guides\r\n\r\n<!--\r\nPart of the Carbon Language project, under the Apache License v2.0 with LLVM\r\nExceptions. See /LICENSE for license information.\r\nSPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\r\n-->\r\n\r\n<!-- toc -->\r\n\r\n## Table of contents\r\n\r\n-   [Background](#background)\r\n-   [Principle](#principle)\r\n-   [Applications of these principles](#applications-of-these-principles)\r\n\r\n<!-- tocstop -->\r\n\r\n## Background\r\n\r\nMost languages come with a set of rules around naming, \r\nuse of whitespace, character sets, and the like. These are enforced by the\r\ncompiler and other tools. Some of these rules are for ease of parsing or compiling, while others are to ensure the code is readable and maintainable. In addition,\r\nmost languages grow an ecosystem of style guides that recommend \r\nvarious best practices around naming, whitespace, character sets, \r\nlength of names, length of functions, and so on. These guides compete \r\nfor followers and adherents. For a new language, there is pressure to \r\ninclude more rules in the language, so as to need less of them in the guides, and to have more consistency.\r\n\r\n## Principle\r\n\r\nThe principle here relies on an analogy: in creating a house, you might well\r\nconsult any number of style guides for advice on what colour to paint things,\r\nwhether all the bedroms should be on the same floor, or what size a \r\nbalcony needs to be before anyone actually uses it. But your house must\r\nconform to a number of building codes as well: rules about the spacing\r\nof the stair railings, the thickness of support beams, and the presence \r\nof windows in bedrooms for emergency exit. These are safety rules, not a \r\nmatter of taste. \r\n\r\nCarbon should have a building code. These are enforced rules designed \r\nto prevent bugs and exploits. Carbon doesn't need a style guide and\r\ncan't really choose among various competing preferences for tabstops,\r\nnaming conventions, or whether or not comments need to be full sentences.\r\n\r\n## Applications of these principles\r\n\r\nCarbon could insist that local variable names use a particular casing \r\nconvention, that lines be a maximum length, or that a particular \r\nindentation strategy be followed. If the motivation for such a rule\r\nis \"I think it will make the code easier to read\" that is a style guide,\r\nand we should not encode it into the language. Compare those\r\nto a rule such as \"braces are not optional for if and while constructs.\"\r\nIf the motivation for that rule is to prevent `GOTO FAIL`, it is more\r\nof a building code rule than a style guide rule.\r\n\r\nIdeally we would encode no style guides at all, and our building\r\ncode would be rock solid, preventing all the kinds of bugs a language\r\ncan prevent through language design (leaving plenty of room for bugs\r\na language can't prevent.) \r\n ","closed":true,"closedAt":"2021-05-22T00:01:23Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-03-17T21:08:58Z","labels":{"edges":[]},"author":{"login":"KateGregory","url":"https://github.com/KateGregory"},"assignees":{"edges":[{"node":{"login":"mmdriley"}}]}}},{"node":{"id":"MDU6SXNzdWU5MTIwNDkwMjM=","title":"C++ port of interpreter should be tested","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDg2NzkyMjQ1NA==","author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"body":"I don't think porting the tests would shed enough additional light on the question to justify the time investment. In any event, I think this is obsolete now that #559 is resolved.","createdAt":"2021-06-24T20:14:38Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/566","body":"If we're going to have a useful comparison with the Swift implementation, https://github.com/dabrahams/carbon-lang/blob/8cb44a5fd69fa00e28d9f79d69beba15379cc31a/Tests/InterpreterTests/InterpreterTests.swift should be reimplemented in C++ and run on the same code.  The C++ code might be buggy, and there may be additional C++ code required to make testing possible.","closed":true,"closedAt":"2021-06-24T20:14:38Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-06-05T01:15:33Z","labels":{"edges":[]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[{"node":{"login":"geoffromer"}}]}}},{"node":{"id":"MDU6SXNzdWU5MzAzNzIzMTU=","title":"Delete `indirect-value` branch","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDg2ODg5MjMxMQ==","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Done.","createdAt":"2021-06-26T00:13:07Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/600","body":"I accidentally created the [`indirect-value`](https://github.com/carbon-language/carbon-lang/tree/indirect-value) branch due to a mistyped git command, and for some reason I have the authority to create it, but not to delete it.","closed":true,"closedAt":"2021-06-26T00:13:07Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-06-25T17:32:42Z","labels":{"edges":[]},"author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"assignees":{"edges":[{"node":{"login":"chandlerc"}}]}}},{"node":{"id":"MDU6SXNzdWU4MjM2ODcxMTA=","title":"Discourse isn't set up to receive replies by email","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc40uRUh","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Discourse isn't in use anymore.","createdAt":"2021-07-21T22:42:59Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/356","body":"It surprised me when I found a bunch of my posts had been rejected because it won't receive email replies.  It's easy to set this up and will be convenient for lots of folks.\r\n","closed":true,"closedAt":"2021-07-21T22:42:59Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-03-06T16:24:50Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzg5NzQ3Njc1","color":"8FA36E","name":"infrastructure"}}]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4NjgwMDcyNzk=","title":"Proposal RFC automation","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc40uReA","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"We ended up with some project automation. Flow was added to https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/evolution.md#life-of-a-proposal","createdAt":"2021-07-21T22:44:45Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/502","body":"Right now, [evolution](https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/evolution.md) says to use \"Ready for review\" on new proposals, and we've pushed in that direction assuming we could automate it.\r\n\r\nIf we go public, we should be able to automate \"ready for review\" via action: however, GH permissions don't work out for private repos. #501 for context:\r\n\r\n> \"Error: Resource not accessible by integration\"\r\n> https://github.com/carbon-language/carbon-lang/runs/2441129284?check_suite_focus=true\r\n> \r\n> I'd seen this mentioned on some actions:\r\n> https://github.com/marketplace/actions/github-project-automation#personal-access-token-secretsgithub_token\r\n\r\nOptions I see (assuming we want to keep projects) are:\r\n\r\n**1. Instruct to do _both_ \"ready for review\", and manually change project column to \"RFC\"**\r\n\r\nThis adds a little more incremental work. The \"RFC\" label should still get added on changing project columns, at least.\r\n\r\n**2. Resume creating proposal PRs out-of-draft, using \"WIP\" label**\r\n\r\nInstructions would be to change project column to RFC (replacing \"ready for review\"), automation would take care of labels.\r\n\r\nThis undoes a particular change from #426. Draft PRs have some built-in integration with GH (mainly in how they're flagged), so we'd be giving that up.\r\n\r\n**3. Use a bot for actions**\r\n\r\nhttps://github.com/philschatz/project-bot is a bot that could probably support this. Right now it doesn't support `ready_for_review`, but we could probably get that added trivially.\r\n\r\nTo make this work, we'd need to keep an automation card in every column. Not my favorite aesthetic, but a way to make things work.\r\n\r\nI'd avoided this option because I also have less trust of a full app versus an action (perhaps misplaced?).\r\n\r\n--\r\n\r\nAny preferences for which direction we head in?","closed":true,"closedAt":"2021-07-21T22:44:46Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-04-26T18:38:50Z","labels":{"edges":[]},"author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"assignees":{"edges":[{"node":{"login":"chandlerc"}}]}}},{"node":{"id":"MDU6SXNzdWU4NDk1NTU2NDU=","title":"Test issue for dependency checking","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc407QHV","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-28T01:50:40Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/433","body":"Nothing to see here.","closed":true,"closedAt":"2021-07-31T22:20:13Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-04-03T02:00:25Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"assignees":{"edges":[{"node":{"login":"chandlerc"}}]}}},{"node":{"id":"MDU6SXNzdWU5MjMwMDQ4MzA=","title":"Fix memory leaks in executable_semantics","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/580","body":"The `executable_semantics` codebase pervasively leaks memory. This was an intentional way of keeping the code simple while dealing with issues like Bison's limited support for C++, but it means we have to suppress LeakSanitizer in several places, and may eventually cause scalability problems. If we can find a way to manage memory without unduly complicating the code (and I think we can), we should do so.","closed":true,"closedAt":"2021-08-02T18:08:22Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NzAwNDkxNTU3","title":"Move all new's to global_arena, and remove ASAN disabling","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Note this changes identifiers from char* to string to avoid malloc.\r\n\r\nFixes #580 \r\n\r\n(feel free to get #685 in first if you want)","url":"https://github.com/carbon-language/carbon-lang/pull/690","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/6fa15fcfd72c8b78348ff482b75c0e52f8650434"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzAwNDkxNTU3OjZmYTE1ZmNmZDcyYzhiNzgzNDhmZjQ4MmI3NWMwZTUyZjg2NTA0MzQ=","resourcePath":"/carbon-language/carbon-lang/pull/690/commits/6fa15fcfd72c8b78348ff482b75c0e52f8650434"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/d9adf77012f6df3468298fdf2325ff26509b62db"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzAwNDkxNTU3OmQ5YWRmNzcwMTJmNmRmMzQ2ODI5OGZkZjIzMjVmZjI2NTA5YjYyZGI=","resourcePath":"/carbon-language/carbon-lang/pull/690/commits/d9adf77012f6df3468298fdf2325ff26509b62db"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/41f9e77ed7d85f13ee8683794c211739463548bd"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzAwNDkxNTU3OjQxZjllNzdlZDdkODVmMTNlZTg2ODM3OTRjMjExNzM5NDYzNTQ4YmQ=","resourcePath":"/carbon-language/carbon-lang/pull/690/commits/41f9e77ed7d85f13ee8683794c211739463548bd"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/e2fe4704a56f2a72e9b9bebf4a58d8ba7f735545"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzAwNDkxNTU3OmUyZmU0NzA0YTU2ZjJhNzJlOWI5YmViZjRhNThkOGJhN2Y3MzU1NDU=","resourcePath":"/carbon-language/carbon-lang/pull/690/commits/e2fe4704a56f2a72e9b9bebf4a58d8ba7f735545"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/efb99ec11227a53e2442b354fe289cbcad0466b5"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzAwNDkxNTU3OmVmYjk5ZWMxMTIyN2E1M2UyNDQyYjM1NGZlMjg5Y2JjYWQwNDY2YjU=","resourcePath":"/carbon-language/carbon-lang/pull/690/commits/efb99ec11227a53e2442b354fe289cbcad0466b5"}}]},"createdAt":"2021-07-30T18:33:28Z","closed":true,"closedAt":"2021-08-02T18:08:22Z"}}]},"createdAt":"2021-06-16T19:23:42Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}}]},"author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MTQ4MTkxODg=","title":"Readability: use `std::stack` in lieu of `Cons`","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4OTc0ODY5Ng==","author":{"login":"jsiek","url":"https://github.com/jsiek"},"body":"To update this issue. Some uses of Cons were replaced by a new Stack class. The next step is to replace the Stack class with uses of std::stack.","createdAt":"2021-03-03T14:21:54Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4OTg4ODU0Mg==","author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"body":"I am not yet convinced using `std::stack` is a good move.  See the last part of https://github.com/carbon-language/carbon-lang/pull/327#issuecomment-789886084 for details.","createdAt":"2021-03-03T17:04:40Z"}},{"node":{"id":"IC_kwDOD3caBc41jss-","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I think the `Stack` switch is the direction we're going, I'm considering this resolved.","createdAt":"2021-08-13T15:39:25Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/286","body":"Per @jsiek.  It will help readability to see the words `stack`, `push`, and `pop` in the code where that's the actual abstraction at work.","closed":true,"closedAt":"2021-08-13T15:39:25Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-02-23T20:49:17Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}}]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MTQ4NDEwMDA=","title":"Readability: Use mutable value semantics","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4NTA3OTU3OQ==","author":{"login":"jsiek","url":"https://github.com/jsiek"},"body":"Is the suggestion to use non-const pass by reference for some parameters?\r\nI agree that this change would improve readability, but I worry that it may be more error prone.\r\nSome care will be needed to prevent too much mutation... e.g. deciding when to create a \r\nlocal variable with a copy of a mutable reference and passing the copy into a recursive call instead of passing a mutable reference directly into a recursive call.","createdAt":"2021-02-24T13:35:25Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4NTE1MjQxNw==","author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"body":"> Is the suggestion to use non-const pass by reference for some parameters?\r\n\r\nNot unless those parameters are being mutated, and can't be represented as the target (`this`) of a non-const method.\r\n\r\n> Some care will be needed to prevent too much mutation\r\n\r\nIf you eliminate reference semantics you can do as much mutation as you want without worrying.  There's no reason the executable semantics implementation should need to expose reference semantics (except in those places where C++ briefly forces us to, e.g. `this` is a pointer).  Happy to explain more when we meet today.","createdAt":"2021-02-24T15:22:56Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4NTE1NDEzNA==","author":{"login":"jsiek","url":"https://github.com/jsiek"},"body":"It sounds like I don't understand the suggestion. Yes, let's talk more. It would be helpful to see an example.","createdAt":"2021-02-24T15:24:57Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc4Njc5NzAwMw==","author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"body":"0213c6d made a big dent in this issue, but there's a lot left to do.","createdAt":"2021-02-26T17:49:12Z"}},{"node":{"id":"IC_kwDOD3caBc40-Qgt","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-29T01:49:20Z"}},{"node":{"id":"IC_kwDOD3caBc41jtOG","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I'm closing this.... jsiek's comment on Feb 24 makes me think we're not clear what was intended, and I think with `Ptr` geoffromer and I have an agreed-upon path forward. Some of 0213c6d is definitely sticking (it added `Stack`) but others aren't (it's switching code to pass by value, I think deliberately creating a copy, and we've already undone some of that).","createdAt":"2021-08-13T15:42:42Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/288","body":"Per @jsiek, there are a number of places where a notional mutation is being expressed monadically.  It would improve comprehensibility to actually use idiomatic mutation of C++ value types.","closed":true,"closedAt":"2021-08-13T15:42:48Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-02-23T21:22:15Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}},{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MjMwNDY2Mzk=","title":"Replace PrintExp, etc. with operator<<","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc40-QgD","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-29T01:49:12Z"}},{"node":{"id":"IC_kwDOD3caBc41jtR8","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"This is done with the raw_ostream changes.","createdAt":"2021-08-13T15:43:07Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/347","body":"","closed":true,"closedAt":"2021-08-13T15:43:07Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-03-05T12:37:04Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}},{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"jsiek","url":"https://github.com/jsiek"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4NjY4NDYyMDk=","title":"Type expression evaluation: is this supposed to work?","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc407QGl","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-28T01:50:33Z"}},{"node":{"id":"IC_kwDOD3caBc41juCy","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I think this is working as intended: `g()` is a runtime evaluated function, but in the indicated code the type would need to be known at compile time. Thus the error on `g()` is correct.","createdAt":"2021-08-13T15:48:21Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/498","body":"My (mis?)understanding was that things like this were supposed to work, but executable semantics just complains that `g` isn't known.  Can you clarify what's intended here?\r\n\r\n```\r\nfn g() -> Type { return Int; }\r\n\r\nfn f0(g(): x) -> Int { // <====== Error\r\n  return x;\r\n}\r\n\r\nfn f1() -> g() { // <====== Error\r\n  return x;\r\n}\r\n\r\nfn main() -> Int { return 0; }\r\n```","closed":true,"closedAt":"2021-08-13T15:48:21Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-04-24T22:00:25Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}},{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[{"node":{"login":"jsiek"}}]}}},{"node":{"id":"MDU6SXNzdWU4NzQ5ODI0NDA=","title":"Should Carbon have labeled statements, goto, and labeled break?","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDgzMTg1MjkzNQ==","author":{"login":"tkoeppe","url":"https://github.com/tkoeppe"},"body":"What about \"computed gotos\" -- are they part of the question, or explicitly excluded?","createdAt":"2021-05-04T10:54:36Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDgzMjEzMjgyOQ==","author":{"login":"austern","url":"https://github.com/austern"},"body":"I'd like to defer computed goto to a separate discussion. Goto exists in C++ and labeled break exists in many of today's C++-like languages, but computed goto seems much more rare (the only examples I can think of are a deprecated Fortran feature and a non-standard GNU C extension), and including it would be more of a novelty. ","createdAt":"2021-05-04T17:58:05Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDg0NDAxMzgyNg==","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"I would prefer to consider labeled break (and continue) as part of looping constructs they interact with rather than isolation... My stance on them is really contingent on how they're integrated with the loop.\n\nMaybe here it's useful to focus on any higher level constraints that should at a minimum hold. My proposed constraints: no control flow that jumps over the start of a scope or variable lifetime. These are stricter than the rules for C/C++ (only considering *initializers* for example), but more teachable IMO. Are there others?\n\nBeyond this general restriction, I would actually suggest removing `goto`. I think it adds much more complexity than is warranted. I'd rather add more principled tools where needed to cover any use cases.","createdAt":"2021-05-19T11:30:49Z"}},{"node":{"id":"IC_kwDOD3caBc41sFjw","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-08-18T01:48:13Z"}},{"node":{"id":"IC_kwDOD3caBc41uBsp","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"I actually think there may be consensus here to just not have labeled statements, goto, and computed goto.\r\n\r\nAnd to consider anything like \"labeled break\" with a specific proposal for a loop construct that uses it rather than in isolation.\r\n\r\nAny concerns?","createdAt":"2021-08-18T16:32:03Z"}},{"node":{"id":"IC_kwDOD3caBc41uDZw","author":{"login":"austern","url":"https://github.com/austern"},"body":"I think that in the long run we probably will want to have goto, but I'm\nfine with leaving it out until there's strong evidence that we need it. It\nshouldn't be a hard feature to add later.\n\n>\n","createdAt":"2021-08-18T16:42:44Z"}},{"node":{"id":"IC_kwDOD3caBc41uwgx","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Calling this consensus and closing out for now.","createdAt":"2021-08-18T21:43:44Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/516","body":"Should Carbon have labeled statements, with the ability to branch to a label? That might mean `goto` (transfer control to an arbitrary label in the same function), or a more restricted feature like labeled `break`/`continue` (specify how many levels of a nested loop you're breaking out of), or both.  Most C-like procedural languages seem to have one or both of those features.\r\n\r\n| Language | goto | labeled break |\r\n|----------|------|-------------|\r\n| C++  | yes | no |\r\n| Java | no   | yes |\r\n| Rust | no   | yes |\r\n| Swift | no  | yes |\r\n| Go    | yes | yes |\r\n| C#    | yes | no |\r\n| D      | yes | yes |\r\n\r\nI suggest that we should have `goto`, just on the grounds that C++ has it and it'll make migration from C++ easier. We'll probably want something like C++'s rules about not skipping past initialization.\r\n\r\nLabeled `break`/`continue` is useful, but isn't necessarily part of an MVP.","closed":true,"closedAt":"2021-08-18T21:43:44Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-05-03T23:25:25Z","labels":{"edges":[]},"author":{"login":"austern","url":"https://github.com/austern"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4NDEyMTA2MjU=","title":"tell bison to generate the `parser.output` file for debugging purposes","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc407QIQ","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-28T01:50:47Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/416","body":"This requires adding the `--report=state` flag and adding `parser.output` to the `outs`.\r\n \r\n```\r\ngenrule(\r\n    name = \"syntax_bison_srcs\",\r\n    srcs = [\"parser.ypp\"],\r\n    outs = [\r\n        \"parser.cpp\",\r\n        \"parser.h\",\r\n        \"parser.output\",\r\n    ],\r\n    cmd = \"M4=$(M4) $(BISON) \" +\r\n          \"--output=$(location parser.cpp) \" +\r\n          \"--report=state \" +\r\n          \"--defines=$(location parser.h) \" +\r\n          \"$(location parser.ypp)\",\r\n    toolchains = [\r\n        \"@rules_bison//bison:current_bison_toolchain\",\r\n        \"@rules_m4//m4:current_m4_toolchain\",\r\n    ],\r\n)\r\n```","closed":true,"closedAt":"2021-08-31T17:46:42Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NzIyNzEyMDQy","title":"Add parser.output to outs","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Fixes #416 ","url":"https://github.com/carbon-language/carbon-lang/pull/795","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/3b928f8cb42891435305598a9281acd11aec8eee"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzIyNzEyMDQyOjNiOTI4ZjhjYjQyODkxNDM1MzA1NTk4YTkyODFhY2QxMWFlYzhlZWU=","resourcePath":"/carbon-language/carbon-lang/pull/795/commits/3b928f8cb42891435305598a9281acd11aec8eee"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/4ebeec13ce41e0795fabf9d80ee11e3c1b5f5727"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzIyNzEyMDQyOjRlYmVlYzEzY2U0MWUwNzk1ZmFiZjlkODBlZTExZTNjMWI1ZjU3Mjc=","resourcePath":"/carbon-language/carbon-lang/pull/795/commits/4ebeec13ce41e0795fabf9d80ee11e3c1b5f5727"}}]},"createdAt":"2021-08-30T18:18:25Z","closed":true,"closedAt":"2021-08-31T17:46:42Z"}}]},"createdAt":"2021-03-25T18:44:10Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}},{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"jsiek","url":"https://github.com/jsiek"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MTQ4NDE4NzM=","title":"Readability: remove Abbrevs","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc40-Qgh","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-29T01:49:18Z"}},{"node":{"id":"IC_kwDOD3caBc42Nabi","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"We've removed a fair amount of the abbreviations that had been in executable semantics. We may do more if #720 is accepted, but it's probably not worth keeping a tracking issue open at this point.","createdAt":"2021-08-31T18:20:06Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/289","body":"Per @jsiek, many names are abbreviated; spelling them out would improve comprehensibility a lot.","closed":true,"closedAt":"2021-08-31T18:20:06Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-02-23T21:23:34Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}},{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MTQ4MjExMTE=","title":"Readability: use methods to improve comprehension as a spec.","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc40-Qg5","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-29T01:49:21Z"}},{"node":{"id":"IC_kwDOD3caBc42NbWb","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I'm not quite clear what the intended direction for this issue was. Since I'm lacking examples of what the suggested changes would be, I'm going to close this issue.","createdAt":"2021-08-31T18:24:54Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/287","body":"Per @jsiek, we can unwind some nesting, eliminate use-once variables, and clarify by using methods where appropriate.","closed":true,"closedAt":"2021-08-31T18:24:54Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-02-23T20:51:29Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}},{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4NjU1NDA1NDQ=","title":"Spurious `>` characters in code blocks on website","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc407QGx","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-28T01:50:35Z"}},{"node":{"id":"IC_kwDOD3caBc42RSeF","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"The website is now gone","createdAt":"2021-09-01T17:33:18Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/493","body":"The code block in https://carbon-lang.dev/docs/design/code_and_name_organization/#imports currently looks like this:\r\n\r\n```\r\n>import Geometry library \"Shapes\";\r\n\r\nfn Area(Geometry.Circle circle) { ... };\r\n```\r\n\r\nThat leading `>` is not present in the markdown source. The same problem occurs on all code blocks in that file (and elsewhere on the website, so far as I can tell) that have a language string (e.g. `carbon` or `regex`) following the three opening backticks.","closed":true,"closedAt":"2021-09-01T17:33:18Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-04-22T22:31:43Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzg5NzQ3Njc1","color":"8FA36E","name":"infrastructure"}},{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MjM3MjcxMjI=","title":"I mistakenly pushed branches to upstream but can't delete them","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc407QJ4","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-28T01:51:02Z"}},{"node":{"id":"IC_kwDOD3caBc42RS2V","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I think we've done what we can here, short of either removing more people from repo write access or removing branch policies, neither of which I think is a path we want to go.","createdAt":"2021-09-01T17:35:18Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/360","body":"I've mistakenly created upstream branches for PRs, which I'm allowed to do by the system, but I don't have permission to delete the branches (or push any new commits to them).   I'm really sorry to create work for other people, but I'm unable to fix the problem I've created by myself.  \r\n\r\nSeems like possibly @zygoloid has made the same mistake: https://github.com/carbon-language/carbon-lang/branches/all\r\n\r\nSo there are two issues here: one is the extra branches, the other is the mismatch between stated policy and enforced policy.\r\n\r\nNote: I suggest letting those PRs play out even though the branches are in the wrong place, and just fixing the second issue.","closed":true,"closedAt":"2021-09-01T17:35:18Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-03-06T19:23:38Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzg5NzQ3Njc1","color":"8FA36E","name":"infrastructure"}},{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MjY3NzEwODA=","title":"ExecProgram() belongs in interpreter/","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc407QJf","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-28T01:50:58Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/371","body":"Currently the function is defined in syntax/.","closed":true,"closedAt":"2021-09-01T22:22:11Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NzI0NzIwODIz","title":"Move ExecProgram to interpreter/","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Seems to make sense since it's the only interpreter/ dependency in syntax/ right now, so this feels like untangling deps.\r\n\r\nFixes #371 ","url":"https://github.com/carbon-language/carbon-lang/pull/802","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/3ebb25c0fc52100b78609af69aa50deca4b22df4"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI0NzIwODIzOjNlYmIyNWMwZmM1MjEwMGI3ODYwOWFmNjlhYTUwZGVjYTRiMjJkZjQ=","resourcePath":"/carbon-language/carbon-lang/pull/802/commits/3ebb25c0fc52100b78609af69aa50deca4b22df4"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/d66a3d1e48ac62c7865ed6b018bce7169ceaa1fd"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI0NzIwODIzOmQ2NmEzZDFlNDhhYzYyYzc4NjVlZDZiMDE4YmNlNzE2OWNlYWExZmQ=","resourcePath":"/carbon-language/carbon-lang/pull/802/commits/d66a3d1e48ac62c7865ed6b018bce7169ceaa1fd"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/4a8f264555ea8f3f38d983abc676ea9797b650e9"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI0NzIwODIzOjRhOGYyNjQ1NTVlYThmM2YzOGQ5ODNhYmM2NzZlYTk3OTdiNjUwZTk=","resourcePath":"/carbon-language/carbon-lang/pull/802/commits/4a8f264555ea8f3f38d983abc676ea9797b650e9"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/69e40b9392294906f4554696a7a204ad793ad1ac"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI0NzIwODIzOjY5ZTQwYjkzOTIyOTQ5MDZmNDU1NDY5NmE3YTIwNGFkNzkzYWQxYWM=","resourcePath":"/carbon-language/carbon-lang/pull/802/commits/69e40b9392294906f4554696a7a204ad793ad1ac"}}]},"createdAt":"2021-09-01T17:44:21Z","closed":true,"closedAt":"2021-09-01T22:22:11Z"}}]},"createdAt":"2021-03-09T23:05:43Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}},{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4MjM2NzUwNzg=","title":"More concise error handling","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDc5MzExMzM2NA==","author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"body":"@geoffromer suggests that we should probably use `std::abort` rather than `std::exit`.","createdAt":"2021-03-08T22:02:51Z"}},{"node":{"id":"IC_kwDOD3caBc40-Qf0","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-29T01:49:09Z"}},{"node":{"id":"IC_kwDOD3caBc41jtgK","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I think the FATAL code partly addresses this, but the point about using `value_or` is interesting, maybe we can do a little more.","createdAt":"2021-08-13T15:44:36Z"}},{"node":{"id":"IC_kwDOD3caBc42KcBa","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I think the value_or part doesn't work out...\r\n\r\nConsider:\r\n\r\n```\r\n      std::optional<const Value*> type = types.Get(ident.Name());\r\n      if (type) {\r\n        return TCExpression(e, *type, types);\r\n      } else {\r\n        FATAL_COMPILATION_ERROR(e->SourceLoc())\r\n            << \"could not find `\" << ident.Name() << \"`\";\r\n      }\r\n```\r\n\r\nWe probably want lazy evaluation of `SourceLoc()` and `Name()`. My best idea for that was to wrap with a macro, but with an eye on maintaining lazy evaluation, the best I reached is:\r\n\r\n```\r\n      const Value* type = types.Get(ident.Name())\r\n                              .value_or(OPTIONAL_FATAL_COMPILATION_ERROR(\r\n                                  const Value*, (e->SourceLoc()),\r\n                                  (\"could not find `\" << ident.Name() << \"`\")));\r\n      return TCExpression(e, type, types);\r\n```\r\n\r\nSyntactically, I don't think this ends up being very readable. I think the macros already help a good amount with readability. So my leaning is to consider this sufficiently addressed and close. I'll leave this open a little longer if anybody wants to make suggestions for a better approach.","createdAt":"2021-08-30T21:19:45Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/355","body":"For example, replacing\r\n```\r\n    std::optional<Address> a = scope->env.Get(l);\r\n    if (!a) {\r\n      std::cerr << \"internal error in KillScope\" << std::endl;\r\n      exit(-1);\r\n    }\r\n```\r\nwith\r\n`    auto stackFrame = *scope->env.Get(l).valueor(die(\"internal error in Killscope\"));`","closed":true,"closedAt":"2021-09-03T23:21:59Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-03-06T15:29:56Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}}]},"author":{"login":"jsiek","url":"https://github.com/jsiek"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4Mjg1Njc0MTg=","title":"ReifyType makes bogus source locations","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc407QJX","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-28T01:50:57Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/379","body":"It appears to be passing 0 as a line number","closed":true,"closedAt":"2021-09-08T17:32:22Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NzI4OTQxOTAz","title":"Make ReifyType use the input location","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Fixes #379 ","url":"https://github.com/carbon-language/carbon-lang/pull/817","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/bab50808418a1e3075c59ffa31c6c41440512fdb"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI4OTQxOTAzOmJhYjUwODA4NDE4YTFlMzA3NWM1OWZmYTMxYzZjNDE0NDA1MTJmZGI=","resourcePath":"/carbon-language/carbon-lang/pull/817/commits/bab50808418a1e3075c59ffa31c6c41440512fdb"}}]},"createdAt":"2021-09-07T20:43:48Z","closed":true,"closedAt":"2021-09-08T17:32:22Z"}}]},"createdAt":"2021-03-11T01:25:21Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}},{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU5NzQ4ODU1OTI=","title":"Remove executable semantics globals","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc41xQE0","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"An example here is `state` in interpreter.h. We'll also need to switch to using reentrant bison.","createdAt":"2021-08-19T17:25:21Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/769","body":"We should get rid of globals in executable semantics. One motivation is to make executable semantics usable as a library. However, I think it'd also reduce the chance of bugs arising from #742, when `import` is added.","closed":true,"closedAt":"2021-09-09T18:00:57Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"MDExOlB1bGxSZXF1ZXN0NzI3MTI5NDY4","title":"Remove global_arena","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"With this, only main.cpp instantiates an arena. Maybe we'll want to split that up more later (e.g., so that the runtime interpreter uses its own arena), but given the intent to have type-checking update the AST, I thought this was a reasonable approach for now in order to avoid ownership complexities.\r\n\r\nFixes #769","url":"https://github.com/carbon-language/carbon-lang/pull/814","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/193bc83274a7e579c181e93e2bd8f58c12012a05"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI3MTI5NDY4OjE5M2JjODMyNzRhN2U1NzljMTgxZTkzZTJiZDhmNThjMTIwMTJhMDU=","resourcePath":"/carbon-language/carbon-lang/pull/814/commits/193bc83274a7e579c181e93e2bd8f58c12012a05"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/83c6211a2ccad7ad984582a26126c60abd5bb8d1"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI3MTI5NDY4OjgzYzYyMTFhMmNjYWQ3YWQ5ODQ1ODJhMjYxMjZjNjBhYmQ1YmI4ZDE=","resourcePath":"/carbon-language/carbon-lang/pull/814/commits/83c6211a2ccad7ad984582a26126c60abd5bb8d1"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/1bc3b0e8810f32dc312327ee325d4bd265b72fc3"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI3MTI5NDY4OjFiYzNiMGU4ODEwZjMyZGMzMTIzMjdlZTMyNWQ0YmQyNjViNzJmYzM=","resourcePath":"/carbon-language/carbon-lang/pull/814/commits/1bc3b0e8810f32dc312327ee325d4bd265b72fc3"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/7e8a06f4df274ee0595aa35c41f59552439b3f2c"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI3MTI5NDY4OjdlOGEwNmY0ZGYyNzRlZTA1OTVhYTM1YzQxZjU5NTUyNDM5YjNmMmM=","resourcePath":"/carbon-language/carbon-lang/pull/814/commits/7e8a06f4df274ee0595aa35c41f59552439b3f2c"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/7336b5e732cb019659aa2418c3a4e7d3ae7aa16a"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI3MTI5NDY4OjczMzZiNWU3MzJjYjAxOTY1OWFhMjQxOGMzYTRlN2QzYWU3YWExNmE=","resourcePath":"/carbon-language/carbon-lang/pull/814/commits/7336b5e732cb019659aa2418c3a4e7d3ae7aa16a"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/acbb6e545108037914366c559100a1eb3e70fba8"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI3MTI5NDY4OmFjYmI2ZTU0NTEwODAzNzkxNDM2NmM1NTkxMDBhMWViM2U3MGZiYTg=","resourcePath":"/carbon-language/carbon-lang/pull/814/commits/acbb6e545108037914366c559100a1eb3e70fba8"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/b9201ba7c9cab00c6b8db70b727ae67316ab6b73"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI3MTI5NDY4OmI5MjAxYmE3YzljYWIwMGM2YjhkYjcwYjcyN2FlNjczMTZhYjZiNzM=","resourcePath":"/carbon-language/carbon-lang/pull/814/commits/b9201ba7c9cab00c6b8db70b727ae67316ab6b73"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/23cdac22d8402d5b371a48d621f619aff2c9f382"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI3MTI5NDY4OjIzY2RhYzIyZDg0MDJkNWIzNzFhNDhkNjIxZjYxOWFmZjJjOWYzODI=","resourcePath":"/carbon-language/carbon-lang/pull/814/commits/23cdac22d8402d5b371a48d621f619aff2c9f382"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/f1b5ec570dbd1c50ef697d0db23d22f60f46b586"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI3MTI5NDY4OmYxYjVlYzU3MGRiZDFjNTBlZjY5N2QwZGIyM2QyMmY2MGY0NmI1ODY=","resourcePath":"/carbon-language/carbon-lang/pull/814/commits/f1b5ec570dbd1c50ef697d0db23d22f60f46b586"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/86ef6fcc1be6cf3ce6ac823d506da7220a149170"},"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI3MTI5NDY4Ojg2ZWY2ZmNjMWJlNmNmM2NlNmFjODIzZDUwNmRhNzIyMGExNDkxNzA=","resourcePath":"/carbon-language/carbon-lang/pull/814/commits/86ef6fcc1be6cf3ce6ac823d506da7220a149170"}}]},"createdAt":"2021-09-03T23:16:57Z","closed":true,"closedAt":"2021-09-09T18:00:57Z"}}]},"createdAt":"2021-08-19T17:21:29Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}}]},"author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc48_TMT","title":"`return` analysis assumes `match` is exhaustive","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/878","body":"The following program currently triggers an assertion failure in the interpreter:\r\n\r\n```\r\npackage ExecutableSemanticsTest api;\r\n\r\nfn main() -> i32 {\r\n  match (1) {\r\n    case 0 => {\r\n      return 0;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nUnder proposal #538, that program is ill-formed, because it contains a control-flow path that reaches the end of a function with an explicit return type, without reaching a `return` statement. We statically detect and diagnose violations of that rule during typechecking, and the interpreter relies on that, but there's a gap in that static check: it doesn't consider the possibility of a control flow path that reaches a `match` statement but doesn't enter any of its `case`s. In other words, it tacitly assumes all `match` statements are exhaustive.","closed":true,"closedAt":"2021-10-13T23:04:43Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc4tKSvx","title":"Check exhaustiveness of function-ending match statements","author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"body":"Fixes #878 ","url":"https://github.com/carbon-language/carbon-lang/pull/882","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/08891d5b005ab877ee9999e937da1e5710f0b1ef"},"id":"PURC_lADOD3caBc4tKSvx2gAoMDg4OTFkNWIwMDVhYjg3N2VlOTk5OWU5MzdkYTFlNTcxMGYwYjFlZg","resourcePath":"/carbon-language/carbon-lang/pull/882/commits/08891d5b005ab877ee9999e937da1e5710f0b1ef"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/20c904cad6c6b66bd09b1d5fef72b1ace9d0ad5b"},"id":"PURC_lADOD3caBc4tKSvx2gAoMjBjOTA0Y2FkNmM2YjY2YmQwOWIxZDVmZWY3MmIxYWNlOWQwYWQ1Yg","resourcePath":"/carbon-language/carbon-lang/pull/882/commits/20c904cad6c6b66bd09b1d5fef72b1ace9d0ad5b"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/33c0af78bdbcefc9edd48ce9a0be6091aa281001"},"id":"PURC_lADOD3caBc4tKSvx2gAoMzNjMGFmNzhiZGJjZWZjOWVkZDQ4Y2U5YTBiZTYwOTFhYTI4MTAwMQ","resourcePath":"/carbon-language/carbon-lang/pull/882/commits/33c0af78bdbcefc9edd48ce9a0be6091aa281001"}}]},"createdAt":"2021-10-13T18:37:05Z","closed":true,"closedAt":"2021-10-13T23:04:44Z"}}]},"createdAt":"2021-10-12T00:07:56Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}}]},"author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"assignees":{"edges":[{"node":{"login":"geoffromer"}}]}}},{"node":{"id":"I_kwDOD3caBc5AY-8x","title":"Fuzzed stack overflow in ParseOperatorExpression","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/988","body":"There's an overflow at:\r\n    #247 0x563fc1e878a5 in Carbon::ParseTree::Parser::ParseOperatorExpression(Carbon::PrecedenceGroup) /proc/self/cwd/toolchain/parser/parser_impl.cpp:1018:24\r\n\r\nExample fuzz file:\r\nhttps://github.com/carbon-language/carbon-lang/blob/79dffa6dcc267e4cec69f73604060e5cd7801fe9/toolchain/parser/fuzzer_corpus/811dedfa7c1108081bd7d76e57f2b15c1967985a\r\n\r\nI think this is essentially due to recursion on repeated operators (`*` in this case)","closed":true,"closedAt":"2022-01-05T22:38:17Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc4v2e2f","title":"Modify parsing to monitor stack depth and error before overflow","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"The macro is testing the waters -- I could also write the boilerplate per-function, but it's nice to have the one-liner...","url":"https://github.com/carbon-language/carbon-lang/pull/987","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/79dffa6dcc267e4cec69f73604060e5cd7801fe9"},"id":"PURC_lADOD3caBc4v2e2f2gAoNzlkZmZhNmRjYzI2N2U0Y2VjNjlmNzM2MDQwNjBlNWNkNzgwMWZlOQ","resourcePath":"/carbon-language/carbon-lang/pull/987/commits/79dffa6dcc267e4cec69f73604060e5cd7801fe9"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/e88a0bbae6d25926ec3fae5dcfffc4c14990a4d6"},"id":"PURC_lADOD3caBc4v2e2f2gAoZTg4YTBiYmFlNmQyNTkyNmVjM2ZhZTVkY2ZmZmM0YzE0OTkwYTRkNg","resourcePath":"/carbon-language/carbon-lang/pull/987/commits/e88a0bbae6d25926ec3fae5dcfffc4c14990a4d6"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/9b8678d6b607e6a799f46f02d05faa337c204701"},"id":"PURC_lADOD3caBc4v2e2f2gAoOWI4Njc4ZDZiNjA3ZTZhNzk5ZjQ2ZjAyZDA1ZmFhMzM3YzIwNDcwMQ","resourcePath":"/carbon-language/carbon-lang/pull/987/commits/9b8678d6b607e6a799f46f02d05faa337c204701"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/b6b624506531187d2194d488140119920cf703ad"},"id":"PURC_lADOD3caBc4v2e2f2gAoYjZiNjI0NTA2NTMxMTg3ZDIxOTRkNDg4MTQwMTE5OTIwY2Y3MDNhZA","resourcePath":"/carbon-language/carbon-lang/pull/987/commits/b6b624506531187d2194d488140119920cf703ad"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/299dfcc70345ad1b1f26a3ccd73f6f9143aa86e6"},"id":"PURC_lADOD3caBc4v2e2f2gAoMjk5ZGZjYzcwMzQ1YWQxYjFmMjZhM2NjZDczZjZmOTE0M2FhODZlNg","resourcePath":"/carbon-language/carbon-lang/pull/987/commits/299dfcc70345ad1b1f26a3ccd73f6f9143aa86e6"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/6220c0f90a43aab5f930d7a555656be90d62f8cc"},"id":"PURC_lADOD3caBc4v2e2f2gAoNjIyMGMwZjkwYTQzYWFiNWY5MzBkN2E1NTU2NTZiZTkwZDYyZjhjYw","resourcePath":"/carbon-language/carbon-lang/pull/987/commits/6220c0f90a43aab5f930d7a555656be90d62f8cc"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/1ebae6c9e962040d3182f2db68dac059776919b7"},"id":"PURC_lADOD3caBc4v2e2f2gAoMWViYWU2YzllOTYyMDQwZDMxODJmMmRiNjhkYWMwNTk3NzY5MTliNw","resourcePath":"/carbon-language/carbon-lang/pull/987/commits/1ebae6c9e962040d3182f2db68dac059776919b7"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/f9e29026a036ffa0559b82a3acd8a080af35f48d"},"id":"PURC_lADOD3caBc4v2e2f2gAoZjllMjkwMjZhMDM2ZmZhMDU1OWI4MmEzYWNkOGEwODBhZjM1ZjQ4ZA","resourcePath":"/carbon-language/carbon-lang/pull/987/commits/f9e29026a036ffa0559b82a3acd8a080af35f48d"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/cea2bf77278fb67b51a0bfa037d2502db447a8a2"},"id":"PURC_lADOD3caBc4v2e2f2gAoY2VhMmJmNzcyNzhmYjY3YjUxYTBiZmEwMzdkMjUwMmRiNDQ3YThhMg","resourcePath":"/carbon-language/carbon-lang/pull/987/commits/cea2bf77278fb67b51a0bfa037d2502db447a8a2"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/935899b58396f29d07047e6e3c851bca9f7f8315"},"id":"PURC_lADOD3caBc4v2e2f2gAoOTM1ODk5YjU4Mzk2ZjI5ZDA3MDQ3ZTZlM2M4NTFiY2E5ZjdmODMxNQ","resourcePath":"/carbon-language/carbon-lang/pull/987/commits/935899b58396f29d07047e6e3c851bca9f7f8315"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/91da5f947c9d151878e8e72de84862ce24f91e82"},"id":"PURC_lADOD3caBc4v2e2f2gAoOTFkYTVmOTQ3YzlkMTUxODc4ZThlNzJkZTg0ODYyY2UyNGY5MWU4Mg","resourcePath":"/carbon-language/carbon-lang/pull/987/commits/91da5f947c9d151878e8e72de84862ce24f91e82"}}]},"createdAt":"2021-12-14T21:36:26Z","closed":true,"closedAt":"2022-01-05T22:38:17Z"}}]},"createdAt":"2021-12-14T21:37:14Z","labels":{"edges":[{"node":{"id":"LA_kwDOD3caBc7ZJggV","color":"d93f0b","name":"toolchain"}}]},"author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU4NjE5NzI2NDg=","title":"Is this supposed to work?","comments":{"edges":[{"node":{"id":"MDEyOklzc3VlQ29tbWVudDgyMjk4NTI0OA==","author":{"login":"josh11b","url":"https://github.com/josh11b"},"body":"In the proposal I wrote (not accepted), that was not legal since the definition of `f` did not specify any named parameters. If you changed it to:\r\n\r\n```\r\nfn f(.x = Int: x, .y = Int: y) -> Int { return x; }\r\nfn main() -> Int { return f(.y = 3, .x = 0); }\r\n```\r\n\r\nThen I would expect to get an error that the arguments are passed in a different order than the parameters. That is something I would like to relax, but there are concerns about defining the order of evaluation and destruction when there are two possible orders to choose from.","createdAt":"2021-04-20T05:31:41Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDgyMzY4MzE0MA==","author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"body":"Ah, thanks, that one does in fact work.  Although, it does not report an error.","createdAt":"2021-04-21T00:15:42Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDgyMzk2NTk3NQ==","author":{"login":"tkoeppe","url":"https://github.com/tkoeppe"},"body":"(Could you kindly edit the issue titile to be somewhat meaningful when read on its own, e.g. in the issues summary list?)","createdAt":"2021-04-21T10:46:44Z"}},{"node":{"id":"MDEyOklzc3VlQ29tbWVudDgyNDM1ODY2MA==","author":{"login":"jsiek","url":"https://github.com/jsiek"},"body":"I've opened issue #481 to update the executable semantics to implement the ordering restriction Josh mentioned above.\r\n","createdAt":"2021-04-21T21:08:24Z"}},{"node":{"id":"IC_kwDOD3caBc407QHE","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-07-28T01:50:37Z"}},{"node":{"id":"IC_kwDOD3caBc49K7kw","author":{"login":"zygoloid","url":"https://github.com/zygoloid"},"body":"The executable semantics side of this was addressed in #481. There's also a specification question here, which is covered by #505 and in particular its question \"Are named parameters positional?\".\r\n\r\nClosing this in favor of those two other issues.","createdAt":"2022-01-31T22:27:40Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/474","body":"```\r\nfn f(Int: x, Int: y) -> Int { return x; }\r\nfn main() -> Int { return f(.y = 3, .x = 0); }\r\n```\r\n\r\nI get a \"missing field y\" compilation error.","closed":true,"closedAt":"2022-01-31T22:27:40Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-04-19T21:49:33Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}},{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"dabrahams","url":"https://github.com/dabrahams"},"assignees":{"edges":[{"node":{"login":"jsiek"}}]}}},{"node":{"id":"MDU6SXNzdWU5NzA1MjgzNDc=","title":"Implement block string literals","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc459g0y","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-11-18T01:48:39Z"}},{"node":{"id":"IC_kwDOD3caBc48uO4G","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"https://github.com/carbon-language/carbon-lang/pull/1028","createdAt":"2022-01-21T18:20:57Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/744","body":"Tracking issue for implementing block string literals.\r\n\r\nref: #199","closed":true,"closedAt":"2022-04-06T13:09:44Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-08-13T15:53:14Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}},{"node":{"id":"MDU6TGFiZWwzMjc3MzExMzQ0","color":"bfdadc","name":"good first issue"}}]},"author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"assignees":{"edges":[{"node":{"login":"pk19604014"}}]}}},{"node":{"id":"I_kwDOD3caBc5H-euB","title":"Parameterized impl syntax","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5CXl0U","author":{"login":"josh11b","url":"https://github.com/josh11b"},"body":"In discussions, we decided that we should also consider how we would name an impl declaration. This:\r\n\r\n- would allow delegation between impls\r\n- would allow out-of-line definition\r\n- would allow you to call a method from a specific impl to implement an impl in terms of another without just delegating\r\n\r\nFor unnamed impl declarations, we decided to go with option 3 using the `forall` keyword:\r\n```\r\nimpl forall [T:! Type] Vector(T) as Container;\r\n```\r\n\r\nFor named impl declarations, we decided to instead start with the `named` keyword and put an equal sign `=` after the name and before the Self type:\r\n```\r\nimpl named X = [i32; 5] as Printable;\r\n```\r\n\r\nAnd when the impl was parameterized, use round parens `(`...`)` after the name:\r\n```\r\nimpl named P(T:! Type) = Vector(T) as Printable;\r\n```\r\n\r\nThis allows us to name a specific method in the impl with bound values for parameters, so `P(i32).Print` is a function that prints a `Vector(i32)`.\r\n\r\nWe decided to stop allowing bindings inside the \"Type as Interface\" part of the impl declaration, so they will always be after one of these new keywords. So `impl Vector(T:! Type) as Printable` is now invalid. This means we need to change how we match an impl declaration of a parameterized class out of line:\r\n```\r\nclass Vector(T:! Type) {\r\n  impl as Printable;\r\n  impl forall [U:! Type where T is ImplicitAs(U)] as ImplicitAs(Vector(U));\r\n}\r\n\r\n// Previously: impl Vector(T:! Type) as Printable\r\nimpl forall [T:! Type] Vector(T) as Printable;\r\nimpl forall [T:! Type, U:! Type where T is ImplicitAs(U)] Vector(T) as Printable;\r\n```\r\n\r\nAlternatives considered:\r\n\r\n- We talked about a number of variations of option 7, but ultimately we liked the regularity of all `impl` declarations being first introduced by the same keyword.\r\n- We considered using the `facet` keyword instead of `forall` or `named`. However it was hard to distinguish how a `facet` was different from an `impl`. The main possibility we considered was that it represented the archetype used when type checking, but that did not help solve a problem with the impl declaration itself.\r\n- We thought it was not worth introducing ambiguities in the grammar in order to make this feature more concise, such as leaving off the `forall` or `named` keyword or the `=` after `named`.","createdAt":"2022-04-29T16:02:06Z"}},{"node":{"id":"IC_kwDOD3caBc5Ckb7r","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"@zygoloid and I talked through this a bit, and wanted to share where I think we're landing on the syntax question.\r\n\r\nWe both are really happy with `impl forall [T:! Type] Vector(T) as Container;`.\r\n\r\nWe both had sometimes overlapping, sometimes different concerns about other parts of this. None seemed huge, but enough that it seemed a bit difficult to get very comfortable moving forward.\r\n\r\nA concrete suggestion from me after the discussion:\r\n\r\n- Decide on and allow `impl forall [T:! Type] Vector(T) as Container;`, use that for all parameterized `impl`s.\r\n- Stop allowing bindings inside the `T as C` part so there is only a single way to write these. We can easily add this back if desired at some point.\r\n- Don't provide the named approach or out-of-line definitions yet. Instead, code would need to forward declare some function and alias it into the `impl`. Again, the goal would be to revisit the need for out-of-line method definitions for `impl`s and named `impl`s more generally after we get some experience with the minimal approach.\r\n\r\nOne big question is -- would delaying the named impl stuff be OK? I feel bad as I brought them back into the discussion (sorry about that), but I feel like they're actually making it harder to move forward because they open a door to a larger space than necessary and than I intended. While I'm actually pretty optimistic about us wanting named `impl`s eventually and am interested in that larger space, it is unsurprisingly less well explored and I think a bit harder to get a clear consensus around.\r\n\r\nIf that is OK, are folks happy with this as the decision for now, and we'll leave named impls (and expanding the pattern spellings) to the future?","createdAt":"2022-05-04T01:16:13Z"}},{"node":{"id":"IC_kwDOD3caBc5Ck8b0","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"I didn't include any of the specific concerns that came up in our discussion, and it is relevant that there were concerns. But to be clear, I don't think any of these are insurmountable. They may even be *good* things in the long run. The issue was whether we should eagerly spend more time right now figuring out the answers to those questions and resolving the remaining concerns.\r\n\r\nOne concern comes down to what *is* `P(T)` in the named case? It feels like going down this direction causes it to be its own thing in some way, and at least at the moment, it was hard to pin down what the right mental model would be. This uncertainty actually manifested in not being particularly comfortable with any of the syntax options -- some of them only make sense in one interpretation or the other.\r\n\r\nHere is a very rough summary of my memory of the discussion... I may have missed some key points though (sorry for that), hopefully we can correct/iterate on any to capture things better.\r\n- The `=` seems awkward. The thing on the *right* is an impl that has a very distinct syntax that is introduced by the keyword on the *left*. Unlike, for example `alias <id> = <name>` where the `<name>` is an *existing* Carbon syntactic construct.\r\n- We played around with a number of syntaxes that didn't really address this one way or another.\r\n- One observation was that the `=` isn't *critical* here... While `impl named P(T:! Type) Vector(T) as Container` has awkward justoposition, that might not be much more (or less) awkward than the `=`. It is somewhat one holistic entity -- a named impl.\r\n- That led to my observing that `named impl P(T:! Type) Vector(T) as Container` read more naturally to me.\r\n- Which led to @zygoloid observing that this really made a *named* impl seem importantly different. It wasn't clear what that different thing was, or whether that was desirable. Understanding that seemed important to understanding the right syntax here.\r\n- I then observed that we somewhat already need to understand that because the entire use case of out-of-line definitions will have us write `fn P(T:! Type).Print(...) { ... }` and we somewhat need to have a good mental model for what the thing is before the `.`. I think we have a good *rough* idea, but it seemed a bit hard to pin it down.\r\n- Trying to pin this down for myself, I kept coming back to \"named impl\"s being a *thing* that is what enables the out-of-line definition of functions. But that in turn suggested the `named impl P(T:! Type)` syntax and raised more questions...\r\n  - For example, is:\r\n    ```\r\n    named impl P(T:! Type) Vector(T) as Container { ... }\r\n    ```\r\n    Essentially a short-hand for first declaring a \"named impl\" thing called `P(T\r\n    ```\r\n    named impl P(T:! Type) Vector(T) as Container { ... }\r\n    impl forall [T:! Type] using P(T);\r\n    ```\r\n  - This in turn raised a bunch of other questions:\r\n    - Having the ability to declare a *named* impl that *isn't* found by normal impl-lookup is something that has been discussed as potentially desirable / useful in the past. So maybe we should allow these to be separate steps? Down side is that it is awfully verbose for what is very likely the common case.\r\n    - This exposes a potentially interesting different expressivity surface -- the *deduced* pattern doesn't have to be the exact same as the *named* pattern. You could imagine things like `impl forall [T:! Type] using P2(T, T)` for example.\r\n\r\nThis is roughly where I think we stopped. Not because any of this was *concerning*, it actually seemed fairly exciting to me at least. But it did seem to expose that there is more we should flesh out to understand what the mental model and design for named impls actually is. We could do that, but it wasn't clear this was a priority, and so it seemed like maybe worth just unwinding a bit and addressing the unnamed parameterized impls now, where we seem to be increasingly converging, and come back to named stuff later when we have more time to work through the details.\r\n\r\nMaybe this explains more the desire to narrow scope a bit?","createdAt":"2022-05-04T06:48:42Z"}},{"node":{"id":"IC_kwDOD3caBc5CnPiT","author":{"login":"josh11b","url":"https://github.com/josh11b"},"body":"We said we needed the `=` because of the grammatical ambiguity between \"parameterized named impl\" and \"unparameterized named impl of a tuple type\".\r\n","createdAt":"2022-05-04T16:55:09Z"}},{"node":{"id":"IC_kwDOD3caBc5CsGjY","author":{"login":"josh11b","url":"https://github.com/josh11b"},"body":"I'm fine splitting named impls out of this issue, since the original question for this issue was only about parameterized impls, as long as we copy the context.","createdAt":"2022-05-05T17:24:15Z"}},{"node":{"id":"IC_kwDOD3caBc5CwWiO","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Let's call this specific issue decided with the comment above: https://github.com/carbon-language/carbon-lang/issues/1192#issuecomment-1116847851\r\n\r\nAnd as @josh11b mentioned, keep recording any context or thoughts needed here so that when we pick up named impls again we don't have to rebuild that context.","createdAt":"2022-05-06T20:05:31Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1192","body":"@jsiek observed in #executable-semantics on Discord ([1](https://discord.com/channels/655572317891461132/763516049710120960/963061256963637269), [2](https://discord.com/channels/655572317891461132/763516049710120960/963133084335751168)) that our current proposed array syntax creates an ambiguity in the grammar with the parameterized impl syntax:\r\n\r\n> Here's an example with square brackets for implicit parameters:\r\n> ```\r\n> external impl [T:! Printable] Vector(T) as Printable { ... }\r\n> ```\r\n> and here's an example with square brackets for an array type:\r\n> ```\r\n> external impl [i32; 5] as Printable { ... }\r\n> ```\r\n\r\n@zygoloid listed some options for addressing this problem [in the #syntax channel](https://discord.com/channels/655572317891461132/709488742942900284/963191891334168628):\r\n\r\n> Summary of options for implicit parameters / arrays ambiguity discussed so far:\r\n> 1) Just make it work as-is: `impl [a; b]` parses as an array type, `impl [a, b]` parses as an implicit parameter. Theoretically this is unambiguous given that a `;` is required inside the `[`...`]` in the former and disallowed in the latter.  Concerns: it's likely to be visually ambiguous.\r\n> 2) Add mandatory parentheses: `impl [T:! Type] (Vector(T) as Container)`. Concerns: it's hard to avoid requiring them in cases that don't start with a [ if we want an unambiguous grammar. Requiring them always would impose a small ergonomic hit.\r\n> 3) Add an introducer keyword for implicit parameters: `impl where [T:! Type] Vector(T) as Container`. Unambiguous. Concerns: still some visual ambiguity due to reuse of `[`...`]`, concern over whether we'd uniformly use this syntax (`fn F where [T:! Type](x: T)`) or have non-uniform syntax for implicit parameters.\r\n> 4) Use a different syntax for array types in general: `impl Array(T) as Container` or `impl Array[N] as Container`. Concerns: may want a first-class syntax here, especially if (per @geoffromer 's variadics work, we want some special behavior for a deduced bound), and there's a strong convention to use `[`...`]` for this. The latter syntax is messy because of our types-as-expressions approach, but we could imagine providing a `impl Type as Indexable where .Result = Type` to construct array types. `T[]` might be a special case of some kind.\r\n> 5) Use a different syntax for implicit parameters in general: `impl<T:! Type> Vector(T) as Container`. Concerns: we don't have many delimiter options unless we start using multi-character delimiters; `()`, `[]`, and `{}` are all used for types, leaving `<>` as the only remaining bracket. Use of `<>` as brackets as a long history but not a good one.\r\n> ...\r\n> 6) Remove the implicit parameter list from impls and force them to be introduced  where  they're first used: `impl Vector(T:! Type) as Container`. Concerns: harms readability in some cases, eg `impl Optional(T:! As(U:! Type)) as As(Optional(U))` versus `impl [U:! Type, T:! As(U)] Optional(T) as As(Optional(U))`.\r\n> 7) Move the implicit parameter list before the impl keyword, perhaps with an introducer: `generic [T:! Type] impl Vector(T) as Container`. Concerns: increases verbosity; would be inconsistent if we put everything but me there, and surprising if we put me there. Also not clear what a good keyword is, given that the existence of deduced parameters isn't the same as an entity being generic.\r\n\r\n@chandlerc [proposed in #generics](https://discord.com/channels/655572317891461132/941071822756143115/964702683179130881) that we might change our terminology to make the keyword `generic` applicable even when some of the parameters were `template`.","closed":true,"closedAt":"2022-05-06T20:05:31Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-04-18T23:42:05Z","labels":{"edges":[]},"author":{"login":"josh11b","url":"https://github.com/josh11b"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5JeJ_x","title":"explorer crashes when a choice alternative has the same name as choice itself","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5C_qXh","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Inner choice alternative name gets resolved to the outer ChoiceDeclaration, and during type checking, the logic tries to access the static type of the alternative expression, which is not set, as choice declaration is assigned a static type after alternatives finish type-checking (unlike classes).\r\n\r\nPossible workaround is to fail name lookup for the inner choice alternative name by adding Choice name to the scope after processing choice's alternative.","createdAt":"2022-05-11T16:20:17Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1248","body":"$ cat /tmp/crash.carbon\r\npackage Test impl;\r\n\r\nchoice Ch {\r\n  Opt(Ch)\r\n}\r\n\r\nfn Main() -> i32 {\r\n  return 0;\r\n}\r\n\r\n$ bazel run explorer:explorer /tmp/crash.carbon\r\n\r\n/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/optional:911: _LIBCPP_ASSERT 'this->has_value()' failed. optional operator* called on a disengaged value\r\nPlease report issues to https://github.com/carbon-language/carbon-lang/issues and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/4adf340e1e81154d644e53e952b3b0b8/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer /tmp/crash.carbon\r\n #0 0x00005614343d9beb backtrace /tmp/llvm-20220302-9880-1faggz0/llvm-project-13.0.1.src/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:4202:13\r\n #1 0x00005614346f241b llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:565:13\r\n #2 0x00005614346f26bb PrintStackTraceSignalHandler(void*) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:632:1\r\n #3 0x00005614346ecd18 llvm::sys::RunSignalHandlers() /proc/self/cwd/external/llvm-project/llvm/lib/Support/Signals.cpp:98:18\r\n #4 0x00005614346f3c6e SignalHandler(int) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:407:1\r\n #5 0x00007f7955a1d200 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x12200)\r\n #6 0x00007f79556c68a1 raise ./signal/../sysdeps/unix/sysv/linux/raise.c:50:1\r\n #7 0x00007f79556b0546 abort ./stdlib/abort.c:81:7\r\n #8 0x000056143486d27f (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/4adf340e1e81154d644e53e952b3b0b8/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer+0x90927f)\r\n #9 0x000056143447fa32 std::__1::optional<Carbon::Value const*>::operator*() const & /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/optional:911:9\r\n#10 0x00005614344865fd static_type /proc/self/cwd/./explorer/ast/declaration.h:57:54\r\n#11 0x00005614344865fd operator() /proc/self/cwd/./explorer/ast/static_scope.h:89:45\r\n#12 0x00005614344865fd decltype(static_cast<Carbon::ChoiceDeclaration>(fp)(static_cast<Carbon::AstNode const&>(fp0))) std::__1::__invoke<Carbon::ValueNodeView::ValueNodeView<Carbon::ChoiceDeclaration, void>(Carbon::ChoiceDeclaration const*)::'lambda1'(Carbon::AstNode const&)&, Carbon::AstNode const&>(Carbon::ChoiceDeclaration&&, Carbon::AstNode const&) /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/type_traits:3918:1\r\n#13 0x00005614344865d9 std::__1::__function::__alloc_func<Carbon::ValueNodeView::ValueNodeView<Carbon::ChoiceDeclaration, void>(Carbon::ChoiceDeclaration const*)::'lambda1'(Carbon::AstNode const&), std::__1::allocator<Carbon::ValueNodeView::ValueNodeView<Carbon::ChoiceDeclaration, void>(Carbon::ChoiceDeclaration const*)::'lambda1'(Carbon::AstNode const&)>, Carbon::Value const& (Carbon::AstNode const&)>::operator()(Carbon::AstNode const&) /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__functional/function.h:171:9\r\n#14 0x000056143448645d std::__1::__function::__func<Carbon::ValueNodeView::ValueNodeView<Carbon::ChoiceDeclaration, void>(Carbon::ChoiceDeclaration const*)::'lambda1'(Carbon::AstNode const&), std::__1::allocator<Carbon::ValueNodeView::ValueNodeView<Carbon::ChoiceDeclaration, void>(Carbon::ChoiceDeclaration const*)::'lambda1'(Carbon::AstNode const&)>, Carbon::Value const& (Carbon::AstNode const&)>::operator()(Carbon::AstNode const&) /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__functional/function.h:345:5\r\n#15 0x00005614344e81d6 std::__1::__function::__value_func<Carbon::Value const& (Carbon::AstNode const&)>::operator()(Carbon::AstNode const&) const /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__functional/function.h:498:9\r\n#16 0x00005614344be552 Carbon::ValueNodeView::static_type() const /proc/self/cwd/./explorer/ast/static_scope.h:116:46\r\n#17 0x00005614344aff75 Carbon::TypeChecker::TypeCheckExp(Carbon::Expression*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:919:13\r\n#18 0x00005614344ae898 Carbon::TypeChecker::TypeCheckExp(Carbon::Expression*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:0:9\r\n#19 0x00005614344e4c7f Carbon::TypeChecker::DeclareChoiceDeclaration(Carbon::ChoiceDeclaration*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:0:5\r\n#20 0x00005614344d9f91 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#21 0x00005614344d9f91 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#22 0x00005614344d9f91 __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#23 0x00005614344d9f91 holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#24 0x00005614344d9f91 ok /proc/self/cwd/./common/error.h:61:36\r\n#25 0x00005614344d9f91 Carbon::TypeChecker::DeclareDeclaration(Carbon::Declaration*, Carbon::ImplScope&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:2174:7\r\n#26 0x00005614344e63fb index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#27 0x00005614344e63fb index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#28 0x00005614344e63fb __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#29 0x00005614344e63fb holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#30 0x00005614344e63fb ok /proc/self/cwd/./common/error.h:61:36\r\n#31 0x00005614344e63fb Carbon::TypeChecker::TypeCheck(Carbon::AST&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:2078:5\r\n#32 0x00005614344615cb ~__tree /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__tree:1791:11\r\n#33 0x00005614344615cb ~set /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/set:619:5\r\n#34 0x00005614344615cb ~TypeChecker /proc/self/cwd/./explorer/interpreter/type_checker.h:21:7\r\n#35 0x00005614344615cb Carbon::ExecProgram(Carbon::Arena*, Carbon::AST, std::__1::optional<llvm::raw_ostream*>) /proc/self/cwd/explorer/interpreter/exec_program.cpp:46:3\r\n#36 0x0000561434453d50 ~AST /proc/self/cwd/./explorer/ast/ast.h:17:8\r\n#37 0x0000561434453d50 Carbon::Main(llvm::StringRef, int, char**) /proc/self/cwd/explorer/main.cpp:78:3\r\n#38 0x0000561434452d5c index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#39 0x0000561434452d5c index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#40 0x0000561434452d5c __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#41 0x0000561434452d5c holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#42 0x0000561434452d5c ok /proc/self/cwd/./common/error.h:61:36\r\n#43 0x0000561434452d5c Carbon::ExplorerMain(llvm::StringRef, int, char**) /proc/self/cwd/explorer/main.cpp:88:69\r\n#44 0x00005614344521d1 main /proc/self/cwd/explorer/main_bin.cpp:0:10\r\n#45 0x00007f79556b17fd __libc_start_main ./csu/../csu/libc-start.c:332:16\r\n#46 0x00005614343a0fca _start (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/4adf340e1e81154d644e53e952b3b0b8/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer+0x43cfca)\r\n\r\n","closed":true,"closedAt":"2022-05-11T18:03:20Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc43muob","title":"Fix for a crash caused by choice alternative name being the same as choice name","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Fixes #1248\r\n\r\nChanged resolve names logic to add choice name to name resolution after choice's alternatives are added.","url":"https://github.com/carbon-language/carbon-lang/pull/1243","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/f5b1b4e53519ba18b20992dabc3d1867217e466a"},"id":"PURC_lADOD3caBc43muob2gAoZjViMWI0ZTUzNTE5YmExOGIyMDk5MmRhYmMzZDE4NjcyMTdlNDY2YQ","resourcePath":"/carbon-language/carbon-lang/pull/1243/commits/f5b1b4e53519ba18b20992dabc3d1867217e466a"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/b09ca53d3948d73f9133076bfc75a5d56eb34129"},"id":"PURC_lADOD3caBc43muob2gAoYjA5Y2E1M2QzOTQ4ZDczZjkxMzMwNzZiZmM3NWE1ZDU2ZWIzNDEyOQ","resourcePath":"/carbon-language/carbon-lang/pull/1243/commits/b09ca53d3948d73f9133076bfc75a5d56eb34129"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/381850b80deafa55ff400b824b666f365064a458"},"id":"PURC_lADOD3caBc43muob2gAoMzgxODUwYjgwZGVhZmE1NWZmNDAwYjgyNGI2NjZmMzY1MDY0YTQ1OA","resourcePath":"/carbon-language/carbon-lang/pull/1243/commits/381850b80deafa55ff400b824b666f365064a458"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/9042253f4cfefb9dd1649491f60b3cd04eaeafc8"},"id":"PURC_lADOD3caBc43muob2gAoOTA0MjI1M2Y0Y2ZlZmI5ZGQxNjQ5NDkxZjYwYjNjZDA0ZWFlYWZjOA","resourcePath":"/carbon-language/carbon-lang/pull/1243/commits/9042253f4cfefb9dd1649491f60b3cd04eaeafc8"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/8679246a72638c8317a3bb0609263b44752dbb16"},"id":"PURC_lADOD3caBc43muob2gAoODY3OTI0NmE3MjYzOGM4MzE3YTNiYjA2MDkyNjNiNDQ3NTJkYmIxNg","resourcePath":"/carbon-language/carbon-lang/pull/1243/commits/8679246a72638c8317a3bb0609263b44752dbb16"}}]},"createdAt":"2022-05-10T21:22:00Z","closed":true,"closedAt":"2022-05-11T18:03:20Z"}}]},"createdAt":"2022-05-11T13:27:35Z","labels":{"edges":[]},"author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"assignees":{"edges":[{"node":{"login":"pk19604014"}}]}}},{"node":{"id":"I_kwDOD3caBc5JkSgB","title":"explorer crashes when a function with `auto` return type has a __continuation/__run/__await as the only (or last) statement in function body","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/1257","body":"```\r\n$ cat /tmp/crash3.carbon \r\n// Generated by proto_to_carbon.\r\n\r\npackage EmptyIdentifier impl;\r\n\r\nfn EmptyIdentifier() -> auto \r\n{\r\n   __await;\r\n}\r\n\r\nfn Main() -> i32 {\r\n  return 0;\r\n}\r\n\r\n$ bazel run explorer:explorer  /tmp/crash3.carbon\r\nINFO: Invocation ID: 90b23507-8256-4849-9f15-0058b33311b7\r\nINFO: Analyzed target //explorer:explorer (0 packages loaded, 0 targets configured).\r\nINFO: Found 1 target...\r\nTarget //explorer:explorer up-to-date:\r\n  bazel-bin/explorer/explorer\r\nINFO: Elapsed time: 0.358s, Critical Path: 0.00s\r\nINFO: 1 process: 1 internal.\r\nINFO: Build completed successfully, 1 total action\r\nINFO: Build completed successfully, 1 total action\r\n/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/optional:911: _LIBCPP_ASSERT 'this->has_value()' failed. optional operator* called on a disengaged value\r\nPlease report issues to https://github.com/carbon-language/carbon-lang/issues and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer /tmp/crash3.carbon\r\n #0 0x00005626ebbdea7b backtrace /tmp/llvm-20220302-9880-1faggz0/llvm-project-13.0.1.src/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:4202:13\r\n #1 0x00005626ebef71ab llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:565:13\r\n #2 0x00005626ebef744b PrintStackTraceSignalHandler(void*) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:632:1\r\n #3 0x00005626ebef1aa8 llvm::sys::RunSignalHandlers() /proc/self/cwd/external/llvm-project/llvm/lib/Support/Signals.cpp:98:18\r\n #4 0x00005626ebef89fe SignalHandler(int) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:407:1\r\n #5 0x00007f3d5f6f3200 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x12200)\r\n #6 0x00007f3d5f39c8a1 raise ./signal/../sysdeps/unix/sysv/linux/raise.c:50:1\r\n #7 0x00007f3d5f386546 abort ./stdlib/abort.c:81:7\r\n #8 0x00005626ec07200f (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer+0x90900f)\r\n #9 0x00005626ebc843f2 std::__1::optional<Carbon::Value const*>::operator*() const & /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/optional:911:9\r\n#10 0x00005626ebcd3d1d Carbon::ReturnTerm::static_type() const /proc/self/cwd/./explorer/ast/return_term.h:64:54\r\n#11 0x00005626ebcd7920 Carbon::TypeChecker::DeclareFunctionDeclaration(Carbon::FunctionDeclaration*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:1729:3\r\n#12 0x00005626ebcde8c2 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#13 0x00005626ebcde8c2 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#14 0x00005626ebcde8c2 __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#15 0x00005626ebcde8c2 holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#16 0x00005626ebcde8c2 ok /proc/self/cwd/./common/error.h:61:36\r\n#17 0x00005626ebcde8c2 Carbon::TypeChecker::DeclareDeclaration(Carbon::Declaration*, Carbon::ImplScope&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:2160:7\r\n#18 0x00005626ebceb10b index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#19 0x00005626ebceb10b index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#20 0x00005626ebceb10b __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#21 0x00005626ebceb10b holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#22 0x00005626ebceb10b ok /proc/self/cwd/./common/error.h:61:36\r\n#23 0x00005626ebceb10b Carbon::TypeChecker::TypeCheck(Carbon::AST&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:2078:5\r\n#24 0x00005626ebc6645b ~__tree /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__tree:1791:11\r\n#25 0x00005626ebc6645b ~set /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/set:619:5\r\n#26 0x00005626ebc6645b ~TypeChecker /proc/self/cwd/./explorer/interpreter/type_checker.h:21:7\r\n#27 0x00005626ebc6645b Carbon::ExecProgram(Carbon::Arena*, Carbon::AST, std::__1::optional<llvm::raw_ostream*>) /proc/self/cwd/explorer/interpreter/exec_program.cpp:46:3\r\n#28 0x00005626ebc58be0 ~AST /proc/self/cwd/./explorer/ast/ast.h:17:8\r\n#29 0x00005626ebc58be0 Carbon::Main(llvm::StringRef, int, char**) /proc/self/cwd/explorer/main.cpp:78:3\r\n#30 0x00005626ebc57bec index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#31 0x00005626ebc57bec index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#32 0x00005626ebc57bec __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#33 0x00005626ebc57bec holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#34 0x00005626ebc57bec ok /proc/self/cwd/./common/error.h:61:36\r\n#35 0x00005626ebc57bec Carbon::ExplorerMain(llvm::StringRef, int, char**) /proc/self/cwd/explorer/main.cpp:88:69\r\n#36 0x00005626ebc57061 main /proc/self/cwd/explorer/main_bin.cpp:0:10\r\n#37 0x00007f3d5f3877fd __libc_start_main ./csu/../csu/libc-start.c:332:16\r\n#38 0x00005626ebba5e5a _start (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer+0x43ce5a)\r\n```","closed":true,"closedAt":"2022-05-17T16:07:17Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc43vBmC","title":"Changed ExpectReturnOnAllPaths() to treat continuation, run and await as missing returns","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Fixes #1257","url":"https://github.com/carbon-language/carbon-lang/pull/1258","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/0596d5d2523892a6bfe592c6b50a713e725a2cf9"},"id":"PURC_lADOD3caBc43vBmC2gAoMDU5NmQ1ZDI1MjM4OTJhNmJmZTU5MmM2YjUwYTcxM2U3MjVhMmNmOQ","resourcePath":"/carbon-language/carbon-lang/pull/1258/commits/0596d5d2523892a6bfe592c6b50a713e725a2cf9"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/76f5bae64baa2cd64c799e65a57950a5a9a5fa2b"},"id":"PURC_lADOD3caBc43vBmC2gAoNzZmNWJhZTY0YmFhMmNkNjRjNzk5ZTY1YTU3OTUwYTVhOWE1ZmEyYg","resourcePath":"/carbon-language/carbon-lang/pull/1258/commits/76f5bae64baa2cd64c799e65a57950a5a9a5fa2b"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/d8a558b21cd091f46be71e89eed84ff636fdf715"},"id":"PURC_lADOD3caBc43vBmC2gAoZDhhNTU4YjIxY2QwOTFmNDZiZTcxZTg5ZWVkODRmZjYzNmZkZjcxNQ","resourcePath":"/carbon-language/carbon-lang/pull/1258/commits/d8a558b21cd091f46be71e89eed84ff636fdf715"}}]},"createdAt":"2022-05-12T17:00:07Z","closed":true,"closedAt":"2022-05-17T16:07:17Z"}}]},"createdAt":"2022-05-12T16:51:34Z","labels":{"edges":[]},"author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"assignees":{"edges":[{"node":{"login":"pk19604014"}}]}}},{"node":{"id":"I_kwDOD3caBc5JoQjr","title":"explorer crashes when continuation name is reference inside continuation body","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5DHtV8","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Similar to #1248, type checker finds the continuation node for internal name referenced via `__run`, and continuation type is incomplete at this point.","createdAt":"2022-05-13T14:06:06Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1263","body":"$ cat /tmp/crash.carbon\r\npackage P impl;\r\n\r\nfn f() {\r\n  __continuation k {\r\n    __run k;\r\n  }\r\n}\r\n\r\nfn Main() -> i32 {\r\n  return 0;\r\n}\r\n\r\n$ bazel run explorer:explorer /tmp/crash.carbon\r\nINFO: Invocation ID: eb124ad0-ab63-479c-bd25-d42e54b90369\r\nINFO: Analyzed target //explorer:explorer (0 packages loaded, 0 targets configured).\r\nINFO: Found 1 target...\r\nTarget //explorer:explorer up-to-date:\r\n  bazel-bin/explorer/explorer\r\nINFO: Elapsed time: 0.141s, Critical Path: 0.00s\r\nINFO: 1 process: 1 internal.\r\nINFO: Build completed successfully, 1 total action\r\nINFO: Build completed successfully, 1 total action\r\n/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/optional:911: _LIBCPP_ASSERT 'this->has_value()' failed. optional operator* called on a disengaged value\r\nPlease report issues to https://github.com/carbon-language/carbon-lang/issues and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer /tmp/crash.carbon\r\n #0 0x0000559574d3267b backtrace /tmp/llvm-20220302-9880-1faggz0/llvm-project-13.0.1.src/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:4202:13\r\n #1 0x000055957504f9ab llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:565:13\r\n #2 0x000055957504fc4b PrintStackTraceSignalHandler(void*) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:632:1\r\n #3 0x000055957504a2a8 llvm::sys::RunSignalHandlers() /proc/self/cwd/external/llvm-project/llvm/lib/Support/Signals.cpp:98:18\r\n #4 0x00005595750511fe SignalHandler(int) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:407:1\r\n #5 0x00007f1abc97f200 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x12200)\r\n #6 0x00007f1abc6288a1 raise ./signal/../sysdeps/unix/sysv/linux/raise.c:50:1\r\n #7 0x00007f1abc612546 abort ./stdlib/abort.c:81:7\r\n #8 0x00005595751ca80f (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer+0x91180f)\r\n #9 0x0000559574dd7ff2 std::__1::optional<Carbon::Value const*>::operator*() const & /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/optional:911:9\r\n#10 0x0000559574dee94d static_type /proc/self/cwd/./explorer/ast/statement.h:341:54\r\n#11 0x0000559574dee94d operator() /proc/self/cwd/./explorer/ast/static_scope.h:89:45\r\n#12 0x0000559574dee94d decltype(static_cast<Carbon::Continuation>(fp)(static_cast<Carbon::AstNode const&>(fp0))) std::__1::__invoke<Carbon::ValueNodeView::ValueNodeView<Carbon::Continuation, void>(Carbon::Continuation const*)::'lambda1'(Carbon::AstNode const&)&, Carbon::AstNode const&>(Carbon::Continuation&&, Carbon::AstNode const&) /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/type_traits:3918:1\r\n#13 0x0000559574dee929 std::__1::__function::__alloc_func<Carbon::ValueNodeView::ValueNodeView<Carbon::Continuation, void>(Carbon::Continuation const*)::'lambda1'(Carbon::AstNode const&), std::__1::allocator<Carbon::ValueNodeView::ValueNodeView<Carbon::Continuation, void>(Carbon::Continuation const*)::'lambda1'(Carbon::AstNode const&)>, Carbon::Value const& (Carbon::AstNode const&)>::operator()(Carbon::AstNode const&) /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__functional/function.h:171:9\r\n#14 0x0000559574dee7ad std::__1::__function::__func<Carbon::ValueNodeView::ValueNodeView<Carbon::Continuation, void>(Carbon::Continuation const*)::'lambda1'(Carbon::AstNode const&), std::__1::allocator<Carbon::ValueNodeView::ValueNodeView<Carbon::Continuation, void>(Carbon::Continuation const*)::'lambda1'(Carbon::AstNode const&)>, Carbon::Value const& (Carbon::AstNode const&)>::operator()(Carbon::AstNode const&) /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__functional/function.h:345:5\r\n#15 0x0000559574e43da6 std::__1::__function::__value_func<Carbon::Value const& (Carbon::AstNode const&)>::operator()(Carbon::AstNode const&) const /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__functional/function.h:498:9\r\n#16 0x0000559574e18db2 Carbon::ValueNodeView::static_type() const /proc/self/cwd/./explorer/ast/static_scope.h:116:46\r\n#17 0x0000559574e095aa Carbon::TypeChecker::TypeCheckExp(Carbon::Expression*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:977:13\r\n#18 0x0000559574e24acd index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#19 0x0000559574e24acd index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#20 0x0000559574e24acd __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#21 0x0000559574e24acd holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#22 0x0000559574e24acd ok /proc/self/cwd/./common/error.h:61:36\r\n#23 0x0000559574e24acd Carbon::TypeChecker::TypeCheckStmt(Carbon::Statement*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:1663:7\r\n#24 0x0000559574e26195 Carbon::TypeChecker::TypeCheckStmt(Carbon::Statement*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:0:9\r\n#25 0x0000559574e26771 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#26 0x0000559574e26771 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#27 0x0000559574e26771 __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#28 0x0000559574e26771 holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#29 0x0000559574e26771 ok /proc/self/cwd/./common/error.h:61:36\r\n#30 0x0000559574e26771 Carbon::TypeChecker::TypeCheckStmt(Carbon::Statement*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:1657:7\r\n#31 0x0000559574e26195 Carbon::TypeChecker::TypeCheckStmt(Carbon::Statement*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:0:9\r\n#32 0x0000559574e311c0 Carbon::TypeChecker::TypeCheckFunctionDeclaration(Carbon::FunctionDeclaration*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:0:5\r\n#33 0x0000559574e3797a index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#34 0x0000559574e3797a index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#35 0x0000559574e3797a __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#36 0x0000559574e3797a holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#37 0x0000559574e3797a ok /proc/self/cwd/./common/error.h:61:36\r\n#38 0x0000559574e3797a Carbon::TypeChecker::TypeCheckDeclaration(Carbon::Declaration*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:2199:7\r\n#39 0x0000559574e420aa Carbon::TypeChecker::TypeCheck(Carbon::AST&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:0:5\r\n#40 0x0000559574dba05b ~__tree /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__tree:1791:11\r\n#41 0x0000559574dba05b ~set /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/set:619:5\r\n#42 0x0000559574dba05b ~TypeChecker /proc/self/cwd/./explorer/interpreter/type_checker.h:21:7\r\n#43 0x0000559574dba05b Carbon::ExecProgram(Carbon::Arena*, Carbon::AST, std::__1::optional<llvm::raw_ostream*>) /proc/self/cwd/explorer/interpreter/exec_program.cpp:46:3\r\n#44 0x0000559574dac7e0 ~AST /proc/self/cwd/./explorer/ast/ast.h:17:8\r\n#45 0x0000559574dac7e0 Carbon::Main(llvm::StringRef, int, char**) /proc/self/cwd/explorer/main.cpp:78:3\r\n#46 0x0000559574dab7ec index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#47 0x0000559574dab7ec index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#48 0x0000559574dab7ec __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#49 0x0000559574dab7ec holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#50 0x0000559574dab7ec ok /proc/self/cwd/./common/error.h:61:36\r\n#51 0x0000559574dab7ec Carbon::ExplorerMain(llvm::StringRef, int, char**) /proc/self/cwd/explorer/main.cpp:88:69\r\n#52 0x0000559574daac61 main /proc/self/cwd/explorer/main_bin.cpp:0:10\r\n#53 0x00007f1abc6137fd __libc_start_main ./csu/../csu/libc-start.c:332:16\r\n#54 0x0000559574cf9a5a _start (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer+0x440a5a)\r\n","closed":true,"closedAt":"2022-05-18T14:36:12Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc43yfVv","title":"Add continuation name to name resolution after processing continuation body","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Fixes #1263\r\n\r\nThis makes the continuation behave similar to this C++ lambda construct - `auto f = []() { f(); };` which doesn't compile. \r\n\r\nHowever, another option for the continuation in this example is to behave more like a recursive function.\r\nWhich option is correct?","url":"https://github.com/carbon-language/carbon-lang/pull/1264","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/7b18445dc9730d4f7b226dcdead18432eea220a6"},"id":"PURC_lADOD3caBc43yfVv2gAoN2IxODQ0NWRjOTczMGQ0ZjdiMjI2ZGNkZWFkMTg0MzJlZWEyMjBhNg","resourcePath":"/carbon-language/carbon-lang/pull/1264/commits/7b18445dc9730d4f7b226dcdead18432eea220a6"}}]},"createdAt":"2022-05-13T14:13:47Z","closed":true,"closedAt":"2022-05-18T14:36:13Z"}}]},"createdAt":"2022-05-13T14:04:11Z","labels":{"edges":[]},"author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"assignees":{"edges":[{"node":{"login":"pk19604014"}}]}}},{"node":{"id":"I_kwDOD3caBc5JfcU9","title":"explorer crashes on mismatched operator/operand types, like -true","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5DDjSK","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Looks like plain `-true` is diagnosed correctly as a type mismatch, but inside function type literal it's not.\r\n\r\npackage EmptyIdentifier impl;\r\n\r\nfn Main() -> i32 {\r\n  var f: auto = __Fn(-true) -> true;\r\n  return 0;\r\n}\r\n","createdAt":"2022-05-12T13:35:32Z"}},{"node":{"id":"IC_kwDOD3caBc5DDmXR","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Type checker code calls InterpExp on function parameter type without first validating the parameter with TypeCheckExp, and InterExp crashes because it assumes negation has an integer type operand and it's actually a Bool","createdAt":"2022-05-12T13:46:33Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1249","body":"```\r\n$ cat /tmp/testcase-6066848086228992.carbon\r\n// Generated by proto_to_carbon.\r\n\r\npackage EmptyIdentifier impl;\r\n\r\nfn EmptyIdentifier()\r\n{\r\nmatch (__Fn(-true) -> true) {}\r\n}\r\n\r\n\r\nfn Main() -> i32 {\r\n  return 0;\r\n}\r\n\r\n>bazel run explorer:explorer /tmp/testcase-6066848086228992.carbon\r\nINFO: Invocation ID: c889892b-eb50-4ba9-a09e-6bce23e8a736\r\nINFO: Analyzed target //explorer:explorer (26 packages loaded, 763 targets configured).\r\nINFO: Found 1 target...\r\nTarget //explorer:explorer up-to-date:\r\n  bazel-bin/explorer/explorer\r\nINFO: Elapsed time: 0.912s, Critical Path: 0.00s\r\nINFO: 1 process: 1 internal.\r\nINFO: Build completed successfully, 1 total action\r\nINFO: Build completed successfully, 1 total action\r\nexplorer: external/llvm-project/llvm/include/llvm/Support/Casting.h:262: typename cast_retty<X, Y>::ret_type llvm::cast(Y &) [X = Carbon::IntValue, Y = const Carbon::Value]: Assertion `isa<X>(Val) && \"cast<Ty>() argument of incompatible type!\"' failed.\r\nPlease report issues to https://github.com/carbon-language/carbon-lang/issues and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer /tmp/testcase-6066848086228992.carbon\r\n #0 0x00005619ecc09beb backtrace /tmp/llvm-20220302-9880-1faggz0/llvm-project-13.0.1.src/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:4202:13\r\n #1 0x00005619ecf2241b llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:565:13\r\n #2 0x00005619ecf226bb PrintStackTraceSignalHandler(void*) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:632:1\r\n #3 0x00005619ecf1cd18 llvm::sys::RunSignalHandlers() /proc/self/cwd/external/llvm-project/llvm/lib/Support/Signals.cpp:98:18\r\n #4 0x00005619ecf23c6e SignalHandler(int) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:407:1\r\n #5 0x00007f13fa97d200 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x12200)\r\n #6 0x00007f13fa6268a1 raise ./signal/../sysdeps/unix/sysv/linux/raise.c:50:1\r\n #7 0x00007f13fa610546 abort ./stdlib/abort.c:81:7\r\n #8 0x00007f13fa61042f get_sysdep_segment_value ./intl/loadmsgcat.c:509:8\r\n #9 0x00007f13fa61042f _nl_load_domain ./intl/loadmsgcat.c:970:34\r\n#10 0x00007f13fa61f222 (/lib/x86_64-linux-gnu/libc.so.6+0x31222)\r\n#11 0x00005619ecd4155f Carbon::Interpreter::EvalPrim(Carbon::Operator, std::__1::vector<Carbon::Value const*, std::__1::allocator<Carbon::Value const*> > const&, Carbon::SourceLocation) /proc/self/cwd/explorer/interpreter/interpreter.cpp:0:0\r\n#12 0x00005619ecd54fe2 Carbon::Interpreter::StepExp() /proc/self/cwd/explorer/interpreter/interpreter.cpp:834:9\r\n#13 0x00005619ecd671bd index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#14 0x00005619ecd671bd index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#15 0x00005619ecd671bd __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#16 0x00005619ecd671bd holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#17 0x00005619ecd671bd ok /proc/self/cwd/./common/error.h:61:36\r\n#18 0x00005619ecd671bd Carbon::Interpreter::Step() /proc/self/cwd/explorer/interpreter/interpreter.cpp:1312:7\r\n#19 0x00005619ecd67ed5 Carbon::Interpreter::RunAllSteps(std::__1::unique_ptr<Carbon::Action, std::__1::default_delete<Carbon::Action> >) /proc/self/cwd/explorer/interpreter/interpreter.cpp:0:5\r\n#20 0x00005619ecd6a6e0 ~unique_ptr /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__memory/unique_ptr.h:272:19\r\n#21 0x00005619ecd6a6e0 Carbon::InterpExp(Carbon::Expression const*, Carbon::Arena*, std::__1::optional<llvm::raw_ostream*>) /proc/self/cwd/explorer/interpreter/interpreter.cpp:1371:3\r\n#22 0x00005619eccdddd5 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#23 0x00005619eccdddd5 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#24 0x00005619eccdddd5 __holds_alternative<1UL, Carbon::Error, const Carbon::Value *> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#25 0x00005619eccdddd5 holds_alternative<const Carbon::Value *, Carbon::Error, const Carbon::Value *> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#26 0x00005619eccdddd5 ok /proc/self/cwd/./common/error.h:61:36\r\n#27 0x00005619eccdddd5 Carbon::TypeChecker::TypeCheckExp(Carbon::Expression*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:1143:7\r\n#28 0x00005619eccfa2d6 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#29 0x00005619eccfa2d6 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#30 0x00005619eccfa2d6 __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#31 0x00005619eccfa2d6 holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#32 0x00005619eccfa2d6 ok /proc/self/cwd/./common/error.h:61:36\r\n#33 0x00005619eccfa2d6 Carbon::TypeChecker::TypeCheckStmt(Carbon::Statement*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:1480:7\r\n#34 0x00005619eccfb555 Carbon::TypeChecker::TypeCheckStmt(Carbon::Statement*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:0:9\r\n#35 0x00005619ecd05960 Carbon::TypeChecker::TypeCheckFunctionDeclaration(Carbon::FunctionDeclaration*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:0:5\r\n#36 0x00005619ecd0c11a index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#37 0x00005619ecd0c11a index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#38 0x00005619ecd0c11a __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#39 0x00005619ecd0c11a holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#40 0x00005619ecd0c11a ok /proc/self/cwd/./common/error.h:61:36\r\n#41 0x00005619ecd0c11a Carbon::TypeChecker::TypeCheckDeclaration(Carbon::Declaration*, Carbon::ImplScope const&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:2102:7\r\n#42 0x00005619ecd167ca Carbon::TypeChecker::TypeCheck(Carbon::AST&) /proc/self/cwd/explorer/interpreter/type_checker.cpp:0:5\r\n#43 0x00005619ecc915cb ~__tree /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__tree:1791:11\r\n#44 0x00005619ecc915cb ~set /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/set:619:5\r\n#45 0x00005619ecc915cb ~TypeChecker /proc/self/cwd/./explorer/interpreter/type_checker.h:21:7\r\n#46 0x00005619ecc915cb Carbon::ExecProgram(Carbon::Arena*, Carbon::AST, std::__1::optional<llvm::raw_ostream*>) /proc/self/cwd/explorer/interpreter/exec_program.cpp:46:3\r\n#47 0x00005619ecc83d50 ~AST /proc/self/cwd/./explorer/ast/ast.h:17:8\r\n#48 0x00005619ecc83d50 Carbon::Main(llvm::StringRef, int, char**) /proc/self/cwd/explorer/main.cpp:78:3\r\n#49 0x00005619ecc82d5c index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#50 0x00005619ecc82d5c index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#51 0x00005619ecc82d5c __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#52 0x00005619ecc82d5c holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#53 0x00005619ecc82d5c ok /proc/self/cwd/./common/error.h:61:36\r\n#54 0x00005619ecc82d5c Carbon::ExplorerMain(llvm::StringRef, int, char**) /proc/self/cwd/explorer/main.cpp:88:69\r\n#55 0x00005619ecc821d1 main /proc/self/cwd/explorer/main_bin.cpp:0:10\r\n#56 0x00007f13fa6117fd __libc_start_main ./csu/../csu/libc-start.c:332:16\r\n#57 0x00005619ecbd0fca _start (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer+0x43cfca)\r\n```","closed":true,"closedAt":"2022-05-23T23:26:36Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc43uZOv","title":"Added TypeCheckTypeExp() and changed function type literal and similar type-checking logic to use the new function","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Fixes #1249","url":"https://github.com/carbon-language/carbon-lang/pull/1256","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/915377cb6db5458848f548cc95a138023617445d"},"id":"PURC_lADOD3caBc43uZOv2gAoOTE1Mzc3Y2I2ZGI1NDU4ODQ4ZjU0OGNjOTVhMTM4MDIzNjE3NDQ1ZA","resourcePath":"/carbon-language/carbon-lang/pull/1256/commits/915377cb6db5458848f548cc95a138023617445d"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/b02f6ffef2143906f91227a9285f7492b2efb652"},"id":"PURC_lADOD3caBc43uZOv2gAoYjAyZjZmZmVmMjE0MzkwNmY5MTIyN2E5Mjg1Zjc0OTJiMmVmYjY1Mg","resourcePath":"/carbon-language/carbon-lang/pull/1256/commits/b02f6ffef2143906f91227a9285f7492b2efb652"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/f6acec78c8f43cb58c20e8940602a411026ebdbe"},"id":"PURC_lADOD3caBc43uZOv2gAoZjZhY2VjNzhjOGY0M2NiNThjMjBlODk0MDYwMmE0MTEwMjZlYmRiZQ","resourcePath":"/carbon-language/carbon-lang/pull/1256/commits/f6acec78c8f43cb58c20e8940602a411026ebdbe"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/220404268d5ca3b930b6b626720938d4001434a7"},"id":"PURC_lADOD3caBc43uZOv2gAoMjIwNDA0MjY4ZDVjYTNiOTMwYjZiNjI2NzIwOTM4ZDQwMDE0MzRhNw","resourcePath":"/carbon-language/carbon-lang/pull/1256/commits/220404268d5ca3b930b6b626720938d4001434a7"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/bee3bc2efebcaa3e6bb5a749840beb0f574911fb"},"id":"PURC_lADOD3caBc43uZOv2gAoYmVlM2JjMmVmZWJjYWEzZTZiYjVhNzQ5ODQwYmViMGY1NzQ5MTFmYg","resourcePath":"/carbon-language/carbon-lang/pull/1256/commits/bee3bc2efebcaa3e6bb5a749840beb0f574911fb"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/51f418f3af17c6d336cf219849034dc0a0661753"},"id":"PURC_lADOD3caBc43uZOv2gAoNTFmNDE4ZjNhZjE3YzZkMzM2Y2YyMTk4NDkwMzRkYzBhMDY2MTc1Mw","resourcePath":"/carbon-language/carbon-lang/pull/1256/commits/51f418f3af17c6d336cf219849034dc0a0661753"}}]},"createdAt":"2022-05-12T14:27:02Z","closed":true,"closedAt":"2022-05-23T23:26:36Z"}}]},"createdAt":"2022-05-11T17:34:04Z","labels":{"edges":[]},"author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"assignees":{"edges":[{"node":{"login":"pk19604014"}}]}}},{"node":{"id":"I_kwDOD3caBc5KZMgD","title":"explorer crashes on a self-referencing alias","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/1294","body":"package EmptyIdentifier impl;\r\n\r\nalias EmptyIdentifier = EmptyIdentifier;\r\n\r\nfn Main() -> i32 {\r\n  return 0;\r\n}\r\n\r\n$ bazel run explorer:explorer /tmp/crash-0fc5455d46de5613953265f95efe5c28af31e46b.carbon 2>&1 | sed \"s,/proc/self/cwd,$(pwd),\"\r\nINFO: Invocation ID: 6bd7ed23-4983-4a79-850d-1fbc491e7309\r\nLoading: \r\nLoading: 0 packages loaded\r\nAnalyzing: target //explorer:explorer (0 packages loaded, 0 targets configured)\r\nINFO: Analyzed target //explorer:explorer (0 packages loaded, 0 targets configured).\r\nINFO: Found 1 target...\r\n[0 / 1] [Prepa] BazelWorkspaceStatusAction stable-status.txt\r\nTarget //explorer:explorer up-to-date:\r\n  bazel-bin/explorer/explorer\r\nINFO: Elapsed time: 0.113s, Critical Path: 0.00s\r\nINFO: 1 process: 1 internal.\r\nINFO: Build completed successfully, 1 total action\r\nINFO: Running command line: bazel-bin/explorer/explorer /tmp/crash-0fc5455d46de5613953265f95efe5c28af31e46b.carbon\r\nINFO: Build completed successfully, 1 total action\r\n/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/optional:911: _LIBCPP_ASSERT 'this->has_value()' failed. optional operator* called on a disengaged value\r\nPlease report issues to https://github.com/carbon-language/carbon-lang/issues and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer /tmp/crash-0fc5455d46de5613953265f95efe5c28af31e46b.carbon\r\n #0 0x0000562bc6cc945b backtrace /tmp/llvm-20220302-9880-1faggz0/llvm-project-13.0.1.src/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:4202:13\r\n #1 0x0000562bc700256b llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /usr/local/google/home/pk19604014/carbon/carbon-lang/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:565:13\r\n #2 0x0000562bc700280b PrintStackTraceSignalHandler(void*) /usr/local/google/home/pk19604014/carbon/carbon-lang/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:632:1\r\n #3 0x0000562bc6ffce68 llvm::sys::RunSignalHandlers() /usr/local/google/home/pk19604014/carbon/carbon-lang/external/llvm-project/llvm/lib/Support/Signals.cpp:98:18\r\n #4 0x0000562bc7003dbe SignalHandler(int) /usr/local/google/home/pk19604014/carbon/carbon-lang/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:407:1\r\n #5 0x00007f9262d16200 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x12200)\r\n #6 0x00007f92629bf8a1 raise ./signal/../sysdeps/unix/sysv/linux/raise.c:50:1\r\n #7 0x00007f92629a9546 abort ./stdlib/abort.c:81:7\r\n #8 0x0000562bc717d3cf (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer+0x9473cf)\r\n #9 0x0000562bc6d6fd22 std::__1::optional<Carbon::Value const*>::operator*() const & /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/optional:911:9\r\n#10 0x0000562bc6d7b31d static_type /usr/local/google/home/pk19604014/carbon/carbon-lang/./explorer/ast/declaration.h:57:54\r\n#11 0x0000562bc6d7b31d operator() /usr/local/google/home/pk19604014/carbon/carbon-lang/./explorer/ast/static_scope.h:89:45\r\n#12 0x0000562bc6d7b31d decltype(static_cast<Carbon::AliasDeclaration>(fp)(static_cast<Carbon::AstNode const&>(fp0))) std::__1::__invoke<Carbon::ValueNodeView::ValueNodeView<Carbon::AliasDeclaration, void>(Carbon::AliasDeclaration const*)::'lambda1'(Carbon::AstNode const&)&, Carbon::AstNode const&>(Carbon::AliasDeclaration&&, Carbon::AstNode const&) /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/type_traits:3918:1\r\n#13 0x0000562bc6d7b2f9 std::__1::__function::__alloc_func<Carbon::ValueNodeView::ValueNodeView<Carbon::AliasDeclaration, void>(Carbon::AliasDeclaration const*)::'lambda1'(Carbon::AstNode const&), std::__1::allocator<Carbon::ValueNodeView::ValueNodeView<Carbon::AliasDeclaration, void>(Carbon::AliasDeclaration const*)::'lambda1'(Carbon::AstNode const&)>, Carbon::Value const& (Carbon::AstNode const&)>::operator()(Carbon::AstNode const&) /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__functional/function.h:171:9\r\n#14 0x0000562bc6d7b17d std::__1::__function::__func<Carbon::ValueNodeView::ValueNodeView<Carbon::AliasDeclaration, void>(Carbon::AliasDeclaration const*)::'lambda1'(Carbon::AstNode const&), std::__1::allocator<Carbon::ValueNodeView::ValueNodeView<Carbon::AliasDeclaration, void>(Carbon::AliasDeclaration const*)::'lambda1'(Carbon::AstNode const&)>, Carbon::Value const& (Carbon::AstNode const&)>::operator()(Carbon::AstNode const&) /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__functional/function.h:345:5\r\n#15 0x0000562bc6deea56 std::__1::__function::__value_func<Carbon::Value const& (Carbon::AstNode const&)>::operator()(Carbon::AstNode const&) const /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__functional/function.h:498:9\r\n#16 0x0000562bc6dbd342 Carbon::ValueNodeView::static_type() const /usr/local/google/home/pk19604014/carbon/carbon-lang/./explorer/ast/static_scope.h:116:46\r\n#17 0x0000562bc6d9e471 Carbon::TypeChecker::TypeCheckExp(Carbon::Expression*, Carbon::ImplScope const&) /usr/local/google/home/pk19604014/carbon/carbon-lang/explorer/interpreter/type_checker.cpp:1426:13\r\n#18 0x0000562bc6de654a index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#19 0x0000562bc6de654a index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#20 0x0000562bc6de654a __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#21 0x0000562bc6de654a holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#22 0x0000562bc6de654a ok /usr/local/google/home/pk19604014/carbon/carbon-lang/./common/error.h:61:36\r\n#23 0x0000562bc6de654a Carbon::TypeChecker::DeclareAliasDeclaration(Carbon::AliasDeclaration*, Carbon::TypeChecker::ScopeInfo const&) /usr/local/google/home/pk19604014/carbon/carbon-lang/explorer/interpreter/type_checker.cpp:2643:3\r\n#24 0x0000562bc6dd9dd8 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#25 0x0000562bc6dd9dd8 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#26 0x0000562bc6dd9dd8 __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#27 0x0000562bc6dd9dd8 holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#28 0x0000562bc6dd9dd8 ok /usr/local/google/home/pk19604014/carbon/carbon-lang/./common/error.h:61:36\r\n#29 0x0000562bc6dd9dd8 Carbon::TypeChecker::DeclareDeclaration(Carbon::Declaration*, Carbon::TypeChecker::ScopeInfo const&) /usr/local/google/home/pk19604014/carbon/carbon-lang/explorer/interpreter/type_checker.cpp:2791:7\r\n#30 0x0000562bc6de79f5 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#31 0x0000562bc6de79f5 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#32 0x0000562bc6de79f5 __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#33 0x0000562bc6de79f5 holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#34 0x0000562bc6de79f5 ok /usr/local/google/home/pk19604014/carbon/carbon-lang/./common/error.h:61:36\r\n#35 0x0000562bc6de79f5 Carbon::TypeChecker::TypeCheck(Carbon::AST&) /usr/local/google/home/pk19604014/carbon/carbon-lang/explorer/interpreter/type_checker.cpp:2663:5\r\n#36 0x0000562bc6d50e85 ~__tree /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__tree:1791:11\r\n#37 0x0000562bc6d50e85 ~set /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/set:619:5\r\n#38 0x0000562bc6d50e85 ~TypeChecker /usr/local/google/home/pk19604014/carbon/carbon-lang/./explorer/interpreter/type_checker.h:22:7\r\n#39 0x0000562bc6d50e85 Carbon::ExecProgram(Carbon::Arena*, Carbon::AST, std::__1::optional<llvm::raw_ostream*>) /usr/local/google/home/pk19604014/carbon/carbon-lang/explorer/interpreter/exec_program.cpp:46:3\r\n#40 0x0000562bc6d435c0 ~AST /usr/local/google/home/pk19604014/carbon/carbon-lang/./explorer/ast/ast.h:17:8\r\n#41 0x0000562bc6d435c0 Carbon::Main(llvm::StringRef, int, char**) /usr/local/google/home/pk19604014/carbon/carbon-lang/explorer/main.cpp:78:3\r\n#42 0x0000562bc6d425cc index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#43 0x0000562bc6d425cc index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#44 0x0000562bc6d425cc __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#45 0x0000562bc6d425cc holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#46 0x0000562bc6d425cc ok /usr/local/google/home/pk19604014/carbon/carbon-lang/./common/error.h:61:36\r\n#47 0x0000562bc6d425cc Carbon::ExplorerMain(llvm::StringRef, int, char**) /usr/local/google/home/pk19604014/carbon/carbon-lang/explorer/main.cpp:88:69\r\n#48 0x0000562bc6d41a41 main /usr/local/google/home/pk19604014/carbon/carbon-lang/explorer/main_bin.cpp:0:10\r\n#49 0x00007f92629aa7fd __libc_start_main ./csu/../csu/libc-start.c:332:16\r\n#50 0x0000562bc6c9083a _start (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer+0x45a83a)\r\n\r\n","closed":true,"closedAt":"2022-06-02T19:47:41Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc44codO","title":"Add alias name to name resolution after processing the target to avoid self-referencing name crash","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Fixes #1294","url":"https://github.com/carbon-language/carbon-lang/pull/1295","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/7327e511b1d3d4ee36a85336bf4dbe7a480063b8"},"id":"PURC_lADOD3caBc44codO2gAoNzMyN2U1MTFiMWQzZDRlZTM2YTg1MzM2YmY0ZGJlN2E0ODAwNjNiOA","resourcePath":"/carbon-language/carbon-lang/pull/1295/commits/7327e511b1d3d4ee36a85336bf4dbe7a480063b8"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/e96fe805c1ab225eff820e2605411ba96023038e"},"id":"PURC_lADOD3caBc44codO2gAoZTk2ZmU4MDVjMWFiMjI1ZWZmODIwZTI2MDU0MTFiYTk2MDIzMDM4ZQ","resourcePath":"/carbon-language/carbon-lang/pull/1295/commits/e96fe805c1ab225eff820e2605411ba96023038e"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/1c86db502ef933f13a7bfbb78df40d3725484315"},"id":"PURC_lADOD3caBc44codO2gAoMWM4NmRiNTAyZWY5MzNmMTNhN2JmYmI3OGRmNDBkMzcyNTQ4NDMxNQ","resourcePath":"/carbon-language/carbon-lang/pull/1295/commits/1c86db502ef933f13a7bfbb78df40d3725484315"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/f272838ca198015fd9a79358efb4d3b7c086bf0c"},"id":"PURC_lADOD3caBc44codO2gAoZjI3MjgzOGNhMTk4MDE1ZmQ5YTc5MzU4ZWZiNGQzYjdjMDg2YmYwYw","resourcePath":"/carbon-language/carbon-lang/pull/1295/commits/f272838ca198015fd9a79358efb4d3b7c086bf0c"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/a3fc66ad25711220b9e2aaae85c5fb28bf8ae4cf"},"id":"PURC_lADOD3caBc44codO2gAoYTNmYzY2YWQyNTcxMTIyMGI5ZTJhYWFlODVjNWZiMjhiZjhhZTRjZg","resourcePath":"/carbon-language/carbon-lang/pull/1295/commits/a3fc66ad25711220b9e2aaae85c5fb28bf8ae4cf"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/b649848219af6f2d26213beb1d4010c0414bc24f"},"id":"PURC_lADOD3caBc44codO2gAoYjY0OTg0ODIxOWFmNmYyZDI2MjEzYmViMWQ0MDEwYzA0MTRiYzI0Zg","resourcePath":"/carbon-language/carbon-lang/pull/1295/commits/b649848219af6f2d26213beb1d4010c0414bc24f"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/e9a1c7bb2a636b5c1f149f2157fd47840a6c5940"},"id":"PURC_lADOD3caBc44codO2gAoZTlhMWM3YmIyYTYzNmI1YzFmMTQ5ZjIxNTdmZDQ3ODQwYTZjNTk0MA","resourcePath":"/carbon-language/carbon-lang/pull/1295/commits/e9a1c7bb2a636b5c1f149f2157fd47840a6c5940"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/54180db1735e51d352d597bece4a46d9533631a8"},"id":"PURC_lADOD3caBc44codO2gAoNTQxODBkYjE3MzVlNTFkMzUyZDU5N2JlY2U0YTQ2ZDk1MzM2MzFhOA","resourcePath":"/carbon-language/carbon-lang/pull/1295/commits/54180db1735e51d352d597bece4a46d9533631a8"}}]},"createdAt":"2022-05-25T13:49:20Z","closed":true,"closedAt":"2022-06-02T19:47:41Z"}}]},"createdAt":"2022-05-25T13:42:03Z","labels":{"edges":[]},"author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5F15SA","title":"Code snippet followups for README.md","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5E5adY","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2022-06-15T02:16:25Z"}},{"node":{"id":"IC_kwDOD3caBc5E8ejy","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Closing this -- we've been iterating on the README, the old issues don't still stand.","createdAt":"2022-06-15T16:46:05Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1140","body":"There were comments on #1075 from @jonmeow and @josh11b that remained under discussion, and related to ongoing design discussions. \r\n\r\nFor `QuickSort(s.Sub(0, p - 1));` [link](https://github.com/carbon-language/carbon-lang/blob/742cef67313e3cfc65d41d4d4d9c42d7cf914a01/docs/images/snippets.md?plain=1#L30)\r\nComment: \"I think this should probably be something like `s.Slice` or `s.SubSpan` rather than than `s.Sub` -- `Sub` could be an abbreviation of `Substitute`, and `Slice` is a common short term for the operation. (assuming you don't want to write `s[0..p-1]` and claim that'd work)\"\r\n\r\nFor `import Console`: [link](https://github.com/carbon-language/carbon-lang/blob/742cef67313e3cfc65d41d4d4d9c42d7cf914a01/docs/images/snippets.md?plain=1#L56) \r\nComment: \"Wouldn't this be more like:\r\n`import Carbon library \"Console\"`;\r\nAnd:\r\n`Carbon.Print`\"\r\n\r\nFor `console.Print()` [link](https://github.com/carbon-language/carbon-lang/blob/742cef67313e3cfc65d41d4d4d9c42d7cf914a01/docs/images/snippets.md?plain=1#L62)\r\nComment: \"Maybe presume the existence of a `PrintLine` that appends the `\\n` for users?\"\r\n\r\nFor `import Cpp <vector>` [link](https://github.com/carbon-language/carbon-lang/blob/742cef67313e3cfc65d41d4d4d9c42d7cf914a01/docs/images/snippets.md?plain=1#L72):\r\nComment: Maybe `import Cpp library \"<vector>\"` or something like that? Or are you expecting dedicated import syntax specifically for C++ as well as the special-case use of `<>` tokens?\r\n\r\nNote: Suggest submitting PR against snippets.md, and then I can update the .svgs afterwards.","closed":true,"closedAt":"2022-06-15T16:46:05Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-03-17T01:09:35Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}}]},"author":{"login":"wolffg","url":"https://github.com/wolffg"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5J1bFo","title":"explorer crashes on the 'match ... case auto {}' construct ","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5DvKZA","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Now getting this error when running on trunk:\r\n\r\nCOMPILATION ERROR: /tmp/crash.carbon:6: type error in `match` expression: 'choice Ch' is not implicitly convertible to 'Type'\r\n","createdAt":"2022-05-24T21:11:49Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1271","body":"```\r\n$ cat /tmp/crash.carbon \r\npackage P api;\r\n\r\nchoice Ch { Alt() }\r\n\r\nfn Main() -> i32 {\r\n  match (Ch.Alt()) { case auto => { return 1; } }\r\n  return 0;\r\n}\r\n\r\n$ bazel run --config=proto-fuzzer explorer:explorer /tmp/crash.carbon\r\nINFO: Invocation ID: b0a75d0e-1ab7-4702-b8ae-c3ec41c5de93\r\nINFO: Analyzed target //explorer:explorer (0 packages loaded, 0 targets configured).\r\nINFO: Found 1 target...\r\nTarget //explorer:explorer up-to-date:\r\n  bazel-bin/explorer/explorer\r\nINFO: Elapsed time: 0.110s, Critical Path: 0.00s\r\nINFO: 1 process: 1 internal.\r\nINFO: Build completed successfully, 1 total action\r\nINFO: Build completed successfully, 1 total action\r\nPlease report issues to https://github.com/carbon-language/carbon-lang/issues and include the crash backtrace.\r\nStack dump:\r\n0.\tProgram arguments: /usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer /tmp/crash.carbon\r\n #0 0x00005627c3635f3b backtrace /tmp/llvm-20220302-9880-1faggz0/llvm-project-13.0.1.src/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:4202:13\r\n #1 0x00005627c3927ddb llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:565:13\r\n #2 0x00005627c392807b PrintStackTraceSignalHandler(void*) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:632:1\r\n #3 0x00005627c3922ab8 llvm::sys::RunSignalHandlers() /proc/self/cwd/external/llvm-project/llvm/lib/Support/Signals.cpp:98:18\r\n #4 0x00005627c392962e SignalHandler(int) /proc/self/cwd/external/llvm-project/llvm/lib/Support/Unix/Signals.inc:407:1\r\n #5 0x00007f49dffe9200 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x12200)\r\n #6 0x00005627c377286a kind /proc/self/cwd/./explorer/interpreter/value.h:97:38\r\n #7 0x00005627c377286a Carbon::PatternMatch(Carbon::Value const*, Carbon::Value const*, Carbon::SourceLocation, std::__1::optional<Carbon::RuntimeScope*>, std::__1::map<Carbon::GenericBinding const*, Carbon::Value const*, std::__1::less<Carbon::GenericBinding const*>, std::__1::allocator<std::__1::pair<Carbon::GenericBinding const* const, Carbon::Value const*> > >&, std::__1::optional<llvm::raw_ostream*>) /proc/self/cwd/explorer/interpreter/interpreter.cpp:217:14\r\n #8 0x00005627c379204d Carbon::Interpreter::StepStmt() /proc/self/cwd/explorer/interpreter/interpreter.cpp:1166:13\r\n #9 0x00005627c3797e77 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#10 0x00005627c3797e77 index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#11 0x00005627c3797e77 __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#12 0x00005627c3797e77 holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#13 0x00005627c3797e77 ok /proc/self/cwd/./common/error.h:61:36\r\n#14 0x00005627c3797e77 Carbon::Interpreter::Step() /proc/self/cwd/explorer/interpreter/interpreter.cpp:1410:7\r\n#15 0x00005627c3798d28 Carbon::Interpreter::RunAllSteps(std::__1::unique_ptr<Carbon::Action, std::__1::default_delete<Carbon::Action> >) /proc/self/cwd/explorer/interpreter/interpreter.cpp:0:5\r\n#16 0x00005627c3799955 ~unique_ptr /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__memory/unique_ptr.h:272:19\r\n#17 0x00005627c3799955 Carbon::InterpProgram(Carbon::AST const&, Carbon::Arena*, std::__1::optional<llvm::raw_ostream*>) /proc/self/cwd/explorer/interpreter/interpreter.cpp:1453:3\r\n#18 0x00005627c36ba063 Carbon::ExecProgram(Carbon::Arena*, Carbon::AST, std::__1::optional<llvm::raw_ostream*>) /proc/self/cwd/explorer/interpreter/exec_program.cpp:0:10\r\n#19 0x00005627c36b0215 Carbon::Main(llvm::StringRef, int, char**) /proc/self/cwd/explorer/main.cpp:78:3\r\n#20 0x00005627c36af0dc index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:788:12\r\n#21 0x00005627c36af0dc index /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1438:59\r\n#22 0x00005627c36af0dc __holds_alternative<1UL, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1464:14\r\n#23 0x00005627c36af0dc holds_alternative<Carbon::Success, Carbon::Error, Carbon::Success> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/variant:1470:10\r\n#24 0x00005627c36af0dc ok /proc/self/cwd/./common/error.h:61:36\r\n#25 0x00005627c36af0dc Carbon::ExplorerMain(llvm::StringRef, int, char**) /proc/self/cwd/explorer/main.cpp:88:69\r\n#26 0x00005627c36ae5a5 main /proc/self/cwd/explorer/main_bin.cpp:0:10\r\n#27 0x00007f49dfc7d7fd __libc_start_main ./csu/../csu/libc-start.c:332:16\r\n#28 0x00005627c35fd31a _start (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer+0x3cf31a)\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==707017==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x5627c377286a bp 0x7fff049f4520 sp 0x7fff049f4080 T0)\r\n==707017==The signal is caused by a READ memory access.\r\n==707017==Hint: this fault was caused by a dereference of a high value address (see register values below).  Disassemble the provided pc to learn which register was used.\r\n    #0 0x5627c377286a in kind /proc/self/cwd/./explorer/interpreter/value.h:97:38\r\n    #1 0x5627c377286a in Carbon::PatternMatch(Carbon::Value const*, Carbon::Value const*, Carbon::SourceLocation, std::__1::optional<Carbon::RuntimeScope*>, std::__1::map<Carbon::GenericBinding const*, Carbon::Value const*, std::__1::less<Carbon::GenericBinding const*>, std::__1::allocator<std::__1::pair<Carbon::GenericBinding const* const, Carbon::Value const*> > >&, std::__1::optional<llvm::raw_ostream*>) /proc/self/cwd/explorer/interpreter/interpreter.cpp:217:14\r\n    #2 0x5627c379204c in Carbon::Interpreter::StepStmt() /proc/self/cwd/explorer/interpreter/interpreter.cpp:1166:13\r\n    #3 0x5627c3797e76 in Carbon::Interpreter::Step() /proc/self/cwd/explorer/interpreter/interpreter.cpp:1410:7\r\n    #4 0x5627c3798d27 in Carbon::Interpreter::RunAllSteps(std::__1::unique_ptr<Carbon::Action, std::__1::default_delete<Carbon::Action> >) /proc/self/cwd/explorer/interpreter/interpreter.cpp:1428:5\r\n    #5 0x5627c3799954 in Carbon::InterpProgram(Carbon::AST const&, Carbon::Arena*, std::__1::optional<llvm::raw_ostream*>) /proc/self/cwd/explorer/interpreter/interpreter.cpp:1453:3\r\n    #6 0x5627c36ba062 in Carbon::ExecProgram(Carbon::Arena*, Carbon::AST, std::__1::optional<llvm::raw_ostream*>) /proc/self/cwd/explorer/interpreter/exec_program.cpp:55:10\r\n    #7 0x5627c36b0214 in Carbon::Main(llvm::StringRef, int, char**) /proc/self/cwd/explorer/main.cpp:78:3\r\n    #8 0x5627c36af0db in Carbon::ExplorerMain(llvm::StringRef, int, char**) /proc/self/cwd/explorer/main.cpp:88:21\r\n    #9 0x5627c36ae5a4 in main /proc/self/cwd/explorer/main_bin.cpp:29:10\r\n    #10 0x7f49dfc7d7fc in __libc_start_main csu/../csu/libc-start.c:332:16\r\n    #11 0x5627c35fd319 in _start (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/explorer/explorer+0x3cf319)\r\n\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV /proc/self/cwd/./explorer/interpreter/value.h:97:38 in kind\r\n==707017==ABORTING\r\n```\r\n","closed":true,"closedAt":"2022-06-13T15:45:24Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-05-17T14:36:00Z","labels":{"edges":[]},"author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"assignees":{"edges":[{"node":{"login":"pk19604014"}}]}}},{"node":{"id":"I_kwDOD3caBc5HNCIK","title":"clang crash when running bazel test --config=fuzzer","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5EBEMD","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"bazel's [`per_file_copt`](https://docs.bazel.build/versions/main/user-manual.html#flag--per_file_copt) can be used to exclude llvm/ sources from fuzzing as a workaround:\r\n\r\n```\r\nbazel test --config=fuzzer --per_file_copt=-llvm/.*@-fno-sanitize=fuzzer --test_output=all toolchain/driver:driver_fuzzer\r\n```","createdAt":"2022-05-30T13:00:23Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1173","body":"For example, `bazel test --config=fuzzer --test_output=all //common:check_test` results in the following output.\r\n\r\n...\r\n1.      <eof> parser at end of file\r\n2.      Code generation\r\n3.      Running pass 'Function Pass Manager' on module 'external/llvm-project/llvm/lib/Support/ARMAttributeParser.cpp'.\r\n4.      Running pass 'Live Variable Analysis' on function '@_ZN4llvm18ARMAttributeParser7handlerEmRb'\r\n #0 0x00007f2e49748952 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libLLVM-13.so+0xd65952)\r\n #1 0x00007f2e497466b4 llvm::sys::RunSignalHandlers() (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libLLVM-13.so+0xd636b4)\r\n #2 0x00007f2e496820c8 CrashRecoverySignalHandler(int) CrashRecoveryContext.cpp:0:0\r\n #3 0x00007f2e52d94200 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x13200)\r\n #4 0x00007f2e49a366a4 llvm::LiveVariables::HandleVirtRegUse(llvm::Register, llvm::MachineBasicBlock*, llvm::MachineInstr&) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libLLVM-13.so+0x10536a4)\r\n #5 0x00007f2e49a36b8a llvm::LiveVariables::runOnInstr(llvm::MachineInstr&, llvm::SmallVectorImpl<unsigned int>&) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libLLVM-13.so+0x1053b8a)\r\n #6 0x00007f2e49a3704b llvm::LiveVariables::runOnBlock(llvm::MachineBasicBlock*, unsigned int) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libLLVM-13.so+0x105404b)\r\n #7 0x00007f2e49a37c53 llvm::LiveVariables::runOnMachineFunction(llvm::MachineFunction&) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libLLVM-13.so+0x1054c53)\r\n #8 0x00007f2e49aa5fc8 llvm::MachineFunctionPass::runOnFunction(llvm::Function&) (.part.0) MachineFunctionPass.cpp:0:0\r\n #9 0x00007f2e4986f303 llvm::FPPassManager::runOnFunction(llvm::Function&) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libLLVM-13.so+0xe8c303)\r\n#10 0x00007f2e4986f4f3 llvm::FPPassManager::runOnModule(llvm::Module&) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libLLVM-13.so+0xe8c4f3)\r\n#11 0x00007f2e4986fc34 llvm::legacy::PassManagerImpl::run(llvm::Module&) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libLLVM-13.so+0xe8cc34)\r\n#12 0x00007f2e50e2d484 (anonymous namespace)::EmitAssemblyHelper::EmitAssemblyWithNewPassManager(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream> >) BackendUtil.cpp:0:0\r\n#13 0x00007f2e50e31605 clang::EmitBackendOutput(clang::DiagnosticsEngine&, clang::HeaderSearchOptions const&, clang::CodeGenOptions const&, clang::TargetOptions const&, clang::LangOptions const&, llvm::StringRef, llvm::Module*, clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream> >) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libclang-cpp.so.13+0x1b47605)\r\n#14 0x00007f2e5117a5f3 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libclang-cpp.so.13+0x1e905f3)\r\n#15 0x00007f2e4ffe2355 clang::ParseAST(clang::Sema&, bool, bool) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libclang-cpp.so.13+0xcf8355)\r\n#16 0x00007f2e517fa7b9 clang::FrontendAction::Execute() (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libclang-cpp.so.13+0x25107b9)\r\n#17 0x00007f2e5179714f clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libclang-cpp.so.13+0x24ad14f)\r\n#18 0x00007f2e51867464 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libclang-cpp.so.13+0x257d464)\r\n#19 0x0000000000417bb6 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/clang+++0x417bb6)\r\n#20 0x0000000000415b54 ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&) driver.cpp:0:0\r\n#21 0x00007f2e514b4ef5 void llvm::function_ref<void ()>::callback_fn<clang::driver::CC1Command::Execute(llvm::ArrayRef<llvm::Optional<llvm::StringRef> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, bool*) const::'lambda'()>(long) Job.cpp:0:0\r\n#22 0x00007f2e496821c3 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libLLVM-13.so+0xc9f1c3)\r\n#23 0x00007f2e514b6890 clang::driver::CC1Command::Execute(llvm::ArrayRef<llvm::Optional<llvm::StringRef> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, bool*) const (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libclang-cpp.so.13+0x21cc890)\r\n#24 0x00007f2e5148a347 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&) const (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libclang-cpp.so.13+0x21a0347)\r\n#25 0x00007f2e5148aadd clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*> >&) const (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libclang-cpp.so.13+0x21a0add)\r\n#26 0x00007f2e51497a89 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*> >&) (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../lib/libclang-cpp.so.13+0x21ada89)\r\n#27 0x0000000000412cc3 main (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/clang+++0x412cc3)\r\n#28 0x00007f2e484697fd __libc_start_main ./csu/../csu/libc-start.c:332:16\r\n#29 0x0000000000414349 _start (/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/clang+++0x414349)\r\nclang++: error: clang frontend command failed with exit code 139 (use -v to see invocation)\r\nHomebrew clang version 13.0.1\r\nTarget: x86_64-unknown-linux-gnu\r\nThread model: posix\r\nInstalledDir: /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin\r\nclang++: note: diagnostic msg: \r\n********************\r\n\r\nPLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:\r\nPreprocessed source(s) and associated run script(s) are located at:\r\nclang++: note: diagnostic msg: /tmp/ARMAttributeParser-051ed2.cpp\r\nclang++: note: diagnostic msg: /tmp/ARMAttributeParser-051ed2.sh\r\nclang++: note: diagnostic msg: \r\n\r\n********************\r\nTarget //common:check_test failed to build\r\n","closed":true,"closedAt":"2022-06-21T15:41:59Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc46AHvC","title":"Workaround LLVM compiler bug when fuzzing.","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Fixes #1173\r\n\r\nThere is a long standing crash in the LLVM code generator that we manage\r\nto hit when fuzzing. Disable the fast instruction selector in the\r\nfuzzing config to avoid it. I reduced a test case and filed the LLVM bug\r\nhere: https://github.com/llvm/llvm-project/issues/56133","url":"https://github.com/carbon-language/carbon-lang/pull/1340","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/0ee4e0328a677516b4749d7caedaa393770b57e8"},"id":"PURC_lADOD3caBc46AHvC2gAoMGVlNGUwMzI4YTY3NzUxNmI0NzQ5ZDdjYWVkYWEzOTM3NzBiNTdlOA","resourcePath":"/carbon-language/carbon-lang/pull/1340/commits/0ee4e0328a677516b4749d7caedaa393770b57e8"}}]},"createdAt":"2022-06-21T05:24:01Z","closed":true,"closedAt":"2022-06-21T15:41:59Z"}}]},"createdAt":"2022-04-06T13:13:18Z","labels":{"edges":[]},"author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5MBOtw","title":"Current CARBON_CHECK() implementation is 'invisible' to fuzzers","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5FN_ye","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Thanks for the more full write-up here.\r\n\r\nFor me, the key thing is that there is particular utility to using `std::abort()` -- the debugger integration. I think that's definitely useful.\r\n\r\nFrom reading the signal handler, that makes me realize we were also leaking files potentially.\r\n\r\nWhat do you think about a slightly alternative fix I've coded up in #1341 ? I think this both switches us back to `std::abort()` while preserving the original goal of printing the stack trace early.","createdAt":"2022-06-21T05:54:55Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1338","body":"PR #1216 \"Move CHECK stack traces to be before the message\" changed\r\n`ExitingStream::operator|` to use `_exit(1)` instead of `std::abort()` with the\r\ngoal of making the crash output easier to debug by printing the custom crash\r\nmessage after the stack trace.\r\n\r\nThe problem for fuzzers is that `exit_()` causes immediate program termination\r\nwithout running static object destructors or `atexit` handlers, essentially\r\nmaking `CARBON_CHECK` failures 'invisible' -- the fuzzing logic is not able to\r\nsave a crashing input for future inspection.\r\n\r\nWith PR #1216, the crashing output looks like this:\r\n\r\n```\r\n$ bazel run explorer:explorer -- /tmp/crash.carbon\r\nStack trace:\r\n<stack trace lines>\r\nCHECK failure at explorer/ast/static_scope.cpp:30: x0 not found\r\n```\r\n\r\nBefore PR #1216, the output (generated by llvm error handling logic) looked like\r\nthis:\r\n\r\n```\r\n$ bazel run explorer:explorer -- /tmp/crash.carbon\r\nCHECK failure at explorer/ast/static_scope.cpp:30: x0 not found\r\nPlease report issues to https://github.com/carbon-language/carbon-lang/issues and include the crash backtrace.\r\nStack dump:\r\n<stack trace lines>\r\n```\r\n\r\n### Fix option 1 -- conditional `std::abort()`\r\n\r\n`ExitingStream::operator|` code could use a macro to call `abort()` only in\r\n'fuzzing' mode. `FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION` is recommended in\r\nlibFuzzer [doc](https://llvm.org/docs/LibFuzzer.html#fuzzer-friendly-build-mode):\r\n\r\n```\r\n#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION\r\n    std::abort();\r\n#else\r\n    _exit(1);\r\n#endif\r\n```\r\n\r\nThis fix is simple, but not ideal given the use of a preprocessor macro.\r\n\r\n### Fix option 2 -- use `std::quick_exit()`\r\n\r\n[`quick_exit`](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2440.htm)\r\nsits in-between 'full' `exit` which calls static destructors and `atexit`\r\nhandlers and `_exit` which calls nothing -- `quick_exit` call `at_quick_exit`\r\nhandlers but doesn't call static destructors.\r\n\r\n[`FuzzerDriver.cpp`](https://github.com/llvm/llvm-project/blob/main/compiler-rt/lib/fuzzer/FuzzerDriver.cpp)\r\ncurrently installs an `atexit` handler and would need changes to work with\r\n`quick_exit()` (likely need to support both `exit` and `quick_exit`, to not\r\nbreak existing code relying on current behavior). Furthermore, Carbon uses a\r\npre-built libFuzzer library from `brew`, and there is no `bazel` build support\r\nfor [llvm fuzzer code](https://github.com/llvm/llvm-project/search?q=filename%3ABUILD.bazel+fuzz) at the moment, so any fixes in libFuzzer code will have a long turnaround time.\r\n\r\nAnother problem to solve with this approach is that `quick_exit` is missing from\r\nthe standard library on Mac ([llvm test](https://github.com/llvm/llvm-project/blob/main/libcxx/test/std/language.support/support.start.term/quick_exit.pass.cpp), [Carbon build failure](https://github.com/carbon-language/carbon-lang/runs/6834211156?check_suite_focus=true)).\r\nThus a different Mac-specific workaround is required.\r\n\r\nLastly, libFuzzer [doc](https://llvm.org/docs/LibFuzzer.html#fuzz-target) suggests that a fuzz target \"...must not exit() on any input.\"\r\n\r\n### Fix option 3 -- switch back to `std::abort()`\r\n\r\nThis would essentially mean going to pre-PR #1216 state.\r\n\r\nThe downside is that crash message will be a bit harder to locate with long\r\nstack trace printed after the message.\r\n\r\nThe upsides, in addition to solving the fuzzer visibility issue, include\r\nprinting the standard Carbon \"Please report issues to\r\nhttps://github.com/carbon-language/carbon-lang/issues\" banner in the output\r\nwhich might be useful for external users, and also slightly better experience\r\nwhen using a debugger: `lldb` is able to automatically break on a call to\r\n`std::abort` for immediate interactive debugging, while with the `_exit` call,\r\nthe debugger reports that the program exited, and one has to figure out what's\r\ngoing on and set a manual breakpoint (`break _exit`) and then rerun.\r\n","closed":true,"closedAt":"2022-06-25T06:51:30Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc46ALu_","title":"Switch back to `std::abort()` in `CARBON_CHECK`.","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"This is a variation on #1339 and also fixes #1338.\r\n\r\nThe important difference from #1339 is that this works to retain the\r\nbenefits of #1216 which seem important -- both the clarity of printing\r\nthe message last and the correctness of actually showing the correct\r\nline number in the backtrace.\r\n\r\nThe approach in this patch is to disable LLVM's error handling just\r\nbefore using `std::abort()`. This should give us roughly the best of\r\nboth worlds.\r\n\r\nThis PR also fixes an issue where we wouldn't run the file-cleanup\r\nactions that the LLVM `std::abort()` handler does. This almost certainly\r\ndoesn't yet matter, but likely would in the future.\r\n\r\nWe should separately consider adding back information about filing bugs\r\nthat roughly corresponds to the error message that LLVM itself prints.\r\nI've not tried to replicate that from #1339 here and just focused on\r\ngetting to `std::abort()` while preserving the desired order of messages\r\nand stack trace locations.","url":"https://github.com/carbon-language/carbon-lang/pull/1341","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/96f6859075a2da677b732dd5e90804a07ad85fec"},"id":"PURC_lADOD3caBc46ALu_2gAoOTZmNjg1OTA3NWEyZGE2NzdiNzMyZGQ1ZTkwODA0YTA3YWQ4NWZlYw","resourcePath":"/carbon-language/carbon-lang/pull/1341/commits/96f6859075a2da677b732dd5e90804a07ad85fec"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/e748bd29c293031fcbddd0317548f16b208e621d"},"id":"PURC_lADOD3caBc46ALu_2gAoZTc0OGJkMjljMjkzMDMxZmNiZGRkMDMxNzU0OGYxNmIyMDhlNjIxZA","resourcePath":"/carbon-language/carbon-lang/pull/1341/commits/e748bd29c293031fcbddd0317548f16b208e621d"}}]},"createdAt":"2022-06-21T05:54:03Z","closed":true,"closedAt":"2022-06-25T06:51:30Z"}}]},"createdAt":"2022-06-17T19:33:34Z","labels":{"edges":[]},"author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"assignees":{"edges":[{"node":{"login":"pk19604014"}}]}}},{"node":{"id":"I_kwDOD3caBc5IUkkU","title":"executable_semantics_fuzzer crashes when build in fastbuild and dbg (but not opt, and not with -U_LIBCPP_DEBUG)","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5CFs8U","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"@pk19604014 Does this duplicate #1173?","createdAt":"2022-04-25T16:31:00Z"}},{"node":{"id":"IC_kwDOD3caBc5CFzz9","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"> @pk19604014 Does this duplicate #1173?\r\n\r\nNo, `bazel test --config=fuzzer --copt -U_LIBCPP_DEBUG --test_output=all //common:check_test` still results in a 'exit code 139' crash from 1173","createdAt":"2022-04-25T17:01:22Z"}},{"node":{"id":"IC_kwDOD3caBc5FOCAN","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"I agree with the theory that this is all caused by the fuzzer library not using the same ABI as we are using.\r\n\r\nAs a suggestion on how to improve this:\r\n\r\n1) Create a BUILD file for compiler-rt to build the fuzzer as a `cc_library` that can be linked into a test similar to linking with `-fsanitize=fuzzer`.\r\n2) Submit a patch to upstream LLVM to add this to llvm-project/utils/bazel/llvm-project-overlay/compiler-rt/BUILD -- we can land it locally in our third_party if you want, but would be good to get this moving upstream.\r\n3) Change the Bazel `fuzzer` config to use `-fsanitize=fuzzer-no-link`. This will also make it much easier to test that config by not interfering with linking other binaries.\r\n4) Change the various fuzz test rules to add a dependency on the above `cc_library` to get libFuzzer rather than using link time commands.\r\n\r\nIn (1) above, you can optionally tweak the rule to disable local instrumentation with the fuzzer, but it shouldn't be important.\r\n\r\nWith that, we should have a much more durable fuzzer library implementation that correctly follows *any* standard library changes we make.","createdAt":"2022-06-21T06:09:40Z"}},{"node":{"id":"IC_kwDOD3caBc5F1IaD","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Started investigating to determine the scope of changes required to build compiler-rt with bazel.\r\n\r\ncompiler-rt has dependencies on libcxxabi, which has dependencies on libcxx, neither of these have BUILD.bazel files in https://github.com/llvm/llvm-project/tree/main/utils/bazel/llvm-project-overlay\r\n","createdAt":"2022-06-30T18:44:10Z"}},{"node":{"id":"IC_kwDOD3caBc5F1MUy","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"will try to create a simple fuzzer_lib target next","createdAt":"2022-06-30T19:02:33Z"}},{"node":{"id":"IC_kwDOD3caBc5F1RG0","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"```\r\n$cat bazel-execroot/external/llvm-project/compiler-rt/BUILD.bazel\r\npackage(\r\n    default_visibility = [\"//visibility:public\"],\r\n    licenses = [\"notice\"],\r\n)\r\n\r\ncc_library(\r\n    name = \"Fuzzer\",\r\n    srcs = glob(\r\n        [\"lib/fuzzer/Fuzzer*.cpp\"],\r\n        # exclude = [\"lib/fuzzer/FuzzerMain.cpp\"],\r\n    ),\r\n    hdrs = glob([\r\n        \"lib/fuzzer/Fuzzer*.h\",\r\n        \"lib/fuzzer/Fuzzer*.def\",\r\n    ]),\r\n    copts = [\r\n      \"-fno-sanitize=address,thread,undefined\",\r\n      \"-fsanitize-coverage=0\"    \r\n    ],\r\n    includes = [\"lib/fuzzer\"],\r\n    linkstatic = 1,\r\n)\r\n```\r\nthen changed to use \"-fsanitize=fuzzer-no-link\" and added \"@llvm-project//compiler-rt:Fuzzer\" dependency to explorer_fuzzer\r\n\r\nthen `ASAN_OPTIONS=detect_container_overflow=0 bazel-bin/explorer/fuzzing/explorer_fuzzer` worked\r\n\r\ndetect_container_overflow=0 from here -- https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow#false-positives\r\n","createdAt":"2022-06-30T19:25:58Z"}},{"node":{"id":"IC_kwDOD3caBc5F1Ui7","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"works without `ASAN_OPTIONS=detect_container_overflow=0` for the following fuzzer BUILD file:\r\n\r\n```\r\n$cat bazel-execroot/external/llvm-project/compiler-rt/BUILD.bazel\r\npackage(\r\n    default_visibility = [\"//visibility:public\"],\r\n    licenses = [\"notice\"],\r\n)\r\n\r\ncc_library(\r\n    name = \"Fuzzer\",\r\n    srcs = glob(\r\n        [\"lib/fuzzer/Fuzzer*.cpp\"],\r\n    ),\r\n    hdrs = glob([\r\n        \"lib/fuzzer/Fuzzer*.h\",\r\n        \"lib/fuzzer/Fuzzer*.def\",\r\n    ]),\r\n    copts = [\r\n      \"-fno-sanitize=undefined\",\r\n    ],\r\n    includes = [\"lib/fuzzer\"],\r\n)\r\n\r\n```","createdAt":"2022-06-30T19:39:13Z"}},{"node":{"id":"IC_kwDOD3caBc5F1oZE","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Prepared a tentative PR -- #1357","createdAt":"2022-06-30T21:16:03Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1208","body":"```\r\n$ bazel build executable_semantics/fuzzing:executable_semantics_fuzzer\r\n\r\n/usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__iterator/wrap_iter.h:89: _LIBCPP_ASSERT '__get_const_db()->__dereferenceable(this)' failed. Attempted to dereference a non-dereferenceable iterator\r\n==1022947== ERROR: libFuzzer: deadly signal\r\n    #0 0x56285d50fcc1 in __sanitizer_print_stack_trace /tmp/llvm-20220302-9880-1faggz0/llvm-project-13.0.1.src/compiler-rt/lib/asan/asan_stack.cpp:87:3\r\n    #1 0x56285d457638 in fuzzer::PrintStackTrace() cxa_noexception.cpp\r\n    #2 0x56285d43b673 in fuzzer::Fuzzer::CrashCallback() cxa_noexception.cpp\r\n    #3 0x7f17de11e1ff  (/lib/x86_64-linux-gnu/libpthread.so.0+0x131ff)\r\n    #4 0x7f17dddc88a0 in __libc_signal_restore_set signal/../sysdeps/unix/sysv/linux/internal-signals.h:105:3\r\n    #5 0x7f17dddc88a0 in raise signal/../sysdeps/unix/sysv/linux/raise.c:47:3\r\n    #6 0x7f17dddb2545 in abort stdlib/abort.c:79:7\r\n    #7 0x56285d56b4de in std::__1::__libcpp_abort_debug_function(std::__1::__libcpp_debug_info const&) (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/executable_semantics/fuzzing/executable_semantics_fuzzer+0x8e34de)\r\n    #8 0x56285d878e38 in std::__1::__wrap_iter<char const*>::operator*() const /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/__iterator/wrap_iter.h:88:9\r\n    #9 0x56285d878717 in google::protobuf::DescriptorBuilder::ValidateSymbolName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, google::protobuf::Message const&) /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/descriptor.cc:4691:25\r\n    #10 0x56285d87824e in google::protobuf::DescriptorBuilder::AddPackage(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, google::protobuf::Message const&, google::protobuf::FileDescriptor*) /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/descriptor.cc:4668:7\r\n    #11 0x56285d8781ce in google::protobuf::DescriptorBuilder::AddPackage(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, google::protobuf::Message const&, google::protobuf::FileDescriptor*) /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/descriptor.cc:4671:7\r\n    #12 0x56285d87c58b in google::protobuf::DescriptorBuilder::BuildFileImpl(google::protobuf::FileDescriptorProto const&) /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/descriptor.cc:4985:5\r\n    #13 0x56285d8701ed in google::protobuf::DescriptorBuilder::BuildFile(google::protobuf::FileDescriptorProto const&) /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/descriptor.cc:4909:28\r\n    #14 0x56285d845b13 in google::protobuf::DescriptorPool::BuildFileFromDatabase(google::protobuf::FileDescriptorProto const&) const /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/descriptor.cc:4177:12\r\n    #15 0x56285d83a487 in google::protobuf::DescriptorPool::TryFindFileInFallbackDatabase(google::protobuf::stringpiece_internal::StringPiece) const /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/descriptor.cc:2454:7\r\n    #16 0x56285d839ef3 in google::protobuf::DescriptorPool::FindFileByName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/descriptor.cc:2044:7\r\n    #17 0x56285d9e068b in google::protobuf::(anonymous namespace)::AssignDescriptorsImpl(google::protobuf::internal::DescriptorTable const*, bool) /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/generated_message_reflection.cc:2931:50\r\n    #18 0x56285d9f5d9a in operator() /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/generated_message_reflection.cc:3004:5\r\n    #19 0x56285d9f5d9a in decltype(static_cast<google::protobuf::internal::AssignDescriptors(google::protobuf::internal::DescriptorTable const* (*)(), std::__1::once_flag*, google::protobuf::Metadata const&)::$_0>(fp)()) std::__1::__invoke<google::protobuf::internal::AssignDescriptors(google::protobuf::internal::DescriptorTable const* (*)(), std::__1::once_flag*, google::protobuf::Metadata const&)::$_0>(google::protobuf::internal::AssignDescriptors(google::protobuf::internal::DescriptorTable const* (*)(), std::__1::once_flag*, google::protobuf::Metadata const&)::$_0&&) /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/type_traits:3918:1\r\n    #20 0x56285d9f5cd9 in __execute<> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/mutex:630:9\r\n    #21 0x56285d9f5cd9 in operator() /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/mutex:622:9\r\n    #22 0x56285d9f5cd9 in void std::__1::__call_once_proxy<std::__1::tuple<google::protobuf::internal::AssignDescriptors(google::protobuf::internal::DescriptorTable const* (*)(), std::__1::once_flag*, google::protobuf::Metadata const&)::$_0&&> >(void*) /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/mutex:658:5\r\n    #23 0x56285d575b77 in std::__1::__call_once(unsigned long volatile&, void*, void (*)(void*)) (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/executable_semantics/fuzzing/executable_semantics_fuzzer+0x8edb77)\r\n    #24 0x56285d9dff66 in call_once<(lambda at external/com_github_protocolbuffers_protobuf/src/google/protobuf/generated_message_reflection.cc:3002:20)> /usr/local/google/home/pk19604014/.linuxbrew/Cellar/llvm/13.0.1_1/bin/../include/c++/v1/mutex:676:9\r\n    #25 0x56285d9dff66 in google::protobuf::internal::AssignDescriptors(google::protobuf::internal::DescriptorTable const* (*)(), std::__1::once_flag*, google::protobuf::Metadata const&) /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/generated_message_reflection.cc:3002:3\r\n    #26 0x56285d5f01fd in Carbon::Fuzzing::Carbon::GetMetadata() const /proc/self/cwd/bazel-out/k8-fastbuild/bin/common/fuzzing/carbon.pb.cc:16762:10\r\n    #27 0x56285da354e2 in GetDescriptor /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/message.h:352:52\r\n    #28 0x56285da354e2 in google::protobuf::TextFormat::Parser::Parse(google::protobuf::io::ZeroCopyInputStream*, google::protobuf::Message*) /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/text_format.cc:1609:29\r\n    #29 0x56285da36453 in google::protobuf::TextFormat::Parser::ParseFromString(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, google::protobuf::Message*) /proc/self/cwd/external/com_github_protocolbuffers_protobuf/src/google/protobuf/text_format.cc:1622:10\r\n    #30 0x56285d820ce8 in protobuf_mutator::ParseTextMessage(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, google::protobuf::Message*) /proc/self/cwd/external/com_google_libprotobuf_mutator/src/text_format.cc:34:15\r\n    #31 0x56285d820a67 in protobuf_mutator::ParseTextMessage(unsigned char const*, unsigned long, google::protobuf::Message*) /proc/self/cwd/external/com_google_libprotobuf_mutator/src/text_format.cc:25:10\r\n    #32 0x56285d7edbda in protobuf_mutator::libfuzzer::LoadProtoInput(bool, unsigned char const*, unsigned long, google::protobuf::Message*) /proc/self/cwd/external/com_google_libprotobuf_mutator/src/libfuzzer/libfuzzer_macro.cc:227:26\r\n    #33 0x56285d543e74 in LLVMFuzzerTestOneInput /proc/self/cwd/executable_semantics/fuzzing/executable_semantics_fuzzer.cpp:9:1\r\n    #34 0x56285d43cef3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) cxa_noexception.cpp\r\n    #35 0x56285d43e554 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__Fuzzer::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) cxa_noexception.cpp\r\n    #36 0x56285d43e9e9 in fuzzer::Fuzzer::Loop(std::__Fuzzer::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) cxa_noexception.cpp\r\n    #37 0x56285d42dbfe in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) cxa_noexception.cpp\r\n    #38 0x56285d457df2 in main /tmp/llvm-20220302-9880-1faggz0/llvm-project-13.0.1.src/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10\r\n    #39 0x7f17dddb37fc in __libc_start_main csu/../csu/libc-start.c:332:16\r\n    #40 0x56285d404a69 in _start (/usr/local/google/home/pk19604014/.cache/bazel/_bazel_pk19604014/0c0c6d5ac7dde4460fd40f446af91e37/execroot/carbon/bazel-out/k8-fastbuild/bin/executable_semantics/fuzzing/executable_semantics_fuzzer+0x77ca69)\r\n\r\nNOTE: libFuzzer has rudimentary signal handlers.\r\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\r\nSUMMARY: libFuzzer: deadly signal\r\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\r\n\r\n\r\nartifact_prefix='./'; Test unit written to ./crash-da39a3ee5e6b4b0d3255bfef95601890afd80709\r\nBase64: \r\n\r\n```\r\n\r\nThe minimal amount of code I can reproduce the crash with is just invoking a standard protobuf method from `LLVMFuzzerTestOneInput()`\r\n\r\n```\r\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {    \r\n  Carbon::Fuzzing::Carbon::GetDescriptor();\r\n  return 0;\r\n}\r\n```\r\n\r\nThe crash doesn't reproduce if running the same code as a unit test with --config=asan, only reproduces when running as cc_fuzz_test (with linkopt=-f:sanitize=fuzzer'), or directly adding `linkopt=-f:sanitize=fuzzer` to `cc_test` rule arguments.\r\n\r\nI can also get a similar crash by adding this entry to `.bazelrc`:\r\n```\r\nbuild --per_file_copt=.*/google/protobuf/.*@-U_LIBCPP_DEBUG\r\n```\r\nThis actually allows `executable_semantics_fuzzer` test to stop crashing, but leads to a similar `__get_const_db()->__dereferenceable(this)` assert failure in `ast_to_proto_test`.\r\nhttps://libcxx.llvm.org/DesignDocs/DebugMode.html says that 'while the debug mode has no effect on libc++’s ABI, it does have broad ODR implications. Users should compile their whole program at the same debugging level.'\r\n\r\nThis leads me to a theory that because `-fsanitize=fuzzer` link options links in a pre-built llvm library defining fuzzer driver and main, perhaps the original crash is also similar to compiling different sources with different `_LIBCPP_DEBUG` values, leading to an ODR violation in wrap_iter.\r\n\r\n","closed":true,"closedAt":"2022-07-15T13:14:30Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc46qr7q","title":"Added a patch with a fuzzer Bazel BUILD file to address _LIBCPP_DEBUG crash in #1208","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Fixes #1208\r\n\r\nFully bazel-ifying compiler-rt is more complex than I originally thought, due to dependencies on other llvm projects like libcxx which currently also don't have bazel build support -- https://github.com/carbon-language/carbon-lang/issues/1208#issuecomment-1171555971","url":"https://github.com/carbon-language/carbon-lang/pull/1357","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/2d8a3b82410b29681379c850b96d7a66d8eebf74"},"id":"PURC_lADOD3caBc46qr7q2gAoMmQ4YTNiODI0MTBiMjk2ODEzNzljODUwYjk2ZDdhNjZkOGVlYmY3NA","resourcePath":"/carbon-language/carbon-lang/pull/1357/commits/2d8a3b82410b29681379c850b96d7a66d8eebf74"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/7fe81adff5658bf1867568d38c2eb9feb40c73c3"},"id":"PURC_lADOD3caBc46qr7q2gAoN2ZlODFhZGZmNTY1OGJmMTg2NzU2OGQzOGMyZWI5ZmViNDBjNzNjMw","resourcePath":"/carbon-language/carbon-lang/pull/1357/commits/7fe81adff5658bf1867568d38c2eb9feb40c73c3"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/0d46add99dd787d83bbc706ce69f2a80af9bce75"},"id":"PURC_lADOD3caBc46qr7q2gAoMGQ0NmFkZDk5ZGQ3ODdkODNiYmM3MDZjZTY5ZjJhODBhZjliY2U3NQ","resourcePath":"/carbon-language/carbon-lang/pull/1357/commits/0d46add99dd787d83bbc706ce69f2a80af9bce75"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/94a4b6507d1e4c99c2eb968c301e152c2de5fddd"},"id":"PURC_lADOD3caBc46qr7q2gAoOTRhNGI2NTA3ZDFlNGM5OWMyZWI5NjhjMzAxZTE1MmMyZGU1ZmRkZA","resourcePath":"/carbon-language/carbon-lang/pull/1357/commits/94a4b6507d1e4c99c2eb968c301e152c2de5fddd"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/92c17865128815e7573f260f6dcd1fecf3c3e6cc"},"id":"PURC_lADOD3caBc46qr7q2gAoOTJjMTc4NjUxMjg4MTVlNzU3M2YyNjBmNmRjZDFmZWNmM2MzZTZjYw","resourcePath":"/carbon-language/carbon-lang/pull/1357/commits/92c17865128815e7573f260f6dcd1fecf3c3e6cc"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/85eedd6875c57739c17ca77da7b817c85ff7c04a"},"id":"PURC_lADOD3caBc46qr7q2gAoODVlZWRkNjg3NWM1NzczOWMxN2NhNzdkYTdiODE3Yzg1ZmY3YzA0YQ","resourcePath":"/carbon-language/carbon-lang/pull/1357/commits/85eedd6875c57739c17ca77da7b817c85ff7c04a"}}]},"createdAt":"2022-06-30T20:37:58Z","closed":true,"closedAt":"2022-07-15T13:14:30Z"}}]},"createdAt":"2022-04-23T16:12:35Z","labels":{"edges":[]},"author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5N6Yht","title":"script runs as `/bin/bash` but expects to be able to run `/usr/bin/bash`","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5GuY09","author":{"login":"mattgodbolt","url":"https://github.com/mattgodbolt"},"body":"(Noticed while trying to get a minimal docker-based build environment for Compiler Explorer, bulid and install ended with:\r\n```\r\nINFO: Running command line: bazel-bin/installers/local/install --install_path /home/build/staging --carbon installers/local/carbon explorer/INFO: Build completed successfully, 7 total actions\r\nexplorer/data/prelude.carbon\r\nInstalling files...\r\n/home/build/.cache/bazel/_bazel_build/15cf2a67765d5f3817cbbcc2d1ec8082/execroot/carbon/bazel-out/k8-opt/bin/installers/local/install: line 63: /usr/bin/bash: No such file or directory\r\nbuild@00777b9369f6:~$ which bash\r\n/bin/bash\r\n```","createdAt":"2022-07-17T16:48:51Z"}},{"node":{"id":"IC_kwDOD3caBc5GuaRj","author":{"login":"mattgodbolt","url":"https://github.com/mattgodbolt"},"body":"maybe use `${SHELL}` in this case, and maybe also consider changing the shebang to `#!/usr/bin/env bash` ?","createdAt":"2022-07-17T16:52:04Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1402","body":"https://github.com/carbon-language/carbon-lang/blob/142a48e20429136b4298a8aab8edd2a99deef58e/installers/local/install.sh#L63","closed":true,"closedAt":"2022-07-17T17:16:47Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc47hsSY","title":"Use the same shell as invoked with for installation","author":{"login":"mattgodbolt","url":"https://github.com/mattgodbolt"},"body":"Fixes #1402","url":"https://github.com/carbon-language/carbon-lang/pull/1403","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/2e18099a174eb9305fc263da94834c333100d5ad"},"id":"PURC_lADOD3caBc47hsSY2gAoMmUxODA5OWExNzRlYjkzMDVmYzI2M2RhOTQ4MzRjMzMzMTAwZDVhZA","resourcePath":"/carbon-language/carbon-lang/pull/1403/commits/2e18099a174eb9305fc263da94834c333100d5ad"}}]},"createdAt":"2022-07-17T17:01:09Z","closed":true,"closedAt":"2022-07-17T17:16:47Z"}}]},"createdAt":"2022-07-17T16:48:11Z","labels":{"edges":[]},"author":{"login":"mattgodbolt","url":"https://github.com/mattgodbolt"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5ODq1L","title":"Installation is not relocatable","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5G5wbr","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Should be fixed by #1427 ","createdAt":"2022-07-19T21:01:06Z"}},{"node":{"id":"IC_kwDOD3caBc5G5xpw","author":{"login":"mattgodbolt","url":"https://github.com/mattgodbolt"},"body":"Thanks @jonmeow !","createdAt":"2022-07-19T21:07:32Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1413","body":"Having build and installed using something like [this](https://github.com/compiler-explorer/carbon-builder/blob/dcc95ccb4eae43e74e680dd060d406ac8d13278f/build/build.sh#L47-L50) the resulting symlinks appear to be absolute.\r\n\r\nWhen tarr-ing the results of the above and then unpacking on another machine:\r\n\r\n```\r\n~/d/c/infra (main|…) $ ls -l /opt/compiler-explorer/carbon-trunk-20220719/bin/carbon-explorer\r\nlrwxrwxrwx 1 matthew matthew 37 Jul 19 09:03 /opt/compiler-explorer/carbon-trunk-20220719/bin/carbon-explorer -> /home/build/staging/lib/carbon/carbon\r\n```\r\n\r\nthe symlinks are pointing at the directory the build was done in. (the `${STAGING_DIR}` of the linked script)","closed":true,"closedAt":"2022-07-19T21:01:06Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-19T14:11:26Z","labels":{"edges":[]},"author":{"login":"mattgodbolt","url":"https://github.com/mattgodbolt"},"assignees":{"edges":[{"node":{"login":"jonmeow"}}]}}},{"node":{"id":"I_kwDOD3caBc5OEvQ6","title":"Weekly sync doc is not public","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5G5K_X","author":{"login":"laurentlb","url":"https://github.com/laurentlb"},"body":"Same for the following line:\r\n> [Open discussions](https://docs.google.com/document/d/1NnFKOUNh_BCbVD29JiNqQ0JzC5VfE6YUq6CfKqFkouQ/edit), which are unstructured meeting slots used for discussing proposals, tooling, and other Carbon topics based on who attends.","createdAt":"2022-07-19T18:00:35Z"}},{"node":{"id":"IC_kwDOD3caBc5G5ydB","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Thank you for pointing this out! I've been slowly fixing doc ACLs, but I'm sure I would've missed these today.","createdAt":"2022-07-19T21:11:33Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1422","body":"From https://github.com/carbon-language/carbon-lang/blob/trunk/CONTRIBUTING.md#collaboration-systems:\r\n> The [weekly sync](https://docs.google.com/document/d/1pYq5MssjOi8c-wBJaHEDcsVMirFeC3iv2uFUOwsI3-M/edit), where everyone is welcome.\r\n\r\nThe Google Doc has restricted access.","closed":true,"closedAt":"2022-07-19T21:50:58Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc47rd5z","title":"Switch links to the correctly ACLed versions","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Fixes #1422 as noted by @laurentlb ","url":"https://github.com/carbon-language/carbon-lang/pull/1432","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/f1ae0c992e4f24d6df834b30602f3ab03cc29059"},"id":"PURC_lADOD3caBc47rd5z2gAoZjFhZTBjOTkyZTRmMjRkNmRmODM0YjMwNjAyZjNhYjAzY2MyOTA1OQ","resourcePath":"/carbon-language/carbon-lang/pull/1432/commits/f1ae0c992e4f24d6df834b30602f3ab03cc29059"}}]},"createdAt":"2022-07-19T21:15:16Z","closed":true,"closedAt":"2022-07-19T21:50:59Z"}}]},"createdAt":"2022-07-19T17:58:58Z","labels":{"edges":[]},"author":{"login":"laurentlb","url":"https://github.com/laurentlb"},"assignees":{"edges":[{"node":{"login":"jonmeow"}}]}}},{"node":{"id":"I_kwDOD3caBc5OFiEw","title":"Is this production ready? ","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5G6JUq","author":{"login":"tashima42","url":"https://github.com/tashima42"},"body":"It says experimental on the Readme, so probably not for a large scale project, maybe a quick personal experiment.","createdAt":"2022-07-19T23:30:08Z"}},{"node":{"id":"IC_kwDOD3caBc5G6Npo","author":{"login":"zygoloid","url":"https://github.com/zygoloid"},"body":"Thank you for your interest! Unfortuantely, our implementation is not yet complete enough for anything beyond small experiments and test cases, so I would not recommend using it for anything other than exploring the Carbon language and design at this time.","createdAt":"2022-07-20T00:08:40Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1433","body":"Just found about this language and I want to try using it for one of my projects. Is Carbon stable enough to use? ","closed":true,"closedAt":"2022-07-20T00:08:40Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-19T21:40:01Z","labels":{"edges":[]},"author":{"login":"StandingPadAnimations","url":"https://github.com/StandingPadAnimations"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OHkk1","title":"Having support for native homebrew installation of carbon","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5G98xE","author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"body":"I'm afraid Carbon is [not yet in a usable state](https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/faq.md#how-soon-can-we-use-carbon), or even very close. That being the case, we don't think it would be useful to package it for distribution right now.","createdAt":"2022-07-20T19:01:05Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1449","body":"I would like to install and update carbon using my package manager which is homebrew on macos. ","closed":true,"closedAt":"2022-07-20T19:01:05Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-20T07:55:38Z","labels":{"edges":[]},"author":{"login":"remyleone","url":"https://github.com/remyleone"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OLGdA","title":"Need raw pointers","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5G9-Ym","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Discussed this in Discord and explained that we expect pointers to work well here, with at most an explicit cast to convert from the `void*`.","createdAt":"2022-07-20T19:08:59Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1471","body":"What's the story on raw pointers/pointer arithmetic/subscripting? Say the system gives me a void* or float* or something--how do I access the memory there?","closed":true,"closedAt":"2022-07-20T19:08:59Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-20T17:13:11Z","labels":{"edges":[]},"author":{"login":"seanbaxter","url":"https://github.com/seanbaxter"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OMExB","title":"Docker Image","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5G-MYS","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"We've worked with mattgodbolt to make the explorer available at [carbon.compiler-explorer.com](http://carbon.compiler-explorer.com). However, Carbon is not ready for use: there is no working compiler. We consider it very experimental, so I don't think a docker would make sense. For more information, please read: https://github.com/carbon-language/carbon-lang#project-status","createdAt":"2022-07-20T20:11:05Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1475","body":"Hi, everyone! \r\n\r\nIs there an image in docker to use the language?","closed":true,"closedAt":"2022-07-20T20:11:05Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-20T19:44:53Z","labels":{"edges":[]},"author":{"login":"RoCampos","url":"https://github.com/RoCampos"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OI6AR","title":"0-Element Tuples","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5G-EV_","author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"body":"Yes, zero-element tuples are valid, and the syntax is `()`. The empty tuple is a different type from the empty struct, though.","createdAt":"2022-07-20T19:35:15Z"}},{"node":{"id":"IC_kwDOD3caBc5G-HX1","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"> Yes, zero-element tuples are valid, and the syntax is `()`. The empty tuple is a different type from the empty struct, though.\r\n\r\nMaybe worth a quick addition to the tuple design then, and fix this issue with that?","createdAt":"2022-07-20T19:48:30Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1456","body":"https://github.com/carbon-language/carbon-lang/blob/trunk/docs/design/tuples.md#single-value-tuples explicitly considers 1-element tuples but the doc does not consider 0-element tuples. If tuples are a product type then a 0-element tuple is the unit type.\r\n\r\nAre they legal? What's their syntax? Are they equivalent to a 0-element struct?\r\n\r\nSee also: [Void type as unit type](https://en.wikipedia.org/wiki/Unit_type#Void_type_as_unit_type)","closed":true,"closedAt":"2022-07-20T20:44:42Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc47x3C-","title":"Empty tuple doc","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Fixed #1456 (very brief mention -- tuple doc is not final)","url":"https://github.com/carbon-language/carbon-lang/pull/1477","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/af3db57d6db2a140a6b61244e842afe752e38ed8"},"id":"PURC_lADOD3caBc47x3C-2gAoYWYzZGI1N2Q2ZGIyYTE0MGE2YjYxMjQ0ZTg0MmFmZTc1MmUzOGVkOA","resourcePath":"/carbon-language/carbon-lang/pull/1477/commits/af3db57d6db2a140a6b61244e842afe752e38ed8"}}]},"createdAt":"2022-07-20T20:42:54Z","closed":true,"closedAt":"2022-07-20T20:44:42Z"}}]},"createdAt":"2022-07-20T12:08:20Z","labels":{"edges":[]},"author":{"login":"nigeltao","url":"https://github.com/nigeltao"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OGI3f","title":"CMake support","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5G69Q1","author":{"login":"atsushieno","url":"https://github.com/atsushieno"},"body":"It will also help Android NDK integration, once toolchains are appropriately built. There is no Android Studio integration with Bazel (I'm saying Android Studio, not just Bazel console mobile builds that neither gives coding aid nor lldb integration).","createdAt":"2022-07-20T05:56:46Z"}},{"node":{"id":"IC_kwDOD3caBc5G8WRu","author":{"login":"cloudhan","url":"https://github.com/cloudhan"},"body":"If I have choice, I would avoid CMake as plague. Bazel is a much better than CMake. Since you are making choice (implicitly by opening an issue in the C++ successor repo), why not choose a better one?","createdAt":"2022-07-20T12:28:13Z"}},{"node":{"id":"IC_kwDOD3caBc5G8hum","author":{"login":"atsushieno","url":"https://github.com/atsushieno"},"body":"Bazel has beautiful dependency management system (edit: *task* dependency) and the syntax would be definitely cleaner than CMake (I don't prefer CMake syntax eiher), but build system is not only about build script syntax. When it comes to IDE integration, CMake is supported almost everywhere, which means that you are most likely able to open those Carbon CMake projects on your IDE. Otherwise you have to start with implementing Bazel integration for each IDE.\r\n\r\nAre there such IDE extensions already? Note that it is not only about running build commands. Expanding project contents into the IDEs.\r\n\r\nAt this state I rather assume that use of Bazel in current source tree does not necessarily mean \"the Carbon build system\" will be Bazel. Also, while sometimes one build system kinda has to be dominant (like MSBuild for most of dotnet project kinds), they do not necessarily have to be fixed to one. Having CMake as an option works for us.","createdAt":"2022-07-20T13:14:07Z"}},{"node":{"id":"IC_kwDOD3caBc5G8uLp","author":{"login":"benthevining","url":"https://github.com/benthevining"},"body":"CMake is a de facto industry standard for C++. It doesn't really matter if Bazel is better than CMake or not (which I don't believe it is), what matters is that CMake support is much more _useful_ than Bazel.","createdAt":"2022-07-20T13:58:28Z"}},{"node":{"id":"IC_kwDOD3caBc5G955z","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Just to be clear, while we are using Bazel to build the Carbon project, there is no expectation of that being the only (or even primary) build system *for Carbon code*.\r\n\r\nWe're a long way from it making sense to try to have upstream build system support (or even *any* build system support) for Carbon code, but when we get there, we should definitely consider *all* the major build systems relevant to C++ developers: CMake, Automake, Makefiles, Bazel, Gradle, ....\r\n\r\nFor now, not sure its useful to keep an issue open for this so closing.","createdAt":"2022-07-20T18:47:52Z"}},{"node":{"id":"IC_kwDOD3caBc5G-Xdp","author":{"login":"benthevining","url":"https://github.com/benthevining"},"body":"Thanks for the clarification!","createdAt":"2022-07-20T21:01:48Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1436","body":"CMake is the industry standard build system for C++ code, and if Carbon wants to advertise interoperability with C++, it seems very foolish not to support CMake out of the box.\r\n\r\nIt is possible to implement Carbon as a first-class language in CMake, or Carbon could provide a utility module with commands like `carbon_add_library()`, `carbon_add_executable()`, etc.","closed":true,"closedAt":"2022-07-20T18:47:52Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-20T00:36:21Z","labels":{"edges":[]},"author":{"login":"benthevining","url":"https://github.com/benthevining"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OEzvp","title":"Carbon spec and the reference compiler should be in two different repos","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5G5RVi","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"So far, we've prioritized keeping things together and fast-moving with a single repo.\r\n\r\nWe can look at splitting later if it becomes important. But I think we'd also want to look at other approaches such as creating easy ways to extract / mirror specific parts for users that want a narrow view.\r\n\r\nAnyways, not sure this is something we really want to spend a bunch of time iterating on in the super short term.","createdAt":"2022-07-19T18:26:42Z"}},{"node":{"id":"IC_kwDOD3caBc5G-atx","author":{"login":"zygoloid","url":"https://github.com/zygoloid"},"body":"I agree, revisiting this doesn't seem like a high priority right now. We can reconsider if we do have out-of-tree implementations and the current approach turns out to be a problem in practice -- I'd hope that read-only access to our specification (eg, reading our rendered .md files online) should be enough for that most of the time, but maybe it won't be.","createdAt":"2022-07-20T21:18:18Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1426","body":"The spec and the reference compiler should be in two different repos to allow other front-ends to be created without having to deal with the reference compiler. for an example someone might go in and create a new front-end which targets GCC generic IR rather and having the reference compiler in the same repo can cause many other issues there too.","closed":true,"closedAt":"2022-07-20T21:18:18Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-19T18:16:55Z","labels":{"edges":[]},"author":{"login":"apinski-cavium","url":"https://github.com/apinski-cavium"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OOQ0R","title":"when will developer document be released?","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5G_PY2","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Carbon is still very experimental: it's not ready for use, and won't be for several years. Since we're so far off from encouraging developer use, developer documentation doesn't make sense at this time.\r\n\r\n Please see https://github.com/carbon-language/carbon-lang#project-status; https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/faq.md#what-is-carbons-status may also help fill in details for you.","createdAt":"2022-07-21T03:01:02Z"}},{"node":{"id":"IC_kwDOD3caBc5G_dAS","author":{"login":"huaiguoguo","url":"https://github.com/huaiguoguo"},"body":"@jonmeow  thank you!","createdAt":"2022-07-21T04:58:02Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1484","body":"when will developer document be released?","closed":true,"closedAt":"2022-07-21T03:01:02Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T02:23:35Z","labels":{"edges":[]},"author":{"login":"huaiguoguo","url":"https://github.com/huaiguoguo"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OQXJr","title":"rust-like proc_macro is very important","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HAKkT","author":{"login":"huiseliming","url":"https://github.com/huiseliming"},"body":"Can use macros to visit ast for code generation or replace very important","createdAt":"2022-07-21T08:55:49Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1503","body":"New language should implement features that C++ lacks","closed":true,"closedAt":"2022-07-21T09:13:01Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T08:54:44Z","labels":{"edges":[]},"author":{"login":"huiseliming","url":"https://github.com/huiseliming"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OQU32","title":"Make  carbon available on compiler explorer ","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HAM9Z","author":{"login":"mo-xiaoming","url":"https://github.com/mo-xiaoming"},"body":"It's already there, those guys are fast\r\n\r\n[godbolt with carbon](https://carbon.compiler-explorer.com/z/96vPrhfqr)\r\n\r\n(edited to add a code example on godbolt)","createdAt":"2022-07-21T09:05:12Z"}},{"node":{"id":"IC_kwDOD3caBc5HAPFd","author":{"login":"ggulgulia","url":"https://github.com/ggulgulia"},"body":"I assumed it is not yet on compiler explorer Not sure why :thinking: . Closing this issue","createdAt":"2022-07-21T09:13:47Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1502","body":"## Description\r\n* Compiler Explorer is an online tool used by many in C++ community developed and maintained by Matt Godbolt (and others of course\r\n* This is the website: https://godbolt.org/\r\n* This tool is used by many to prototype and toy around and play with C++ code and benchmark the assembly code generated by C++ code for toy applications.\r\n* With addition of [CMake Support on compiler explorer ](https://github.com/compiler-explorer/compiler-explorer/issues?q=cmake)the users have even a bigger play ground to experiment and test the limits of Carbon compatibility with CMake\r\n\r\n## Why carbon on compiler explorer ? \r\n* Since Carbon promises to work with C++, its availability on Compiler Explorer will gain the attention of a large experienced audience\r\n* Compiler explorer gives ability to share code snippets -> this can trigger bigger discussion  within C++ and carbon community\r\n* More feature/bug/documentation update requests\r\n* ...","closed":true,"closedAt":"2022-07-21T09:13:47Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T08:47:30Z","labels":{"edges":[]},"author":{"login":"ggulgulia","url":"https://github.com/ggulgulia"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5ORN0D","title":"GPU and SIMD","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HA2Zk","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"My bad, fixing link: https://github.com/carbon-language/carbon-lang/tree/trunk/docs/project/principles/success_criteria.md?cl=head#modern-os-platforms-hardware-architectures-and-environments","createdAt":"2022-07-21T12:08:18Z"}},{"node":{"id":"IC_kwDOD3caBc5HAy1Z","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"See https://github.com/carbon-language/carbon-lang/tree/trunk/docs/project/principles/success_criteria.md?cl=head#modern-os-platforms-hardware-architectures-and-environments","createdAt":"2022-07-21T11:52:34Z"}},{"node":{"id":"IC_kwDOD3caBc5HA18c","author":{"login":"swiftcoder","url":"https://github.com/swiftcoder"},"body":"> Any chance of that success criteria doc being published outside of google corporate?\r\n\r\nNevermind, I found it in the repo: https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/principles/success_criteria.md","createdAt":"2022-07-21T12:06:15Z"}},{"node":{"id":"IC_kwDOD3caBc5HA3_L","author":{"login":"fhoenig","url":"https://github.com/fhoenig"},"body":"What does \"We believe Carbon should strive to support some GPUs\" mean in practice?","createdAt":"2022-07-21T12:15:21Z"}},{"node":{"id":"IC_kwDOD3caBc5HA7RR","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"\"We haven't fully thought this through but it's on our minds\"\r\n\r\nPragmatically it's a priority, but it's not our top priority -- we're hoping we can get experts to contribute something better than we'd build ourselves.","createdAt":"2022-07-21T12:30:02Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1509","body":"Just my 2 cents / rant:\r\n\r\nI find it absurd that anyone would invent another language while pretending that a computer consists only of a CPU ALU.\r\nGPU targets (various ILs and potentially native ISA is pretty much all over LLVM). Apple's Metal IR is also straight up LLVM IR with some attributes to mark address spaces. I don't think there is an excuse to ignore this ;-)\r\n\r\nThe other part is data-parallel expression. Much to learn from ISPC. It's also LLVM and right there. Much more accessible usage for programming CPU SIMD units than intrinsics or some SIMD vector types / matrices...\r\n\r\nI hope you guys are thinking about that.\r\n\r\nKindly\r\nF","closed":true,"closedAt":"2022-07-21T11:52:34Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T11:50:48Z","labels":{"edges":[]},"author":{"login":"fhoenig","url":"https://github.com/fhoenig"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OSXOp","title":"Consider renaming \"let\"","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HCGe7","author":{"login":"tomisinteazer","url":"https://github.com/tomisinteazer"},"body":"I agree with this const is really explicit and is very obvious as to the purpose of the key word","createdAt":"2022-07-21T17:06:18Z"}},{"node":{"id":"IC_kwDOD3caBc5HCy_R","author":{"login":"zezba9000","url":"https://github.com/zezba9000"},"body":"This conversation is up on C# too.\r\n\r\n**However \"let\" should never be a replacement for \"const\".**\r\n(This is a flawed notion pulled from C/C++ & C# readonly keyword is far better equivalent)\r\n\"let\" implies immutable memory on the stack, heap or global area. (Carbon is using \"let\" correctly here)\r\n\"const\"  implies compile-time / program memory. This means compile-time string, numeric concats etc. This is very important for Arduino devices that run off flash not ram.\r\n\r\nhttps://github.com/dotnet/csharplang/issues/188","createdAt":"2022-07-21T20:43:45Z"}},{"node":{"id":"IC_kwDOD3caBc5HDGwy","author":{"login":"Sploder12","url":"https://github.com/Sploder12"},"body":"You bring up a good point with the issues of \"const\". \r\nI prefer \"readonly\", thank you for bringing it up.\r\n\r\nThe keyword should be named in a way that the name has meaning without background knowledge, \"let\" lacks this.","createdAt":"2022-07-21T22:32:08Z"}},{"node":{"id":"IC_kwDOD3caBc5HDN9n","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"The exact spelling of `let` hasn't gone all the way through a proposal yet, but the in-progress proposal and surrounding discussions have definitely mentioned all of these alternatives.\r\n\r\nWhen we have a proposal that goes in with this, it will need to include a summary of the alternative spellings and the trade-offs between them. I think that's the point at which it will make sense to ask for a decision on the spelling here. Closing this issue for now as I don't think it makes sense to try to ask for a decision on `let` until we have a proposal that actually lays out the rationale.","createdAt":"2022-07-21T23:28:42Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1518","body":"The current design document describes `let` as \"constant declarations\" and further refers to it as \"constant let declarations\".\r\nThe naming of `let` has ambiguity and doesn't imply const-ness.\r\nThis issue is furthered by languages like JS having `let` mean something else.\r\n`let` also doesn't give any information about the r-value nature of the binding.\r\n\r\nI propose renaming to \"const\" however, I can see why this might be an issue with r-value binding.\r\nAlternatives would include (but is not limited to), \"val\", \"rval\", \"value\", \"rvalue\".\r\n\r\n","closed":true,"closedAt":"2022-07-21T23:28:42Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T15:25:27Z","labels":{"edges":[]},"author":{"login":"Sploder12","url":"https://github.com/Sploder12"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5ORMOY","title":"type safety by default","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HDPZp","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"I would suggest not forking off multiple issues from #1510 like this, I think it fragments discussions and makes the issue tracker harder to manage. I've responded on the main issue, closing this one.","createdAt":"2022-07-21T23:41:31Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1508","body":"Ada had possibly the strongest type system ever, should we bring this back as a default?\r\n\r\n```\r\nusing strong meters = double;\r\nusing strong kilometers = double;\r\nusing strong number_of_lines = int;\r\n\r\nmeters distance_to_home = 50 meters;\r\ndistance_to_home  = distance_to_home  + 10 meters;\r\n\r\n```\r\n\r\n* number_of_lines does like the int's do\r\n* Meters behaves like doubles, but can't be mixed with regular double's without explicit conversion\r\n* there would need to be a way to say: meters are addable to kilometers, and this is the ratio between them\r\n\r\nI'm omitting a ton of complexity, but I think we should reconsider this entire topic.\r\n\r\n\r\n\r\n","closed":true,"closedAt":"2022-07-21T23:41:31Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T11:45:19Z","labels":{"edges":[]},"author":{"login":"janwilmans","url":"https://github.com/janwilmans"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5ORJf4","title":"thread safety by default","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HDPbt","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"I would suggest not forking off multiple issues from https://github.com/carbon-language/carbon-lang/issues/1510 like this, I think it fragments discussions and makes the issue tracker harder to manage. I've responded on the main issue, closing this one.","createdAt":"2022-07-21T23:41:49Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1507","body":"could we have Immutable objects by default?\r\nthat would also make them thread safe by default.\r\n\r\nexample: String is immutable in Java, it's inherently thread-safe.\r\nI realize that we need performance / escape hatches here, but safe defaults would be awesome?\r\n\r\nfrom the Rust docs:\r\n```In Rust, threads are \"isolated\" from each other automatically, due to ownership. Writes can only happen when the thread has mutable access, either by owning the data, or by having a mutable borrow of it. Either way, the thread is guaranteed to be the only one with access at the time.```\r\n\r\nThis model sounds like a sensible default ?\r\n","closed":true,"closedAt":"2022-07-21T23:41:49Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T11:35:35Z","labels":{"edges":[]},"author":{"login":"janwilmans","url":"https://github.com/janwilmans"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OQRBm","title":"Unsafe support","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HArRZ","author":{"login":"janwilmans","url":"https://github.com/janwilmans"},"body":"Quote from Twitter: \r\n\"Most code in a give language is written in the \"default\" mode, so most rust is safe, most C++ is very unsafe (who uses \".at\" instead of []?). If the easiest thing to write in Carbon is unsafe code, that's what people will create.\"\r\n\r\nme: \"That's a good point, we should make the unsafe code ugly and verbose\"\r\n","createdAt":"2022-07-21T11:16:47Z"}},{"node":{"id":"IC_kwDOD3caBc5HDQAs","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Our goals already talk about the need to have low-level access:\r\nhttps://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/goals.md#performance-critical-software:~:text=Leave%20no%20room%20for%20a%20lower%20level%20language.%20Developers%20should%20not%20need%20to%20leave%20the%20rules%20and%20structure%20of%20Carbon%2C%20whether%20to%20gain%20control%20over%20performance%20problems%20or%20to%20gain%20access%20to%20hardware%20facilities.\r\n\r\nThey also already talk about making unsafe things visible:\r\nhttps://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/goals.md#performance-critical-software:~:text=Make%20unsafe%20or,when%20reading%20code.\r\n\r\nSo I'm not sure there is anything more we need to do for this issue, closing as already working.\r\n\r\n@janwilmans - A specific note, please don't use \"ugly\" this way here. We should talk about the functional benefit of having things by syntactically marked.","createdAt":"2022-07-21T23:46:20Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1501","body":"While the idea of a safety-oriented successor of C++ with maintained performace seems promising to me, I believe the original language had another very important use. That is, being capable of low-level, architecture-tailored manipulations. This includes raw pointer arithmetics, `volatile`, inline assembly, `extern \"c\"` and other similar features. I agree that porting some of them directly would likely compromise the safety of the language, but I still think they should be available in a more convenient manner than adding a separate C++ translation unit. Perhaps something like C#'s `unsafe` keyword could be a solution, making the programmer explicitly take responsibility for his code's safety. Another option would be allowing C++ code inserts (much like inline assembly), although that seems worse in terms of both safety and code quality.\n\n(Sorry if this had already been brought up before. I haven't found anything similar in the issues)","closed":true,"closedAt":"2022-07-21T23:46:20Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T08:35:41Z","labels":{"edges":[]},"author":{"login":"abel1502","url":"https://github.com/abel1502"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5ON_ju","title":"`new` and `delete` equivalents","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HAxdi","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I think TBD. Right now explorer has a Heap.New and Heap.Delete, but I think that shouldn't be taken as a clear design direction.\r\nhttps://github.com/carbon-language/carbon-lang/blob/trunk/explorer/data/prelude.carbon","createdAt":"2022-07-21T11:46:19Z"}},{"node":{"id":"IC_kwDOD3caBc5HA6-c","author":{"login":"ryuukk","url":"https://github.com/ryuukk"},"body":"I think a better way to do it moving forward is to get inspiration from zig, encourage and empower the use of allocators, having a nice core API for allocators should be the priority imo\r\n","createdAt":"2022-07-21T12:28:36Z"}},{"node":{"id":"IC_kwDOD3caBc5HDQVZ","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"We're definitely looking at allocators and Zig and other languages here. Since this is TBD as guessed, closing this issue for now to keep our open issues tidy.","createdAt":"2022-07-21T23:49:04Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1483","body":"I didn't see C++'s `new` or `delete` (and the Carbon equivalents) discussed in https://github.com/carbon-language/carbon-lang/blob/trunk/docs/design/README.md (or even a placeholder section under \"Unfinished Tales\").\r\n\r\nIssues #257 and #1154 are related, but not exactly the same.\r\n\r\nThe status may very well be 'yeah, that's TBD (To Be Determined)'. I just wanted to check that I didn't miss anything.","closed":true,"closedAt":"2022-07-21T23:49:04Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T01:38:00Z","labels":{"edges":[]},"author":{"login":"nigeltao","url":"https://github.com/nigeltao"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5ORO7G","title":"New motto: \"Safe by default\"","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HCpY_","author":{"login":"Clashkid155","url":"https://github.com/Clashkid155"},"body":"Isn't that a Rust thing?","createdAt":"2022-07-21T19:55:50Z"}},{"node":{"id":"IC_kwDOD3caBc5HC0OK","author":{"login":"janwilmans","url":"https://github.com/janwilmans"},"body":"As a new language you should adopt from existing languages what works well, right?","createdAt":"2022-07-21T20:49:06Z"}},{"node":{"id":"IC_kwDOD3caBc5HDNRp","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"We already have a goal for safety:\r\nhttps://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/goals.md#practical-safety-and-testing-mechanisms\r\n\r\nIf this needs to change, that should go through the proposal process.\r\n\r\nPersonally, I don't think a motto or something as simple as \"safe by default\" is as effective as the structure we use with our goals. As an example, should memory management be safe-by-default via a garbage collector? For many languages this is a great choice, but it isn't for Carbon because of our goal to support performance critical software which can't afford any of the overhead options for GC. But the motto doesn't help make this tradeoff, or say what to do instead. This is the reason we've tried to structure our goals the way we have with the level of detail and discussion of tradeoffs.\r\n\r\nI think the current goals are also pretty aligned with what you're trying to achieve. Is there some gap in that goal that you'd like to see closed?","createdAt":"2022-07-21T23:22:21Z"}},{"node":{"id":"IC_kwDOD3caBc5HEAdX","author":{"login":"janwilmans","url":"https://github.com/janwilmans"},"body":"What I see missing is the \"Practical safety and testing mechanisms\" section only talks about unsafe operations. What I like a lot is \"Make unsafe or risky aspects of Carbon code explicit and syntactically visible\". However, the emphasis I'm missing is that we should also make sure naive code \"just works\". (but is not necessarily optimally performant)\r\n\r\nThe reason I think a Motto like this is effective, is because the it's basically a catchy stable reference to the \"Practical safety and testing mechanisms\" chapter. \r\n\r\nAbout the separate issues I opened, I considered it more helpful to separate the concerns and discussion about these separate topics.\r\n\r\n#1508 (Type safety by default) is a very different topic I think, not sure it would be good to incorporate these topics into one discussion. \r\n\r\nThanks for the quick feedback\r\n\r\n","createdAt":"2022-07-22T06:31:53Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1510","body":"I think we should put \"Safe by default\" central in Carbon.","closed":true,"closedAt":"2022-07-22T06:31:53Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T11:54:25Z","labels":{"edges":[]},"author":{"login":"janwilmans","url":"https://github.com/janwilmans"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OQILR","title":"DSL Support","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HDQIx","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"This is definitely an interesting area, but at the moment isn't really one of the prioritized parts of our roadmap.\r\n\r\nUntil we are beginning to more fully explore metaprogramming, I don't think there is anything immediate we can do here, so closing as not-planned (for now).","createdAt":"2022-07-21T23:47:25Z"}},{"node":{"id":"IC_kwDOD3caBc5HFsbI","author":{"login":"PixelyIon","url":"https://github.com/PixelyIon"},"body":"Thanks for the response, good luck!","createdAt":"2022-07-22T15:12:49Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1498","body":"A major flaw with C++ that we've run into is the lack of supporting Domain-Specific Languages (DSL), it's the correct replacement for a lot of C macros. It should be noted that [Rust also implements this](https://doc.rust-lang.org/rust-by-example/macros/dsl.html#domain-specific-languages-dsls). Is there any interest in DSL support for Carbon?\r\n\r\n(P.S. The team has done an amazing job with Carbon so far)","closed":true,"closedAt":"2022-07-21T23:47:34Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T08:07:08Z","labels":{"edges":[]},"author":{"login":"PixelyIon","url":"https://github.com/PixelyIon"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OXYXG","title":"Typo in the README image containing c++ code.","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HE3E5","author":{"login":"pacion","url":"https://github.com/pacion"},"body":"What is the theme of the IDE? I can fix it.","createdAt":"2022-07-22T11:04:23Z"}},{"node":{"id":"IC_kwDOD3caBc5HE3jn","author":{"login":"PiotrekWojtowicz","url":"https://github.com/PiotrekWojtowicz"},"body":"No idea.","createdAt":"2022-07-22T11:06:42Z"}},{"node":{"id":"IC_kwDOD3caBc5HE49-","author":{"login":"pacion","url":"https://github.com/pacion"},"body":"I will try to figure it out.","createdAt":"2022-07-22T11:14:25Z"}},{"node":{"id":"IC_kwDOD3caBc5HF_Ht","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Thanks! This is fixed by #1567, and I've noted you as contributor per #1561. Copying #1561 comment though:\r\n\r\nThanks for pointing this out! We use a drive image for the canonical diagram (https://docs.google.com/drawings/d/18OlAdTwIAKlpMYZDyg3V3r244eLv0Es8spnJsrKtPL0/edit). I've fixed that and, since the resulting svg was a bit different here, created #1567 (you can see some of that if you glance at the diff of this PR, versus #1567).\r\n\r\nThe link to the drive folder is above images in the markdown, but you'd need to request contributor access with an email using DM or similar: for more info, see https://github.com/carbon-language/carbon-lang/blob/trunk/CONTRIBUTING.md#collaboration-systems","createdAt":"2022-07-22T16:37:21Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1553","body":"I think there's a typo in the README image with code comparing carbon to cpp. It's the line with `std::vector<Circle>circles = {{1.0},{2.0}}}` one } is not needed.","closed":true,"closedAt":"2022-07-22T16:37:21Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-22T09:21:45Z","labels":{"edges":[]},"author":{"login":"PiotrekWojtowicz","url":"https://github.com/PiotrekWojtowicz"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OIy8f","title":"Some ideas and best wishes.","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/1453","body":"I just came from https://isocpp.org/blog/2022/07/an-experimental-successor-to-cpp\r\nI also have some personal preference for a modern programming language. Here are some of my ideas. \r\n1, Always readable.\r\nfunction foo(return type)(param list)(other flags such as const and static and nodiscard){code}\r\nis more readable than:\r\n[[nodiscard]]auto foo(int a, int b)const{code}\r\n\r\nlambda(=)(auto e){code}\r\nis more readable than:\r\n[](auto e){code}\r\n\r\nint[] vec;\r\nis more readable than:\r\nint vec[];\r\nThis readability enhancement works both for human and compiler. After a function keyword, only a function can be parsed. If no valid function is parsed, the compiling error can come with a link to a tutorial page.\r\n\r\n2, Somewhat easy to write with a main stream keyboard.\r\ndef, var, std, cast, -=, ==, // are easy to write.\r\n->, <=>, are not easy to write.\r\nEasier to write means people can write slightly longer with less time. This also may contribute to readability.\r\n\r\n3, Always Dedicated Scope.\r\nAs mentioned in the 1, a function definition always starts with the keyword function. Lambda expressions start with lambda, variable definitions start with var or anything you prefer.\r\nThe top default scope accepts only namespace keyword. Then nested namespace or class or functions. In this way, the tutorial is possible to cover every detail in this language. Otherwise people have to search a lot in youtube and stackoverflow. You should not rely on the community to provide enough tutorial.\r\nAn example, in class scope, it's not possible to write any math definition, so\r\nsome_name * other_name;\r\nis always a variable definition. No need to add a typename keyword or class keyword in front of it.\r\n\r\nIf the nesting relationship is like:\r\nnamespace\r\n-variable\r\n-function\r\n-class\r\n--function inside class\r\n--variable inside class\r\nThe tutorial can also be organized in this way. It's possible for people to systematically learn the language.\r\n\r\n4, Always tell the reason you design a feature and how it is supposed to be used in the documentations.\r\nDon't force people to guess.\r\n\r\n5, Never encourage the combination of features.\r\nEnforce people to do everything with feature and grammar as simple and plain as possible. Or you are heading to a blackhole where you have to invent a lot new feature to handle all the intersections from different subsystem when they combine. Also, less content means faster and easier to learn.\r\nYou can tell people, the plain code is guaranteed to work for at least 3 years or 10 years, while the fancy code is not guaranteed at all. If it works, it works, if it doesn't, it doesn't. This simplifies the job you are gonna do when you try upgrading Carbon. You don't have to study the super fancy situation and care that much. This reduce legacy. Things like crtp are completely gone. Or at least you didn't promise.\r\n\r\n6, Rely heavily on IDE.\r\nAdd specification for IDE in the language specification. IDE is definitely at least half of a language. Ask the IDE providers to provide super powerful intellisence.\r\nAlso, when you design the language, consider how the IDE can help.\r\n\r\n7, This language should not be new comer friendly that much.\r\nThey already have python and js and probably are very happy with these languages. \r\n\r\n8, Optional idea, maybe harmful: let people script for the compiler to control how to compile.\r\nSince constexpr is a thing, people keep struggling with this. Also, a lot language feature are added to help people move jobs to compile time as much. But this extra keyword works pretty similar to macro works in modern c++.  But if people have directly control to the compiler, this can be specified with plain code, but the code is for the compiler to run rather to be packed into the output execution file. \r\nTypescript are also making similar mistakes. They added specific keywords to help people deal with super narrow case. This leads to hidden features which are hard for people to find or systematically learn.\r\nSome examples:\r\nCase1:\r\nIn UE4, we have to add some macros like\r\nclass SomeClass{\r\nGENERATED_DEFINATION()\r\nand then all the code}\r\nBut with another layer to control how the code is compile, it can be done like:\r\n\r\n{compile_scirpt:\r\nSomeClass.add_member_variable(type::int, L\"GCIndex\", Compile_Script::variable_appending_style::default);\r\nSomeClass.add_member_variable(type::UE4Editor::DebugHook, L\"EngineHook\", Compile_Script::variable_appending_style::default);\r\nsome_common_function.foreach(SomeClass.add_function(...))\r\nAlso, this compile_scirpt thing separates c++20concepts and constrains from instruction code which may bring more readability.\r\n}\r\n//Then, outside the compile_scirpt segment, it's plain instruction code.\r\nclass SomeClass{\r\n//GENERATED_DEFINATION() macro is not needed anymore.\r\nand then all the code}\r\n\r\nThis idea may also helps the UPROPERTY like macro. Emm, This example isn't very good. \r\n\r\nCase2:\r\nThis compiling script structure also helps with readability and reduce a lot guesswork(which sucks so hard)\r\nExample:\r\n//inside a class\r\nstatic inline consteval [[nodiscard]][[some_other_flag]]auto foo()const{}\r\nvs\r\nfunction foo(){}\r\n{compile_scirpt: foo.return(\"auto\").static(true).inline(true).supress_inline_fail_warning(false).const(true).nodiscard(true).some_other_flag(true);}\r\nThe advantage is that, the sequence is very casual. People can write it in any prefered sequence. But people can't write:\r\n[[nodiscard]][[some_other_flag]]auto foo()const{}inline static consteval\r\nThis also helps with CUDA code.\r\n__global__ void cudafoo(){}\r\nvs\r\nvoid cudafoo(){}\r\n{compile_scirpt: cudafoo.cuda_global()}\r\nThis example is not very good since I can't remember all the flags. But you can do improve it.\r\n\r\nCase3:\r\nAccessibility of members. Now we have public, private, protected, friend to control the accessibility. But if we can script for the compiler, we can do anything. I personally don't like this c++accessibility feature, it's literally a macro.\r\nAn example is:\r\n{compile_scirpt: AllClass.foreach(function(auto c){\r\nif(c.has_tag(\"Engine\")||c.has_tag(\"Editor\")){\r\n  c.add_access(Actor);\r\n}\r\n}}\r\nSuper convenient. \r\n\r\n9, Rich AST and what it can do.\r\nThis idea is optional. But maybe it's the most important, I mean, the top one. \r\nI didn't learn the language, I've absolutely no idea of how it's made. I appologize for this. \r\nI guess Carbon is like:\r\nCarbon grammar >>> ast >>> machine code.\r\nThe first step is what this language about. The second step can utilize the good old job people already have done in c++.\r\nBut I would like to mention some \"rich\"ast. \r\nThe first thing it can do for us is automatically codebase upgrade. For now, most of the codebase auto upgrade scripts do the character level replacement which is very limited. But if the ast is rich enough, it's possible to generate the human readable code from ast. Then, if some upgrade script is done for the ast, it's possible to upgrade the codebase like:\r\nold code >>> ast in old version >>> ast in new version >>> new code.\r\nIn fact, in the same version , code and ast have to chance to generate mutually, if the ast is rich enough. Then all the magic can only be done with the ast. All the intellisence, all the black magic can be done only with the ast.\r\nIf codebase can always be upgraded automatically, or almost can, then we can do crazy break upgraded frequently. It's 2022, abi break every 9 years is too slow. Like playing online games with a ping of 2 hours.\r\n\r\nThe second thing rich ast can do for us, is, emmm, do you still remember languages like scratch2, blueprint in ue4, or any other non-text-based language? Rich ast is probably a great interface for all these techs. Maybe one day, people decide to make some GUI version for Carbon, maybe node base, maybe scratch2-like, if the interface compacts directly to rich ast, it's possible to generate the whole thing into text and edit with some text based IDE. While some other IDE may provide both text and GUI editor for Carbon. \r\nAlso, if some other people decide to invent their grammar, then different language can share the same rich ast and translates automatically in any direction. This can lead to a boom, people can choose from them. This speeds up the evolution of programming languages.\r\n\r\nThe third, the most important reason, is some scifi possibility.\r\nSince Neuralink has a chance to really invent some production level BCI, people may one day edit the ast directly. If we don't need any text or GUI to interact with computer, we can do this literally. This can speed us up like several times I guess, or even dozens or hundreds of times. \r\n\r\n10, I don't know how to write this title..\r\nIf we have 4 possible grammar to cover 3 features, consider them separately, don't arrange.\r\nI didn't remember, the example is from go lang. They have 3 grammars to cover the by-copy and by-ref, and they arranged. This force people to memorize. Also this bring SURPRISE, which is bad. \r\n\r\n11, Always perfer keywords rather than ()[]{}<>~&*|\r\nIt's easier to google. Literally.\r\nIf someone doesn't know lambda expression in c++, how would s/he search for the info on google? S/he has to describe what's in there, like, \"what is square brackets followed by parenthesis and curly braces with some code inside it in c++\". If google recognises it, it's good. But this is usually not possible for non-English speakers. I'm Chinese, this case happened to me so many times and it was so painful. \r\nThis also leads to the idea always start a scope with keywords rather than symbols, except for some most classic and simple ones.\r\nNot everyone can use English well enough. Please make their lives easier. I really appreciate.\r\n\r\nYeah, thank you for your time. I hope this helps.","closed":true,"closedAt":"2022-07-22T18:16:25Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-20T11:49:31Z","labels":{"edges":[]},"author":{"login":"YagaoDirac","url":"https://github.com/YagaoDirac"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OHWvU","title":"OpenMP support","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HGUzc","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Definitely interested in exploring what the parallel programming model is for Carbon. Would be really nice to have a very clean integration with existing OpenMP stacks as you mention.\r\n\r\nBut I suspect this is just a long way away right now. Closing this as \"not planned\" in the short term at least to keep our issue tracker clean.","createdAt":"2022-07-22T18:37:17Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1447","body":"OpenMP is a simple way to parallelize programs on shared-memory systems. It found many applications in scientific code like GROMACS (https://github.com/gromacs/gromacs), lammps (https://github.com/lammps/lammps), QMCPACK (https://github.com/QMCPACK/qmcpack), Elemental (https://github.com/elemental/Elemental) and so on, where the performance is critical.\r\n\r\nSo, it would be excellent, when C++ → **Carbon** is, to have an OpenMP support in Carbon language.","closed":true,"closedAt":"2022-07-22T18:37:17Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-20T07:08:22Z","labels":{"edges":[]},"author":{"login":"foxtran","url":"https://github.com/foxtran"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OYTg6","title":" window kernel driver","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HGp-z","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Carbon isn't ready for use yet: https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/faq.md#how-soon-can-we-use-carbon","createdAt":"2022-07-22T20:53:21Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1564","body":"how to build window kernel driver","closed":true,"closedAt":"2022-07-22T20:53:21Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-22T13:14:06Z","labels":{"edges":[]},"author":{"login":"ddkwork","url":"https://github.com/ddkwork"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OR_aR","title":"Linker error during build","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HCvwb","author":{"login":"Jark5455","url":"https://github.com/Jark5455"},"body":"I was told on the discord server only llvm v12 works try this [https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/contribution_tools.md#clang-and-llvm](https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/contribution_tools.md#clang-and-llvm) ","createdAt":"2022-07-21T20:27:49Z"}},{"node":{"id":"IC_kwDOD3caBc5HCx7q","author":{"login":"xmine64","url":"https://github.com/xmine64"},"body":"I'll retry with llvm-12, thanks","createdAt":"2022-07-21T20:39:03Z"}},{"node":{"id":"IC_kwDOD3caBc5HDjmu","author":{"login":"Jark5455","url":"https://github.com/Jark5455"},"body":"After further testing on my part, the previous statement I made was completely false, it runs perfectly fine on llvm v14","createdAt":"2022-07-22T02:27:51Z"}},{"node":{"id":"IC_kwDOD3caBc5HEJZZ","author":{"login":"xmine64","url":"https://github.com/xmine64"},"body":"Then why it's not working for me? What should I do?","createdAt":"2022-07-22T07:25:57Z"}},{"node":{"id":"IC_kwDOD3caBc5HEKcc","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Have you installed LLVM with Homebrew?\r\n\r\nIf not, see these instructions to get more help with building things: https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/contribution_tools.md#:~:text=If%20issues%20continue%2C%20please%20ask%20on%20%23build%2Dhelp%2C%20providing%20the%20output%20of%20the%20following%20diagnostic%20commands%3A","createdAt":"2022-07-22T07:31:36Z"}},{"node":{"id":"IC_kwDOD3caBc5HELK8","author":{"login":"xmine64","url":"https://github.com/xmine64"},"body":"> Have you installed LLVM with Homebrew?\r\n\r\nNo I used the default package manager of my distro.","createdAt":"2022-07-22T07:35:30Z"}},{"node":{"id":"IC_kwDOD3caBc5HENle","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"As outlined in our documentation, right now we suggest using Homebrew. The distro installations have not proven to be sufficiently consistent in how they install all the tools to get a reliable build.","createdAt":"2022-07-22T07:48:20Z"}},{"node":{"id":"IC_kwDOD3caBc5HEQ3E","author":{"login":"xmine64","url":"https://github.com/xmine64"},"body":"Thanks for explaining.","createdAt":"2022-07-22T08:05:22Z"}},{"node":{"id":"IC_kwDOD3caBc5HERi7","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Resolving as the Homebrew approach seems to be working. Please reopen (or ask for help on Discord) if you have more issues!","createdAt":"2022-07-22T08:08:48Z"}},{"node":{"id":"IC_kwDOD3caBc5HGqCq","author":{"login":"xmine64","url":"https://github.com/xmine64"},"body":"Fixed when using brew's llvm build, thanks","createdAt":"2022-07-22T20:53:47Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1514","body":"Hi I tried to build Carbon but I got error at the end of build.\r\n\r\nI have bazelisk, llvm v14, bison, m4 and [libunwind-carbon](https://aur.archlinux.org/packages/libunwind-carbon) on my system.\r\n\r\n<details>\r\n    <summary>Build Log</summary>\r\n\r\n```\r\nINFO: Invocation ID: e7235bf6-8529-4310-b5a1-e05607a4b78e\r\nINFO: Analyzed target //explorer:explorer (67 packages loaded, 1560 targets configured).\r\nINFO: Found 1 target...\r\nERROR: /home/xmine/repos/carbon-lang/explorer/BUILD:31:10: Linking explorer/explorer failed: (Exit 1): clang++ failed: error executing command /usr/bin/clang++ @bazel-out/k8-fastbuild/bin/explorer/explorer-2.params\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox\r\nld.lld: error: undefined symbol: typeinfo for __cxxabiv1::__si_class_type_info\r\n>>> referenced by ubsan_type_hash_itanium.cpp.o:(findBaseAtOffset(__cxxabiv1::__class_type_info const*, long)) in archive /usr/lib/clang/14.0.6/lib/linux/libclang_rt.asan_cxx-x86_64.a\r\n>>> referenced by ubsan_type_hash_itanium.cpp.o:(isDerivedFromAtOffset(__cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, long)) in archive /usr/lib/clang/14.0.6/lib/linux/libclang_rt.asan_cxx-x86_64.a\r\n\r\nld.lld: error: undefined symbol: typeinfo for __cxxabiv1::__class_type_info\r\n>>> referenced by ubsan_type_hash_itanium.cpp.o:(findBaseAtOffset(__cxxabiv1::__class_type_info const*, long)) in archive /usr/lib/clang/14.0.6/lib/linux/libclang_rt.asan_cxx-x86_64.a\r\n>>> referenced by ubsan_type_hash_itanium.cpp.o:(isDerivedFromAtOffset(__cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, long)) in archive /usr/lib/clang/14.0.6/lib/linux/libclang_rt.asan_cxx-x86_64.a\r\n>>> referenced by ubsan_type_hash_itanium.cpp.o:(isDerivedFromAtOffset(__cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, long)) in archive /usr/lib/clang/14.0.6/lib/linux/libclang_rt.asan_cxx-x86_64.a\r\n>>> referenced 1 more times\r\n\r\nld.lld: error: undefined symbol: __dynamic_cast\r\n>>> referenced by ubsan_type_hash_itanium.cpp.o:(findBaseAtOffset(__cxxabiv1::__class_type_info const*, long)) in archive /usr/lib/clang/14.0.6/lib/linux/libclang_rt.asan_cxx-x86_64.a\r\n>>> referenced by ubsan_type_hash_itanium.cpp.o:(findBaseAtOffset(__cxxabiv1::__class_type_info const*, long)) in archive /usr/lib/clang/14.0.6/lib/linux/libclang_rt.asan_cxx-x86_64.a\r\n>>> referenced by ubsan_type_hash_itanium.cpp.o:(isDerivedFromAtOffset(__cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, long)) in archive /usr/lib/clang/14.0.6/lib/linux/libclang_rt.asan_cxx-x86_64.a\r\n>>> referenced 2 more times\r\n\r\nld.lld: error: undefined symbol: typeinfo for __cxxabiv1::__vmi_class_type_info\r\n>>> referenced by ubsan_type_hash_itanium.cpp.o:(findBaseAtOffset(__cxxabiv1::__class_type_info const*, long)) in archive /usr/lib/clang/14.0.6/lib/linux/libclang_rt.asan_cxx-x86_64.a\r\n>>> referenced by ubsan_type_hash_itanium.cpp.o:(isDerivedFromAtOffset(__cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, long)) in archive /usr/lib/clang/14.0.6/lib/linux/libclang_rt.asan_cxx-x86_64.a\r\n\r\nld.lld: error: undefined symbol: typeinfo for std::type_info\r\n>>> referenced by ubsan_type_hash_itanium.cpp.o:(__ubsan::checkDynamicType(void*, void*, unsigned long)) in archive /usr/lib/clang/14.0.6/lib/linux/libclang_rt.asan_cxx-x86_64.a\r\n\r\nld.lld: error: undefined symbol: __cxa_begin_catch\r\n>>> referenced by main_bin.cpp\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/explorer/main_bin.pic.o:(__clang_call_terminate)\r\n>>> referenced by parser.cpp:2886 (bazel-out/k8-fastbuild/bin/explorer/syntax/parser.cpp:2886)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/syntax/_objs/syntax/parser.pic.o:(Carbon::Parser::parse())\r\n>>> referenced by parser.cpp:1099 (bazel-out/k8-fastbuild/bin/explorer/syntax/parser.cpp:1099)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/syntax/_objs/syntax/parser.pic.o:(Carbon::Parser::parse())\r\n>>> referenced 112 more times\r\n\r\nld.lld: error: undefined symbol: std::terminate()\r\n>>> referenced by main_bin.cpp\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/explorer/main_bin.pic.o:(__clang_call_terminate)\r\n>>> referenced by thread.h:92 (external/llvm-project/llvm/include/llvm/Support/thread.h:92)\r\n>>>               bazel-out/k8-fastbuild/bin/external/llvm-project/llvm/_objs/Support/CrashRecoveryContext.pic.o:(llvm::thread::~thread())\r\n>>> referenced by exception.cpp.o:(std::nested_exception::rethrow_nested() const) in archive /usr/bin/../lib/libc++.a\r\n>>> referenced 2 more times\r\n\r\nld.lld: error: undefined symbol: vtable for __cxxabiv1::__function_type_info\r\n>>> referenced by main_bin.cpp\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/explorer/main_bin.pic.o:(typeinfo for int (int, char**))\r\n>>> referenced by main.cpp\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(typeinfo for int (llvm::StringRef, int, char**))\r\n>>> referenced by main.cpp\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(typeinfo for Carbon::ErrorOr<Carbon::Success> (llvm::StringRef, int, char**))\r\n>>> referenced 1575 more times\r\n>>> the vtable symbol may be undefined because the class is missing its key function (see https://lld.llvm.org/missingkeyfunction)\r\n\r\nld.lld: error: undefined symbol: __gxx_personality_v0\r\n>>> referenced by main_bin.cpp\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/explorer/main_bin.pic.o:(DW.ref.__gxx_personality_v0)\r\n\r\nld.lld: error: undefined symbol: __cxa_allocate_exception\r\n>>> referenced by stdexcept:256 (/usr/bin/../include/c++/v1/stdexcept:256)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(std::__1::__throw_length_error(char const*))\r\n>>> referenced by stdexcept:267 (/usr/bin/../include/c++/v1/stdexcept:267)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(std::__1::__throw_out_of_range(char const*))\r\n>>> referenced by variant:256 (/usr/bin/../include/c++/v1/variant:256)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(std::__1::__throw_bad_variant_access())\r\n>>> referenced 45 more times\r\n\r\nld.lld: error: undefined symbol: typeinfo for std::length_error\r\n>>> referenced by stdexcept:256 (/usr/bin/../include/c++/v1/stdexcept:256)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(std::__1::__throw_length_error(char const*))\r\n>>> referenced by SmallVector.cpp:68 (/proc/self/cwd/external/llvm-project/llvm/lib/Support/SmallVector.cpp:68)\r\n>>>               bazel-out/k8-fastbuild/bin/external/llvm-project/llvm/_objs/Support/SmallVector.pic.o:(report_size_overflow(unsigned long, unsigned long))\r\n>>> referenced by SmallVector.cpp:82 (/proc/self/cwd/external/llvm-project/llvm/lib/Support/SmallVector.cpp:82)\r\n>>>               bazel-out/k8-fastbuild/bin/external/llvm-project/llvm/_objs/Support/SmallVector.pic.o:(report_at_maximum_capacity(unsigned long))\r\n\r\nld.lld: error: undefined symbol: std::length_error::~length_error()\r\n>>> referenced by stdexcept:256 (/usr/bin/../include/c++/v1/stdexcept:256)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(std::__1::__throw_length_error(char const*))\r\n>>> referenced by SmallVector.cpp:68 (/proc/self/cwd/external/llvm-project/llvm/lib/Support/SmallVector.cpp:68)\r\n>>>               bazel-out/k8-fastbuild/bin/external/llvm-project/llvm/_objs/Support/SmallVector.pic.o:(report_size_overflow(unsigned long, unsigned long))\r\n>>> referenced by SmallVector.cpp:82 (/proc/self/cwd/external/llvm-project/llvm/lib/Support/SmallVector.cpp:82)\r\n>>>               bazel-out/k8-fastbuild/bin/external/llvm-project/llvm/_objs/Support/SmallVector.pic.o:(report_at_maximum_capacity(unsigned long))\r\n\r\nld.lld: error: undefined symbol: __cxa_free_exception\r\n>>> referenced by stdexcept:256 (/usr/bin/../include/c++/v1/stdexcept:256)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(std::__1::__throw_length_error(char const*))\r\n>>> referenced by stdexcept:267 (/usr/bin/../include/c++/v1/stdexcept:267)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(std::__1::__throw_out_of_range(char const*))\r\n>>> referenced by SmallVector.cpp:68 (/proc/self/cwd/external/llvm-project/llvm/lib/Support/SmallVector.cpp:68)\r\n>>>               bazel-out/k8-fastbuild/bin/external/llvm-project/llvm/_objs/Support/SmallVector.pic.o:(report_size_overflow(unsigned long, unsigned long))\r\n>>> referenced 23 more times\r\n\r\nld.lld: error: undefined symbol: vtable for std::length_error\r\n>>> referenced by stdexcept:153 (/usr/bin/../include/c++/v1/stdexcept:153)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(std::length_error::length_error(char const*))\r\n>>> referenced by stdexcept:152 (/usr/bin/../include/c++/v1/stdexcept:152)\r\n>>>               bazel-out/k8-fastbuild/bin/external/llvm-project/llvm/_objs/Support/SmallVector.pic.o:(report_size_overflow(unsigned long, unsigned long))\r\n>>> referenced by stdexcept:152 (/usr/bin/../include/c++/v1/stdexcept:152)\r\n>>>               bazel-out/k8-fastbuild/bin/external/llvm-project/llvm/_objs/Support/SmallVector.pic.o:(report_at_maximum_capacity(unsigned long))\r\n>>> the vtable symbol may be undefined because the class is missing its key function (see https://lld.llvm.org/missingkeyfunction)\r\n\r\nld.lld: error: undefined symbol: typeinfo for std::out_of_range\r\n>>> referenced by stdexcept:267 (/usr/bin/../include/c++/v1/stdexcept:267)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(std::__1::__throw_out_of_range(char const*))\r\n>>> referenced by string.cpp.o:(std::__1::stoi(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*, int)) in archive /usr/bin/../lib/libc++.a\r\n>>> referenced by string.cpp.o:(std::__1::stoi(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long*, int)) in archive /usr/bin/../lib/libc++.a\r\n>>> referenced 14 more times\r\n\r\nld.lld: error: undefined symbol: std::out_of_range::~out_of_range()\r\n>>> referenced by stdexcept:267 (/usr/bin/../include/c++/v1/stdexcept:267)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(std::__1::__throw_out_of_range(char const*))\r\n>>> referenced by string.cpp.o:(std::__1::stoi(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*, int)) in archive /usr/bin/../lib/libc++.a\r\n>>> referenced by string.cpp.o:(std::__1::stoi(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long*, int)) in archive /usr/bin/../lib/libc++.a\r\n>>> referenced 14 more times\r\n\r\nld.lld: error: undefined symbol: vtable for std::out_of_range\r\n>>> referenced by stdexcept:165 (/usr/bin/../include/c++/v1/stdexcept:165)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(std::out_of_range::out_of_range(char const*))\r\n>>> referenced by string.cpp.o:(std::__1::stoi(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*, int)) in archive /usr/bin/../lib/libc++.a\r\n>>> referenced by string.cpp.o:(std::__1::stoi(std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, unsigned long*, int)) in archive /usr/bin/../lib/libc++.a\r\n>>> referenced 14 more times\r\n>>> the vtable symbol may be undefined because the class is missing its key function (see https://lld.llvm.org/missingkeyfunction)\r\n\r\nld.lld: error: undefined symbol: std::exception::~exception()\r\n>>> referenced by variant:256 (/usr/bin/../include/c++/v1/variant:256)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(std::__1::__throw_bad_variant_access())\r\n>>> referenced by function.h:58 (/usr/bin/../include/c++/v1/__functional/function.h:58)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/interpreter/_objs/type_checker/type_checker.pic.o:(std::__1::__throw_bad_function_call())\r\n>>> referenced by function.h:46 (/usr/bin/../include/c++/v1/__functional/function.h:46)\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/interpreter/_objs/type_checker/type_checker.pic.o:(std::__1::bad_function_call::~bad_function_call())\r\n>>> referenced 11 more times\r\n\r\nld.lld: error: undefined symbol: vtable for __cxxabiv1::__si_class_type_info\r\n>>> referenced by main.cpp\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(typeinfo for std::__1::_C_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >)\r\n>>> referenced by main.cpp\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(typeinfo for llvm::cl::OptionValueCopy<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >)\r\n>>> referenced by main.cpp\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(typeinfo for std::__1::__function::__func<llvm::cl::opt<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, false, llvm::cl::parser<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&), std::__1::allocator<llvm::cl::opt<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, false, llvm::cl::parser<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>, void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>)\r\n>>> referenced 500 more times\r\n>>> the vtable symbol may be undefined because the class is missing its key function (see https://lld.llvm.org/missingkeyfunction)\r\n\r\nld.lld: error: undefined symbol: vtable for __cxxabiv1::__class_type_info\r\n>>> referenced by main.cpp\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(typeinfo for std::__1::__function::__base<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>)\r\n>>> referenced by main.cpp\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(typeinfo for llvm::cl::opt<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, false, llvm::cl::parser<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&))\r\n>>> referenced by main.cpp\r\n>>>               bazel-out/k8-fastbuild/bin/explorer/_objs/main/main.pic.o:(typeinfo for std::__1::__function::__base<void (bool const&)>)\r\n>>> referenced 129 more times\r\n>>> the vtable symbol may be undefined because the class is missing its key function (see https://lld.llvm.org/missingkeyfunction)\r\n\r\nld.lld: error: too many errors emitted, stopping now (use -error-limit=0 to see all errors)\r\nclang++: error: linker command failed with exit code 1 (use -v to see invocation)\r\nTarget //explorer:explorer failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 4.145s, Critical Path: 0.29s\r\nINFO: 2 processes: 2 internal.\r\nFAILED: Build did NOT complete successfully\r\nFAILED: Build did NOT complete successfully\r\n```\r\n\r\n</details>","closed":true,"closedAt":"2022-07-22T08:08:48Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T14:20:08Z","labels":{"edges":[]},"author":{"login":"xmine64","url":"https://github.com/xmine64"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OZyyW","title":"Linux build fails; libunwind installed but not found","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HGrmH","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"It looks like you're using a system-installed clang. Please see https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/contribution_tools.md#troubleshooting-build-issues, it includes some explanation and suggestions.","createdAt":"2022-07-22T21:04:22Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1576","body":"It looks like it's trying to use docker? why?\r\n```console\r\n[tate@archbook carbon-lang]$ bazel run //explorer -- ./explorer/testdata/print/format_only.carbon\r\nINFO: Invocation ID: 8bd7620a-1c33-49b5-93a4-765f5a6ca013\r\nWARNING: Download from https://mirror.bazel.build/ftp.gnu.org/gnu/m4/m4-1.4.18.tar.xz failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nWARNING: Download from https://mirror.bazel.build/github.com/jmillikin/rules_m4/releases/download/v0.1/m4-gnulib-788db09a9f88abbef73c97e8d7291c40455336d8.tar.xz failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nWARNING: Download from https://mirror.bazel.build/ftp.gnu.org/gnu/bison/bison-3.3.2.tar.xz failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nWARNING: Download from https://mirror.bazel.build/github.com/jmillikin/rules_bison/releases/download/v0.1/bison-gnulib-788db09a9f88abbef73c97e8d7291c40455336d8.tar.xz failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nINFO: Analyzed target //explorer:explorer (0 packages loaded, 0 targets configured).\r\nINFO: Found 1 target...\r\nERROR: /home/tate/.cache/bazel/_bazel_tate/fc53a0454a359399932c0941577a1a4c/external/flex_v2.6.4/bin/BUILD.bazel:8:10: Linking external/flex_v2.6.4/bin/flex [for host] failed: (Exit 1): clang++ failed: error executing command /usr/bin/clang++ @bazel-out/host/bin/external/flex_v2.6.4/bin/flex-2.params\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox and retain the sandbox build root for debugging\r\nld.lld: error: unable to find library -l:libunwind.a\r\nld.lld: error: unable to find library -l:libunwind.a\r\nclang++: error: linker command failed with exit code 1 (use -v to see invocation)\r\nTarget //explorer:explorer failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 0,371s, Critical Path: 0,19s\r\nINFO: 9 processes: 9 internal.\r\nFAILED: Build did NOT complete successfully\r\nFAILED: Build did NOT complete successfully\r\n[tate@archbook carbon-lang]$ bazel run //explorer --sandbox_debug --verbose_failures -- ./explorer/testdata/print/format_only.carbon --verbose_failures\r\nINFO: Invocation ID: e1dda140-d2e6-4340-81c7-5f0f6e4ea72c\r\nWARNING: Download from https://mirror.bazel.build/ftp.gnu.org/gnu/m4/m4-1.4.18.tar.xz failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nWARNING: Download from https://mirror.bazel.build/github.com/jmillikin/rules_m4/releases/download/v0.1/m4-gnulib-788db09a9f88abbef73c97e8d7291c40455336d8.tar.xz failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nWARNING: Download from https://mirror.bazel.build/ftp.gnu.org/gnu/bison/bison-3.3.2.tar.xz failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nWARNING: Download from https://mirror.bazel.build/github.com/jmillikin/rules_bison/releases/download/v0.1/bison-gnulib-788db09a9f88abbef73c97e8d7291c40455336d8.tar.xz failed: class java.io.FileNotFoundException GET returned 404 Not Found\r\nINFO: Analyzed target //explorer:explorer (0 packages loaded, 0 targets configured).\r\nINFO: Found 1 target...\r\nERROR: /home/tate/.cache/bazel/_bazel_tate/fc53a0454a359399932c0941577a1a4c/external/flex_v2.6.4/bin/BUILD.bazel:8:10: Linking external/flex_v2.6.4/bin/flex [for host] failed: (Exit 1): linux-sandbox failed: error executing command \r\n  (cd /home/tate/.cache/bazel/_bazel_tate/fc53a0454a359399932c0941577a1a4c/sandbox/linux-sandbox/272/execroot/carbon && \\\r\n  exec env - \\\r\n    PATH=/home/tate/.local/bin:/home/tate/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/lib/emscripten:/usr/lib/jvm/default/bin \\\r\n    PWD=/proc/self/cwd \\\r\n    TMPDIR=/tmp \\\r\n  /home/tate/.cache/bazel/_bazel_tate/install/b39f3e16db66640365c31788006a9ee4/linux-sandbox -t 15 -w /home/tate/.cache/bazel/_bazel_tate/fc53a0454a359399932c0941577a1a4c/sandbox/linux-sandbox/272/execroot/carbon -w /tmp -w /dev/shm -D -- /usr/bin/clang++ @bazel-out/host/bin/external/flex_v2.6.4/bin/flex-2.params)\r\n1658520926.087739445: src/main/tools/linux-sandbox.cc:152: calling pipe(2)...\r\n1658520926.087844540: src/main/tools/linux-sandbox.cc:171: calling clone(2)...\r\n1658520926.088205939: src/main/tools/linux-sandbox.cc:180: linux-sandbox-pid1 has PID 380653\r\n1658520926.088295102: src/main/tools/linux-sandbox-pid1.cc:641: Pid1Main started\r\n1658520926.088474187: src/main/tools/linux-sandbox.cc:197: done manipulating pipes\r\n1658520926.088711583: src/main/tools/linux-sandbox-pid1.cc:260: working dir: /home/tate/.cache/bazel/_bazel_tate/fc53a0454a359399932c0941577a1a4c/sandbox/linux-sandbox/272/execroot/carbon\r\n1658520926.088739957: src/main/tools/linux-sandbox-pid1.cc:292: writable: /home/tate/.cache/bazel/_bazel_tate/fc53a0454a359399932c0941577a1a4c/sandbox/linux-sandbox/272/execroot/carbon\r\n1658520926.088758130: src/main/tools/linux-sandbox-pid1.cc:292: writable: /tmp\r\n1658520926.088772668: src/main/tools/linux-sandbox-pid1.cc:292: writable: /dev/shm\r\n1658520926.088894951: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /\r\n1658520926.088914117: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /dev\r\n1658520926.088927050: src/main/tools/linux-sandbox-pid1.cc:362: remount rw: /dev/shm\r\n1658520926.088939815: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /dev/pts\r\n1658520926.088951857: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /dev/hugepages\r\n1658520926.088964102: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /dev/mqueue\r\n1658520926.088975180: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /proc\r\n1658520926.088987919: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /proc/sys/fs/binfmt_misc\r\n1658520926.089008460: src/main/tools/linux-sandbox-pid1.cc:382: remount(nullptr, /proc/sys/fs/binfmt_misc, nullptr, 2101281, nullptr) failure (Operation not permitted) ignored\r\n1658520926.089022270: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /proc/sys/fs/binfmt_misc\r\n1658520926.089035810: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /sys\r\n1658520926.089047547: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /sys/firmware/efi/efivars\r\n1658520926.089064112: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /sys/kernel/security\r\n1658520926.089080297: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /sys/fs/cgroup\r\n1658520926.089094933: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /sys/fs/cgroup/net_cls\r\n1658520926.089149801: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /sys/fs/pstore\r\n1658520926.089167482: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /sys/fs/bpf\r\n1658520926.089180983: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /sys/kernel/debug\r\n1658520926.089194927: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /sys/kernel/tracing\r\n1658520926.089208418: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /sys/kernel/config\r\n1658520926.089221032: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /sys/fs/fuse/connections\r\n1658520926.089236494: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /run\r\n1658520926.089248603: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /run/credentials/systemd-sysusers.service\r\n1658520926.089261308: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /run/docker/netns/7d4cc0ef2936\r\n1658520926.089270290: src/main/tools/linux-sandbox-pid1.cc:382: remount(nullptr, /run/docker/netns/7d4cc0ef2936, nullptr, 4129, nullptr) failure (Permission denied) ignored\r\n1658520926.089278785: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /run/docker/netns/e36acdb065a9\r\n1658520926.089286544: src/main/tools/linux-sandbox-pid1.cc:382: remount(nullptr, /run/docker/netns/e36acdb065a9, nullptr, 4129, nullptr) failure (Permission denied) ignored\r\n1658520926.089295942: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /run/user/1000\r\n1658520926.089309149: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /run/user/1000/gvfs\r\n1658520926.089321712: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /run/user/1000/doc\r\n1658520926.089369441: src/main/tools/linux-sandbox-pid1.cc:362: remount rw: /tmp\r\n1658520926.089385308: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /boot/efi\r\n1658520926.089452439: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /var/lib/docker/overlay2/c3d872b92dd04568b2fc12f8a38c079e68b758e2eda45658c9e35474f22556fe/merged\r\n1658520926.089465227: src/main/tools/linux-sandbox-pid1.cc:382: remount(nullptr, /var/lib/docker/overlay2/c3d872b92dd04568b2fc12f8a38c079e68b758e2eda45658c9e35474f22556fe/merged, nullptr, 2101281, nullptr) failure (Permission denied) ignored\r\n1658520926.089497295: src/main/tools/linux-sandbox-pid1.cc:362: remount ro: /var/lib/docker/overlay2/b5398bb7db8a25aad269fce11371f3bd9656a2db88c7f0a5633942c63f2112fe/merged\r\n1658520926.089507771: src/main/tools/linux-sandbox-pid1.cc:382: remount(nullptr, /var/lib/docker/overlay2/b5398bb7db8a25aad269fce11371f3bd9656a2db88c7f0a5633942c63f2112fe/merged, nullptr, 2101281, nullptr) failure (Permission denied) ignored\r\n1658520926.089518441: src/main/tools/linux-sandbox-pid1.cc:362: remount rw: /home/tate/.cache/bazel/_bazel_tate/fc53a0454a359399932c0941577a1a4c/sandbox/linux-sandbox/272/execroot/carbon\r\n1658520926.089532373: src/main/tools/linux-sandbox-pid1.cc:362: remount rw: /home/tate/.cache/bazel/_bazel_tate/fc53a0454a359399932c0941577a1a4c/sandbox/linux-sandbox/272/execroot/carbon\r\n1658520926.089545365: src/main/tools/linux-sandbox-pid1.cc:362: remount rw: /tmp\r\n1658520926.089556446: src/main/tools/linux-sandbox-pid1.cc:362: remount rw: /dev/shm\r\n1658520926.089621008: src/main/tools/linux-sandbox-pid1.cc:451: calling fork...\r\n1658520926.089817206: src/main/tools/linux-sandbox-pid1.cc:481: child started with PID 2\r\nld.lld: error: unable to find library -l:libunwind.a\r\nld.lld: error: unable to find library -l:libunwind.a\r\nclang++: error: linker command failed with exit code 1 (use -v to see invocation)\r\n1658520926.157636635: src/main/tools/linux-sandbox-pid1.cc:498: wait returned pid=2, status=0x100\r\n1658520926.157659786: src/main/tools/linux-sandbox-pid1.cc:516: child exited normally with code 1\r\n1658520926.158214537: src/main/tools/linux-sandbox.cc:233: child exited normally with code 1\r\nTarget //explorer:explorer failed to build\r\nINFO: Elapsed time: 6,346s, Critical Path: 6,18s\r\nINFO: 9 processes: 9 internal.\r\nFAILED: Build did NOT complete successfully\r\nFAILED: Build did NOT complete successfully\r\n[tate@archbook carbon-lang]$ uname -a\r\nLinux archbook 5.18.11-arch1-1 #1 SMP PREEMPT_DYNAMIC Tue, 12 Jul 2022 15:40:51 +0000 x86_64 GNU/Linux\r\n[tate@archbook carbon-lang]$ LANG=en pacman -Ss libunwind\r\nextra/libunwind 1.6.2-1 [installed]\r\n    Portable and efficient C programming interface (API) to determine the call-chain of a program\r\nmultilib/lib32-libunwind 1.6.2-1 [installed]\r\n    Portable and efficient C programming interface (API) to determine the call-chain of a program (32-bit)\r\n```","closed":true,"closedAt":"2022-07-22T21:04:22Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-22T20:18:04Z","labels":{"edges":[]},"author":{"login":"dvtate","url":"https://github.com/dvtate"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OZ32T","title":"[Question] Website","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HGqYI","author":{"login":"davidzchen","url":"https://github.com/davidzchen"},"body":"Great!\r\n\r\nThere is an ongoing discussion on the website in #1492.","createdAt":"2022-07-22T20:56:08Z"}},{"node":{"id":"IC_kwDOD3caBc5HGr74","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Duplicate of #1492 ","createdAt":"2022-07-22T21:06:45Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1579","body":"Is there any provision for creating a website, I am willing to help. \r\n\r\nhttps://docusaurus.io/docs","closed":true,"closedAt":"2022-07-22T21:06:51Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-22T20:47:43Z","labels":{"edges":[]},"author":{"login":"joaodematejr","url":"https://github.com/joaodematejr"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OTpNY","title":"Roslyn like Compiler as Library/Service? Ease of Platform portability?","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HERCy","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"As we don't have a concrete compiler fully implemented yet, these questions may just be too early for us to usefully answer.\r\n\r\nLLVM's IR is reasonably portable, but I also don't think anyone wants to end up with a language design that *cannot* be ported to other code generation layers.\r\n\r\nAt the moment, our focus is on actually reaching the MVP design and then implementation that lets us evaluate the *direction* of Carbon, and not so much on the detailed platform support story outlined here. So I think for now, this is probably \"not planned\". But if there is something you (or anyone else) thinks should be addressed in the short term, please re-open with details.","createdAt":"2022-07-22T08:06:15Z"}},{"node":{"id":"IC_kwDOD3caBc5HGtBO","author":{"login":"zezba9000","url":"https://github.com/zezba9000"},"body":"At min I would stress exposing the compiler parts as libraries to be consumed in the language itself after bootstrapping earlier than later as the benefits can't be stressed enough. Locking a compiler so its only communication layer is STDIO as say Git-Core does is the biggest pain in the ass for tooling software.\r\n\r\nAnyway thanks for response :)","createdAt":"2022-07-22T21:14:22Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1528","body":"Does compiler allow it to be used in the lang itself and let me pull syntax from external projects?\r\nEXAMPLE: Carbon Subset => HLSL, GLSL, etc (aka custom GPU Shader program tools)\r\n\r\nHow portable is the LLVM IR or other bytecode that comes before to port to other systems.\r\nIs the code gen emitter built on top of LLVM or can LLVM be replaced with a different output?\r\nEXAMPLE: Carbon bytecode/codegen => C89\r\nEXAMPLE: Carbon LLVM IR => C89\r\nCONCERN: LLVM is far worse on AVR chips & embedded platforms vs GCC\r\n\r\nOne thing I love about C# is it supports all of the above. I can use Roslyn to make custom C# subsets that transpile into GPU Shader programs. I can take .NET bytecode from libraries and translate it into C89 with a custom runtime.","closed":true,"closedAt":"2022-07-22T08:06:15Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-21T20:34:31Z","labels":{"edges":[]},"author":{"login":"zezba9000","url":"https://github.com/zezba9000"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OXQe3","title":"consider \"not rocket science\" over \"revert to green\"","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HGxzi","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"We'll generally try to do test prior to commit (e.g. https://github.com/carbon-language/carbon-lang/blob/trunk/.github/workflows/tests.yaml) but I'd expect decisions in the future to be nuanced. Also, even with tests, sometimes a broken change can get in. In that sense, we may revert.","createdAt":"2022-07-22T21:54:14Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1552","body":"The contribution docs currently say\r\n\r\n>The trunk branch should always stay \"green\". That means that if tests fail or if we discover bugs or errors, we revert to a \"green\" state by default, where the failure or bug is no longer present\r\n\r\nhttps://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/pull_request_workflow.md#green-tests\r\n\r\nThis wording implies that it's not exceedingly rare to actually be able to inadvertently break trunk.\r\n\r\nI suggest adapting [not rocket science rule](https://graydon2.dreamwidth.org/1597.html), popularized by Rust. The TL;DR is that `trunk` branch is updated to a new commit only *after* that specific commit passed all of the tests there are. \r\n\r\nThe difference between the two rules is mostly in degree and emphasis (even with nrsr, you might break trunk if you introduce a flaky test, and you'll have to revert it), but I think there are specific outcomes as well in adapting nrsr:\r\n\r\n* It pushes hard against splitting CI into a subset of quick tests which gate PR, and a full suite which ensures correctness. Carbon project is limited in scope, it seems like it should be possible to make the entire test suite fast enough, and having a rule which *forces* you to have fast tests seems good. \r\n* It provides psychological safety for contributors: the current warning makes me worry that I might break something, and that I (or, worse, someone else) would have to fix it. With nrsr, I can be reasonably sure that the only failure mode is my PR not being merged. \r\n* It incentivises the maintainers to cast more of the checks as automated CI tests, as CI becomes a single, centralized both in space and time, defining criteria for when the code can reach & stay in trunk.  In other words, if reverting isn't a standard option, you are forced to write a test, you can't rely on \"we'll discover bugs later\" approach as a standard tool. ","closed":true,"closedAt":"2022-07-22T21:54:14Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-22T09:05:36Z","labels":{"edges":[]},"author":{"login":"matklad","url":"https://github.com/matklad"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OaOpt","title":"need release builds","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HHBPP","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Carbon is not ready for use. Please see https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/faq.md#how-soon-can-we-use-carbon","createdAt":"2022-07-23T00:37:34Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1585","body":"","closed":true,"closedAt":"2022-07-23T00:37:34Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-23T00:00:57Z","labels":{"edges":[]},"author":{"login":"lamarrr","url":"https://github.com/lamarrr"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OaRlR","title":"what's mean `corban`? why not other name?","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HHDPa","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Carbon Language is just a name starting with `c`. There's not much more to it than that.\r\n\r\nNote, discussions would be a better place to ask questions. like this -- this is not an issue.","createdAt":"2022-07-23T01:19:37Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1589","body":"","closed":true,"closedAt":"2022-07-23T01:19:37Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-23T00:39:45Z","labels":{"edges":[]},"author":{"login":"thinkerou","url":"https://github.com/thinkerou"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OZzJa","title":"Make the compiler double pass like rust!","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HHIKE","author":{"login":"mconst","url":"https://github.com/mconst"},"body":"This looks like the same issue as #1416 -- if so, you might want to upvote that issue so we have all the upvotes in one place.  I'm closing this as a duplicate for now, but please feel free to reopen it if I've misunderstood!","createdAt":"2022-07-23T03:39:06Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1577","body":"Make the compiler double pass like rust improve a lot the developer experience!.\r\n\r\nWe can forget the forward declarations.","closed":true,"closedAt":"2022-07-23T03:39:06Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-22T20:20:14Z","labels":{"edges":[]},"author":{"login":"sirlordt","url":"https://github.com/sirlordt"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OajU9","title":"Specification commit information and Issue&PR title","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HHQ_h","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"While the convention of `[topic-area] message` is useful and good, it isn't evident to me that specifying and requiring this to be standardized is essential.\r\n\r\nWe do have guidelines for how to contribute:\r\nhttps://github.com/carbon-language/carbon-lang/blob/trunk/CONTRIBUTING.md#contribution-guidelines-and-standards\r\n\r\nIf you would like to suggest improvements that provide helpful and constructive suggestion for how folks should best write commit messages, I would suggest adding them there or to some of our other documents like: https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/pull_request_workflow.md\r\n\r\nWhile improved documentation like this is definitely exciting and welcome, not sure that an issue is useful to track this, so closing as 'not planned' for now. Thanks!","createdAt":"2022-07-23T08:29:39Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1604","body":"In order to make the commit information and Issue&PR title clear at a glance, it needs to be standardized\r\nFor example: \r\nCommit information & PR title: [README]Fix grammar errors\r\n(PS:Do not use the past tense)\r\nIssue title: [README]Grammar errors","closed":true,"closedAt":"2022-07-23T08:29:39Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-23T06:56:32Z","labels":{"edges":[]},"author":{"login":"C-BJ","url":"https://github.com/C-BJ"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5Oaglw","title":"Switch Statement","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HHRNJ","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"This doesn't seem like an issue really.\r\n\r\nSome initial, but still provisional thoughts are here:\r\nhttps://github.com/carbon-language/carbon-lang/tree/trunk/docs/design#match\r\n\r\nClosing for now as there doesn't seem to be an issue at the moment.","createdAt":"2022-07-23T08:36:23Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1601","body":"Whether the switch statement used","closed":true,"closedAt":"2022-07-23T08:36:23Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-23T05:57:18Z","labels":{"edges":[]},"author":{"login":"naveens01","url":"https://github.com/naveens01"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OJCTo","title":"Include errors when building","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HHKC3","author":{"login":"edwardlee4948","url":"https://github.com/edwardlee4948"},"body":"try homebrew(linuxbrew) https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/contribution_tools.md#clang-and-llvm","createdAt":"2022-07-23T04:39:21Z"}},{"node":{"id":"IC_kwDOD3caBc5HHRa9","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"Given WSL2 running Ubuntu, definitely expect this is covered by the section linked above.\r\n\r\nIf you need more help, I would suggest following the steps here: https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/contribution_tools.md#troubleshooting-build-issues\r\n\r\nPlease re-open this issue if the above doesn't fix your issues!","createdAt":"2022-07-23T08:43:32Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1459","body":"Like many at the moment, I'm trying to give carbon a go but I am having trouble with building the explorer. I installed bazelisk and llvm using Homebrew (as per the quickstart) but the build errors with header file issues. This is the output:\r\n\r\n```sh\r\n$ bazel run //explorer -- ./explorer/testdata/print/format_only.carbon\r\nStarting local Bazel server and connecting to it...\r\nINFO: Invocation ID: 5c9829fd-3f01-4ce6-b248-7a055460b4a3\r\nINFO: Analyzed target //explorer:explorer (67 packages loaded, 1560 targets configured).\r\nINFO: Found 1 target...\r\nERROR: /home/tyler/.cache/bazel/_bazel_tyler/5fc1f8f55d6d09e53b537dde633ed2e2/external/flex_v2.6.4/bin/BUILD.bazel:8:10: Linking external/flex_v2.6.4/bin/flex [for host] failed: (Exit 1): clang++ failed: error executing command /usr/lib/llvm-13/bin/clang++ @bazel-out/host/bin/external/flex_v2.6.4/bin/flex-2.params\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox\r\nld.lld: error: unable to find library -lc++\r\nld.lld: error: unable to find library -l:libunwind.a\r\nld.lld: error: unable to find library -l:libunwind.a\r\nclang++: error: linker command failed with exit code 1 (use -v to see invocation)\r\nERROR: /home/tyler/carbon-lang/explorer/ast/BUILD:21:11: Compiling explorer/ast/ast_rtti.cpp failed: (Exit 1): clang++ failed: error executing command /usr/lib/llvm-13/bin/clang++ -no-canonical-prefixes -fcolor-diagnostics -Werror -Wall -Wextra -Wthread-safety -Wself-assign -Wimplicit-fallthrough -Wctad-maybe-unsupported -Wno-unused-parameter -c -MD ... (remaining 86 arguments skipped)\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox\r\nIn file included from bazel-out/k8-fastbuild/bin/explorer/ast/ast_rtti.cpp:3:\r\nbazel-out/k8-fastbuild/bin/explorer/ast/ast_rtti.h:6:10: fatal error: 'string_view' file not found\r\n#include <string_view>\r\n         ^~~~~~~~~~~~~\r\n1 error generated.\r\nERROR: /home/tyler/.cache/bazel/_bazel_tyler/5fc1f8f55d6d09e53b537dde633ed2e2/external/llvm-project/llvm/BUILD.bazel:164:11: Compiling llvm/lib/Support/SmallPtrSet.cpp failed: (Exit 1): clang++ failed: error executing command /usr/lib/llvm-13/bin/clang++ -no-canonical-prefixes -fcolor-diagnostics -Werror -Wall -Wextra -Wthread-safety -Wself-assign -Wimplicit-fallthrough -Wctad-maybe-unsupported -Wno-unused-parameter -c -MD ... (remaining 82 arguments skipped)\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox\r\nIn file included from external/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:14:\r\nIn file included from external/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h:18:\r\nexternal/llvm-project/llvm/include/llvm/ADT/EpochTracker.h:21:10: fatal error: 'cstdint' file not found\r\n#include <cstdint>\r\n         ^~~~~~~~~\r\n1 error generated.\r\nERROR: /home/tyler/.cache/bazel/_bazel_tyler/5fc1f8f55d6d09e53b537dde633ed2e2/external/llvm-project/llvm/BUILD.bazel:136:11: Compiling llvm/lib/Demangle/Demangle.cpp failed: (Exit 1): clang++ failed: error executing command /usr/lib/llvm-13/bin/clang++ -no-canonical-prefixes -fcolor-diagnostics -Werror -Wall -Wextra -Wthread-safety -Wself-assign -Wimplicit-fallthrough -Wctad-maybe-unsupported -Wno-unused-parameter -c -MD ... (remaining 71 arguments skipped)\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox\r\nIn file included from external/llvm-project/llvm/lib/Demangle/Demangle.cpp:13:\r\nexternal/llvm-project/llvm/include/llvm/Demangle/Demangle.h:12:10: fatal error: 'cstddef' file not found\r\n#include <cstddef>\r\n         ^~~~~~~~~\r\n1 error generated.\r\nERROR: /home/tyler/.cache/bazel/_bazel_tyler/5fc1f8f55d6d09e53b537dde633ed2e2/external/llvm-project/llvm/BUILD.bazel:164:11: Compiling llvm/lib/Support/BuryPointer.cpp failed: (Exit 1): clang++ failed: error executing command /usr/lib/llvm-13/bin/clang++ -no-canonical-prefixes -fcolor-diagnostics -Werror -Wall -Wextra -Wthread-safety -Wself-assign -Wimplicit-fallthrough -Wctad-maybe-unsupported -Wno-unused-parameter -c -MD ... (remaining 82 arguments skipped)\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox\r\nIn file included from external/llvm-project/llvm/lib/Support/BuryPointer.cpp:9:\r\nexternal/llvm-project/llvm/include/llvm/Support/BuryPointer.h:12:10: fatal error: 'memory' file not found\r\n#include <memory>\r\n         ^~~~~~~~\r\n1 error generated.\r\nERROR: /home/tyler/.cache/bazel/_bazel_tyler/5fc1f8f55d6d09e53b537dde633ed2e2/external/llvm-project/llvm/BUILD.bazel:164:11: Compiling llvm/lib/Support/Hashing.cpp failed: (Exit 1): clang++ failed: error executing command /usr/lib/llvm-13/bin/clang++ -no-canonical-prefixes -fcolor-diagnostics -Werror -Wall -Wextra -Wthread-safety -Wself-assign -Wimplicit-fallthrough -Wctad-maybe-unsupported -Wno-unused-parameter -c -MD ... (remaining 82 arguments skipped)\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox\r\nIn file included from external/llvm-project/llvm/lib/Support/Hashing.cpp:15:\r\nIn file included from external/llvm-project/llvm/include/llvm/ADT/Hashing.h:49:\r\nexternal/llvm-project/llvm/include/llvm/Support/SwapByteOrder.h:17:10: fatal error: 'cstddef' file not found\r\n#include <cstddef>\r\n         ^~~~~~~~~\r\n1 error generated.\r\nTarget //explorer:explorer failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 3.844s, Critical Path: 0.46s\r\nINFO: 18 processes: 18 internal.\r\nFAILED: Build did NOT complete successfully\r\nFAILED: Build did NOT complete successfully\r\n```\r\n\r\nIt appears to be using the system llvm (llvm-13) which I saw someone noted on the discord as known to cause issues. Is there any way to specify which llvm location to use or another fix. Regards. \r\n\r\n## System\r\n\r\n- Windows 11\r\n- WSL2 running Ubuntu image","closed":true,"closedAt":"2022-07-23T08:43:32Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-20T12:23:40Z","labels":{"edges":[]},"author":{"login":"oraqlle","url":"https://github.com/oraqlle"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OaiyV","title":"A bold suggestion for function call syntax","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HHRGC","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"An express goal of Carbon is to remain familiar and approachable to C++ developers:\r\nhttps://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/goals.md#interoperability-with-and-migration-from-existing-c-code:~:text=Familiarity%20for%20experienced%20C%2B%2B%20developers%20with%20a%20gentle%20learning%20curve.\r\n\r\nRemoving method call syntax seems deeply incompatible with our goals, and so I don't think this is a realistic direction to consider at this point. If there is broad and powerful community interest in this (expressed with emoji reactions or other signals), we can reopen the issue. Closing as not-planned for now.","createdAt":"2022-07-23T08:32:31Z"}},{"node":{"id":"IC_kwDOD3caBc5HHSAr","author":{"login":"pache-Ak","url":"https://github.com/pache-Ak"},"body":"> An express goal of Carbon is to remain familiar and approachable to C++ developers: https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/goals.md#interoperability-with-and-migration-from-existing-c-code:~:text=Familiarity%20for%20experienced%20C%2B%2B%20developers%20with%20a%20gentle%20learning%20curve.\r\n> \r\n> Removing method call syntax seems deeply incompatible with our goals, and so I don't think this is a realistic direction to consider at this point. If there is broad and powerful community interest in this (expressed with emoji reactions or other signals), we can reopen the issue. Closing as not-planned for now.\r\n\r\n\r\nyear I agree remove method is incompatible,  but  the problem some case method can not work, such as generics and built-in-type,  we need a mechanism in language to  unify calling syntax, I mean `a.f()` and `f(a)` should be same, if `f` is a method.\r\nthis is a proposal in C++, but not become a standard. I mean we could keep `a.f()` to adapt C++, but `f(a)` can also work. \r\nlike `begin(a)` in C++ . I think this mechanism join in C++ is possible, so it join in carbon is also possible. ","createdAt":"2022-07-23T09:01:46Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1603","body":"In OOP, `a.f()` is the traditional and commonly used form, however in a language with both functions and methods, coexistence of both forms can cause some trouble.\r\n\r\nFor example, `begin(a)` and `a.begin()` are also exist in C++， in majority case, they are same, but for array(not `std::array`) only `begin(a)` is OK,  as you see, here is  a problem,  `a.f()` not suitable for all situations. This syntax means a is object has member function. But `begin(a)` don't has this restriction， This can also be a member function if the compiler supports it.  \r\n\r\nFather of C++ Bjarne Stroustrup try to unify calling syntax,  until today, it not success, maybe in c++26.  \r\n\r\nBut carbon is a new language,  has not historical baggage, we do it is easily. \r\n\r\nBetter support for generics， we  should try only agree one syntax `f(a)` , if `f` is in class, it should mean `a.f()` (we don't need this syntax). We will not need to consider a type is object or built-in type. `f(a)` for any case is OK.\r\n\r\nSupport function and method in same time will bring chaos.  Only support one is better,  for example java only has method, these questions is not exist .   **carbon** need function and method can be replaced by function. Only need we find a function is defined in class or not. \r\n\r\nIn fact, when we call a function, we don't need  know is a method or a function, even in generics we can't know it. If we only has one function call syntax it will clear.\r\n\r\nI know don't support syntax `a.f()` is hard.  There are many historical and habitual factor.  But if we need a `a.f()` in some place , `f(a)` can also work is I want. I believe it will join in C++26.  \r\n\r\nI wish we can spend some time to consider removing `a.f()` syntax. Less is better, function is enough.","closed":true,"closedAt":"2022-07-23T08:32:31Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-23T06:44:37Z","labels":{"edges":[]},"author":{"login":"pache-Ak","url":"https://github.com/pache-Ak"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5Oahyo","title":"Carbon lexer for CudaText","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HHRPu","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"I would suggest using the discussion feature of GitHub for things that aren't an issue.\r\n\r\nMore details of the language can be found in the design documentation, and the flex/bison implementation if interested.\r\n\r\nClosing this issue for now.","createdAt":"2022-07-23T08:37:54Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1602","body":"It is just info. I made the Carbon lexer for CudaText (free editor). It is in the Addon Manager as usual: Plugins / Addons Manager / Install.\r\n\r\nLexer was tested on bunch of carbon files, I guessed many keywords from context, I maybe missed some keywords.\r\nLexer shows some items in the code-tree: class, function, interface, impl.\r\n\r\nwhere can I find full list of language keywords ? Standard types? Standard modifiers (public private inline…)?","closed":true,"closedAt":"2022-07-23T08:37:54Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-23T06:22:12Z","labels":{"edges":[]},"author":{"login":"Alexey-T","url":"https://github.com/Alexey-T"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5OauQs","title":"Change the file extension (.carbon)","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HHVPf","author":{"login":"Abhijeetbyte","url":"https://github.com/Abhijeetbyte"},"body":"Indeed !","createdAt":"2022-07-23T10:44:13Z"}},{"node":{"id":"IC_kwDOD3caBc5HHVSD","author":{"login":"C-BJ","url":"https://github.com/C-BJ"},"body":"https://github.com/carbon-language/carbon-lang/issues/1574","createdAt":"2022-07-23T10:45:38Z"}},{"node":{"id":"IC_kwDOD3caBc5HHV8U","author":{"login":"robiot","url":"https://github.com/robiot"},"body":"Close this as a duplicate?","createdAt":"2022-07-23T11:06:50Z"}},{"node":{"id":"IC_kwDOD3caBc5HHWWk","author":{"login":"mconst","url":"https://github.com/mconst"},"body":"Yes, this looks like a duplicate -- let's keep the discussion (and upvotes) in #1574.  Thanks!","createdAt":"2022-07-23T11:20:55Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1611","body":"I know it is a minor issue but can you change .carbon to something shorter like .cb or .cbn if not taken. ","closed":true,"closedAt":"2022-07-23T11:20:55Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-23T10:41:12Z","labels":{"edges":[]},"author":{"login":"MamadouSDiallo","url":"https://github.com/MamadouSDiallo"},"assignees":{"edges":[]}}},{"node":{"id":"MDU6SXNzdWU5NzA1MjkxNTU=","title":"Implement raw string literals","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc459g0o","author":{"login":"github-actions","url":"https://github.com/apps/github-actions"},"body":"We triage inactive PRs and issues in order to make it easier to find active work. If this issue should remain active or becomes active again, please comment or remove the `inactive` label. The `long term` label can also be added for issues which are expected to take time.\nThis issue is labeled `inactive` because the last activity was over 90 days ago.","createdAt":"2021-11-18T01:48:38Z"}},{"node":{"id":"IC_kwDOD3caBc5HGMF7","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I'm closing this, as it's mostly done, at least as originally intended.","createdAt":"2022-07-22T17:47:36Z"}},{"node":{"id":"IC_kwDOD3caBc5HHMSb","author":{"login":"KarthikeyaThotak","url":"https://github.com/KarthikeyaThotak"},"body":"Hello Guys, I am new to this contributing to open source projects. I would like to work in this branch. Thank you in advance.","createdAt":"2022-07-23T06:00:58Z"}},{"node":{"id":"IC_kwDOD3caBc5HHYzR","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"@User-Alpine First, not everyone here likes being called a \"guy\".\r\n\r\nBut this is a closed issue. I'd suggest redirecting to either the Getting Started GitHub discussion topic, or #getting-started on Discord.","createdAt":"2022-07-23T12:38:57Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/745","body":"Tracking issue for implementing raw string literals. Note it may be good to implement block string literals first (#744) so that raw string literals can then be done covering both simple and block string literals.\r\n\r\nref: #199","closed":true,"closedAt":"2022-07-22T17:47:36Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2021-08-13T15:54:17Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzY2OTAxMDUx","color":"D3AE5D","name":"explorer"}},{"node":{"id":"MDU6TGFiZWwzMjA1OTUyNzgx","color":"bfd4f2","name":"inactive"}},{"node":{"id":"MDU6TGFiZWwzMjc3MzExMzQ0","color":"bfdadc","name":"good first issue"}}]},"author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc5Oa1be","title":"Things not working","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc5HHfY0","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"Duplicate of #1592 ","createdAt":"2022-07-23T15:51:44Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/1614","body":"Hi I found other things not working as the documentation says:\r\nFor example;\r\n```for (var name: String in names)``` will give ```unexpected VAR```. If I remove it ```for (name: String in names)``` it will give ```unexpected COLON```\r\n```Console.Print()``` in any case will give me ```syntax error, unexpected intrinsic_identifier, expecting identifier or LEFT_PARENTHESIS```\r\nI cannot do things like ```i += 1``` (like the documentation says) it will give me ```syntax error, unexpected EQUAL```\r\n\r\n#1590 ","closed":true,"closedAt":"2022-07-23T15:51:45Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2022-07-23T13:19:30Z","labels":{"edges":[]},"author":{"login":"Zhanytrix","url":"https://github.com/Zhanytrix"},"assignees":{"edges":[]}}}]}}}}