{"data":{"repository":{"id":"MDEwOlJlcG9zaXRvcnkyNTk0NjM2ODU=","url":"https://github.com/carbon-language/carbon-lang","updatedAt":"2025-01-24T04:39:44Z","createdAt":"2020-04-27T21:45:16Z","isPrivate":false,"isLocked":false,"languages":{"totalCount":19,"edges":[{"node":{"id":"MDg6TGFuZ3VhZ2U1MDY=","color":null,"name":"GDB"}},{"node":{"id":"MDg6TGFuZ3VhZ2U3NDY=","color":"#76d275","name":"Starlark"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNDU=","color":"#3572A5","name":"Python"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNDI=","color":"#f34b7d","name":"C++"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNDk=","color":"#555555","name":"C"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxMzk=","color":"#89e051","name":"Shell"}},{"node":{"id":"MDg6TGFuZ3VhZ2U0MDM=","color":"#427819","name":"Makefile"}},{"node":{"id":"MDg6TGFuZ3VhZ2U0NzQ=","color":"#DBCA00","name":"Lex"}},{"node":{"id":"MDg6TGFuZ3VhZ2U0NzM=","color":"#4B6C4B","name":"Yacc"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNDA=","color":"#f1e05a","name":"JavaScript"}},{"node":{"id":"MDg6TGFuZ3VhZ2U0MTc=","color":"#e34c26","name":"HTML"}},{"node":{"id":"MDg6TGFuZ3VhZ2U1MzU=","color":"#384d54","name":"Dockerfile"}},{"node":{"id":"MDg6TGFuZ3VhZ2U1Njk=","color":"#199f4b","name":"Vim Script"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNDQ=","color":"#1e4aec","name":"Scheme"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNjQ=","color":"#000080","name":"Lua"}},{"node":{"id":"MDg6TGFuZ3VhZ2UxNDE=","color":"#701516","name":"Ruby"}},{"node":{"id":"MDg6TGFuZ3VhZ2U2MDU=","color":"#c6538c","name":"SCSS"}},{"node":{"id":"LAN_kgDNA60","color":"#222222","name":"Carbon"}},{"node":{"id":"MDg6TGFuZ3VhZ2UyODc=","color":"#3178c6","name":"TypeScript"}}]},"issues":{"totalCount":509,"pageInfo":{"hasNextPage":false,"endCursor":"Y3Vyc29yOnYyOpK5MjAyNS0wMS0wOFQwNDo0NDo0OSswNTozMM6lVqir"},"edges":[{"node":{"id":"I_kwDOD3caBc6Te7v4","title":"\"Queried ... before it was resolved\" in `GetConstantInSpecific` from `toolchain/sem_ir/generic.cpp`","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/4229","body":"### Description of the bug:\n\n\nI'm getting a crash from the fuzzer, and #4202 seems like the most likely culprit.\n\n### What did you do, or what's a simple way to reproduce the bug?\n\n\nThis input:\r\n```\r\nclass C(T:! type) {\r\n  fn F() {\r\n    data;\r\n  }\r\n  var data: {};\r\n}\r\n```\r\nproduces:\r\n```\r\nCHECK failure at toolchain/sem_ir/generic.cpp:84: value_block_id.is_valid(): Queried genericInstInDef3 in specific0 for {kind: ClassDecl, arg0: class0, arg1: block5, type: type(inst+8)} before it was resolved.\r\n```\r\nbut:\r\n```\r\nclass C(T:! type) {\r\n  fn F() {\r\n    x;\r\n  }\r\n  var data: {};\r\n}\r\n```\r\nsucceeds (printing diagnostics). The only difference is `data` vs. `x` in the body of `F`.\r\n\r\nI've tried to minimize the input that triggers the failure. For example, making this non-generic by removing `(T:! type)` causes it to succeed.\n\n### What did you expect to happen?\n\n\nNo CHECK failure\n\n### What actually happened?\n\n\nCHECK failure\n\n### Any other information, logs, or outputs that you want to share?\n\n\nHere is the Stack dump when it crashes:\r\n```\r\nStack dump:\r\n0.      Program arguments: /usr/local/google/home/joshl/.cache/bazel/_bazel_joshl/421d196ee907b61a6dba5ef703299466/execroot/_main/bazel-out/k8-fastbuild/bin/toolchain/driver/carbon compile --phase=check /tmp/t2.carbon\r\n1.      Check::Context\r\n          NodeStack:\r\n            0. FunctionDefinitionStart: function0\r\n          inst_block_stack_:\r\n            0. block<invalid> {\r\n                package: <namespace> = namespace [template] {\r\n                  .Core = <unexpected>.inst+2\r\n                  .C = <unexpected>.inst+6.loc1_19\r\n                }\r\n                <unexpected>.inst+1 = import Core\r\n                <unexpected>.inst+6.loc1_19: %C.type = class_decl @C [template = constants.%C.1] {\r\n                  <unexpected>.inst+3.loc1_9: type = param T\r\n                  <unexpected>.inst+4.loc1_9: type = bind_symbolic_name T 0, <unexpected>.inst+3.loc1_9 [symbolic = @C.%T (constants.%T)]\r\n                }\r\n              }\r\n            1. block19 {}\r\n          param_and_arg_refs_stack:\r\n          args_type_info_stack_:\r\n2.      /tmp/t2.carbon:3:5: checking IdentifierNameExpr\r\n              data;\r\n              ^~~~\r\n```\r\n...\r\n```\r\n#10 0x0000558e4fb1129f Carbon::SemIR::GetConstantInSpecific(Carbon::SemIR::File const&, Carbon::SemIR::SpecificId, Carbon::SemIR::ConstantId) (...)\r\n#11 0x0000558e4fb1149c Carbon::SemIR::GetTypeInSpecific(Carbon::SemIR::File const&, Carbon::SemIR::SpecificId, Carbon::SemIR::TypeId) (...)\r\n#12 0x0000558e4f95d3ba Carbon::Check::HandleNameAsExpr(Carbon::Check::Context&, Carbon::Parse::NodeId, Carbon::SemIR::NameId) handle_name.cpp:0:0\r\n#13 0x0000558e4f95d30b Carbon::Check::HandleParseNode(Carbon::Check::Context&, Carbon::Parse::NodeIdForKind<Carbon::Parse::NodeKind::IdentifierNameExpr>) (...)\r\n#14 0x0000558e4f8be68a Carbon::Check::ProcessNodeIds(Carbon::Check::Context&, llvm::raw_ostream*, Carbon::ErrorTrackingDiagnosticConsumer&, Carbon::Parse::NodeLocConverter*) check.cpp:0:0\r\n#15 0x0000558e4f8a578e Carbon::Check::CheckParseTree(llvm::MutableArrayRef<Carbon::Parse::NodeLocConverter*>, Carbon::Check::(anonymous namespace)::UnitInfo&, int, llvm::raw_ostream*) check.cpp:0:0\r\n#16 0x0000558e4f8a273b Carbon::Check::CheckParseTrees(llvm::MutableArrayRef<Carbon::Check::Unit>, bool, llvm::raw_ostream*) (...)\r\n#17 0x0000558e4f165b34 Carbon::Driver::Compile(Carbon::Driver::CompileOptions const&, Carbon::Driver::CodegenOptions const&) (...)\r\n```","closed":true,"closedAt":"2024-09-06T23:30:29Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc56te-g","title":"Resolve the definition of the self specific when re-entering its scope for an inline method definition.","author":{"login":"zygoloid","url":"https://github.com/zygoloid"},"body":"This fixes a crash if an inline method definition attempts to access a member of the enclosing generic scope directly.\r\n\r\nFixes #4229.","url":"https://github.com/carbon-language/carbon-lang/pull/4281","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/30993b259f90201bf6aaa1c763c2a6307e2f76e7"},"id":"PURC_lADOD3caBc56te-g2gAoMzA5OTNiMjU5ZjkwMjAxYmY2YWFhMWM3NjNjMmE2MzA3ZTJmNzZlNw","resourcePath":"/carbon-language/carbon-lang/pull/4281/commits/30993b259f90201bf6aaa1c763c2a6307e2f76e7"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/95ccab51a223bf5b702db486831bef437e67db45"},"id":"PURC_lADOD3caBc56te-g2gAoOTVjY2FiNTFhMjIzYmY1YjcwMmRiNDg2ODMxYmVmNDM3ZTY3ZGI0NQ","resourcePath":"/carbon-language/carbon-lang/pull/4281/commits/95ccab51a223bf5b702db486831bef437e67db45"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/158811a07a1410e774852a05344015315ad1afd9"},"id":"PURC_lADOD3caBc56te-g2gAoMTU4ODExYTA3YTE0MTBlNzc0ODUyYTA1MzQ0MDE1MzE1YWQxYWZkOQ","resourcePath":"/carbon-language/carbon-lang/pull/4281/commits/158811a07a1410e774852a05344015315ad1afd9"}}]},"createdAt":"2024-09-06T22:13:11Z","closed":true,"closedAt":"2024-09-06T23:30:28Z"}}]},"createdAt":"2024-08-19T22:34:51Z","labels":{"edges":[{"node":{"id":"LA_kwDOD3caBc7ZJggV","color":"d93f0b","name":"toolchain"}}]},"author":{"login":"josh11b","url":"https://github.com/josh11b"},"assignees":{"edges":[{"node":{"login":"zygoloid"}}]}}},{"node":{"id":"I_kwDOD3caBc6Ub0z9","title":"Recovered parse errors should fail compilation","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc6J5-hP","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"There are a few problems here, notably that pattern matching doesn't correctly diagnose issues. Since this is a bit more nuanced, I don't think it's a good first issue. I'll just take care of it.","createdAt":"2024-08-27T22:22:13Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/4259","body":"### Description of the bug:\r\n\r\n\r\nSome errors, such as missing or additional whitespace next to an operator, are recovered by the compiler. In this case, the compiler outputs a diagnostic, but no parse nodes are marked as having an error, and so the compilation succeeds.\r\n\r\n### What did you do, or what's a simple way to reproduce the bug?\r\n\r\n\r\nThis problem can be seen in any of the files starting with `recover_` in the\r\n[`toolchain/parse/testdata/operators/` directory](https://github.com/carbon-language/carbon-lang/tree/trunk/toolchain/parse/testdata/operators).\r\n\r\n### What did you expect to happen?\r\n\r\n\r\n Those tests should only pass with a filename (or split filename) starting with `fail_`. We need some way to indicate an error in the parse output (like I believe exists for the lex output) even when there are no nodes with an error in the output parse tree.\r\n\r\n### What actually happened?\r\n\r\n\r\nThose files have diagnostics with a `CHECK:STDERR` prefix, but the parse stage succeeds.\r\n","closed":true,"closedAt":"2024-08-28T18:53:27Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc55od3j","title":"Fix parse to use the error tracking consumer for has_errors_.","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"This is how we are setting has_errors_ in other stages; this should only make parse consistent.\r\n\r\nFixes #4259 ","url":"https://github.com/carbon-language/carbon-lang/pull/4261","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/b2bfbe95d97605930e7b810724333f8c2d7ea241"},"id":"PURC_lADOD3caBc55od3j2gAoYjJiZmJlOTVkOTc2MDU5MzBlN2I4MTA3MjQzMzNmOGMyZDdlYTI0MQ","resourcePath":"/carbon-language/carbon-lang/pull/4261/commits/b2bfbe95d97605930e7b810724333f8c2d7ea241"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/c48fe5f36416111d21fb4718376bb932ac7312c6"},"id":"PURC_lADOD3caBc55od3j2gAoYzQ4ZmU1ZjM2NDE2MTExZDIxZmI0NzE4Mzc2YmI5MzJhYzczMTJjNg","resourcePath":"/carbon-language/carbon-lang/pull/4261/commits/c48fe5f36416111d21fb4718376bb932ac7312c6"}}]},"createdAt":"2024-08-27T22:55:07Z","closed":true,"closedAt":"2024-08-28T18:53:26Z"}}]},"createdAt":"2024-08-27T20:52:46Z","labels":{"edges":[{"node":{"id":"LA_kwDOD3caBc7ZJggV","color":"d93f0b","name":"toolchain"}}]},"author":{"login":"josh11b","url":"https://github.com/josh11b"},"assignees":{"edges":[{"node":{"login":"jonmeow"}}]}}},{"node":{"id":"I_kwDOD3caBc6VY4gQ","title":"Commit access cleanup","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc6K-xs0","author":{"login":"pk19604014","url":"https://github.com/pk19604014"},"body":"Thanks for the heads up, ok to remove me for now.\r\n  Pasha.\r\n\r\nOn Wed, Sep 4, 2024 at 5:20 PM Jon Ross-Perkins ***@***.***>\r\nwrote:\r\n\r\n> I'm looking at cleaning up commit access\r\n> <https://github.com/orgs/carbon-language/teams/commit-access> that hasn't\r\n> been used for the past six months, per the new commit access policy\r\n> <https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/commit_access.md>.\r\n> GitHub doesn't have a great way to notify people, so trying this...\r\n>\r\n> @fowles <https://github.com/fowles> @mattgodbolt\r\n> <https://github.com/mattgodbolt> @camio <https://github.com/camio> @jsiek\r\n> <https://github.com/jsiek> @tkoeppe <https://github.com/tkoeppe> @Pixep\r\n> <https://github.com/Pixep> @pmqtt <https://github.com/pmqtt> @pk19604014\r\n> <https://github.com/pk19604014>\r\n>\r\n> If any of you are planning to resume commits to Carbon soon, please let me\r\n> know, either directly or by responding here. Otherwise, I'll remove access\r\n> in a week (Wednesday Sep 11). If things change and you resume contributing,\r\n> you can ask for commit access to be restored. We're just trying to make\r\n> sure that we don't have idle permissions hanging around.\r\n>\r\n> Note, GitHub will probably email when I make the actual changes.\r\n>\r\n> —\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/carbon-language/carbon-lang/issues/4274>, or\r\n> unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AWXXSGLEH4GMHZWCAWWHGTTZU52RHAVCNFSM6AAAAABNVE3GV6VHI2DSMVQWIX3LMV43ASLTON2WKOZSGUYDMMZSHAYDQMA>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n","createdAt":"2024-09-05T13:39:25Z"}},{"node":{"id":"IC_kwDOD3caBc6LSZuN","author":{"login":"camio","url":"https://github.com/camio"},"body":"Okay to remove me as well.","createdAt":"2024-09-08T23:12:58Z"}},{"node":{"id":"IC_kwDOD3caBc6MDzPD","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"This is now done. Please let me know if there are issues.","createdAt":"2024-09-13T18:28:20Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/4274","body":"I'm looking at cleaning up [commit access](https://github.com/orgs/carbon-language/teams/commit-access) that hasn't been used for the past six months, per the new [commit access policy](https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/commit_access.md). GitHub doesn't have a great way to notify people, so trying this...\r\n\r\n@fowles @mattgodbolt @camio @jsiek @tkoeppe @Pixep @pmqtt @pk19604014 \r\n\r\nIf any of you are planning to resume commits to Carbon soon, please let me know, either directly or by responding here. Otherwise, I'll remove commit access in a week (Wednesday Sep 11). If things change and you resume making commits, you can ask for commit access to be restored. We're just trying to make sure that we don't have idle permissions hanging around.\r\n\r\nNote, GitHub will probably email when I make the actual changes.","closed":true,"closedAt":"2024-09-13T18:28:23Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2024-09-04T21:19:55Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyNzg5NzQ3Njc1","color":"8FA36E","name":"infrastructure"}}]},"author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc6V6Wbk","title":"\"No such file or directory\" errors in `toolchain/autoupdate_testdata.py`","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc6Lb1s_","author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"body":"I should note, I think there are two separate bugs here:\r\n- The fact that `toolchain/autoupdate_testdata.py` can fail in a clean client.\r\n- The fact that the error messages misleadingly suggest that it can't find the testdata files, when the problem is actually a prelude file.","createdAt":"2024-09-09T23:34:43Z"}},{"node":{"id":"IC_kwDOD3caBc6LjMPg","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"From what I can tell of the repro, you do a build, then remove artifacts used as input to the build. bazel doesn't notice the removed artifacts (the prelude files) due to the symlinks.\r\n\r\nI think the actual issue is with `symlink_filegroup`, since the dependency is on the symlink rather than the data file. That's [toolchain/install/BUILD](https://github.com/carbon-language/carbon-lang/blob/trunk/toolchain/install/BUILD#L35-L40). I'll think about if there's another approach there, I know @chandlerc was trying to work around a few issues.\r\n\r\nNote, I'd typically define a \"clean client\" repro as:\r\n\r\n```\r\ngit clone https://github.com/carbon-language/carbon-lang\r\ncd carbon-lang/\r\ntoolchain/autoupdate_testdata.py\r\n```\r\n\r\nA clean client works fine for me. It's removing prelude files that's not detected.\r\n\r\nNote, a simple repro here is to then do:\r\n\r\n```\r\nrm core/prelude/operators/as.carbon\r\ntoolchain/autoupdate_testdata.py\r\n```\r\n\r\n`bazel` should catch this but doesn't.","createdAt":"2024-09-10T15:28:05Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/4288","body":"### Description of the bug:\n\n\nUnder certain conditions, `toolchain/autoupdate_testdata.py` fails with a cascade of \"No such file or directory\" errors.\n\n### What did you do, or what's a simple way to reproduce the bug?\n\n\n```\r\n$ git clone https://github.com/carbon-language/carbon-lang\r\n$ cd carbon-lang/\r\n$ git reset --hard 187a3608df\r\n$ bazel build //toolchain\r\n$ git reset --hard HEAD^\r\n$ toolchain/autoupdate_testdata.py\r\n```\r\n\r\n`187a3608df` is the commit hash of #4209. Other before/after commit pairs would also work, so long as a prelude file is present when `bazel build //toolchain` is run, but absent when `toolchain/autoupdate_testdata.py` is run. Note that you might need to clear your Bazel cache to get these steps to work, because non-hermetic Bazel behavior seems to be part of the problem.\n\n### What did you expect to happen?\n\n\nI expected the script to run successfully.\n\n### What actually happened?\n\n\nThe script produced an error for each testdata file:\r\n\r\n```\r\nExecuting tests from //toolchain/testing:file_test\r\n-----------------------------------------------------------------------------\r\n\r\nError updating toolchain/check/testdata/alias/no_prelude/alias_of_alias.carbon: No such file or directory\r\n\r\nError updating toolchain/check/testdata/array/assign_return_value.carbon: No such file or directory\r\n\r\nError updating toolchain/check/testdata/array/base.carbon: No such file or directory\r\n\r\nError updating toolchain/check/testdata/alias/no_prelude/fail_local_in_namespace.carbon: No such file or directory\r\n\r\nError updating toolchain/check/testdata/alias/no_prelude/export_name.carbon: No such file or directory\r\n\r\nError updating toolchain/check/testdata/array/array_in_place.carbon: No such file or directory\r\n\r\nError updating toolchain/check/testdata/alias/fail_bool_value.carbon: No such file or directory\r\n\r\nError updating toolchain/check/testdata/array/nine_elements.carbon: No such file or directory\r\n\r\nError updating toolchain/check/testdata/as/fail_no_conversion.carbon: No such file or directory\r\n\r\nError updating toolchain/check/testdata/array/fail_bound_negative.carbon: No such file or directory\r\n```\r\n\r\n... and so on.\n\n### Any other information, logs, or outputs that you want to share?\n\n\nI updated [this line](https://github.com/carbon-language/carbon-lang/blob/f641cb95d2200774dcc9714e6df3917891f2f698/toolchain/testing/file_test.cpp#L139) to log the name of the file, and got the following more illuminating error message:\r\n\r\n```\r\nError updating toolchain/parse/testdata/struct/fail_dot_string_colon.carbon: Unable to open /usr/local/google/home/gromer/.cache/bazel/_bazel_gromer/6b556be8ddbdbba287a2e1ef86f733d5/execroot/_main/bazel-out/k8-fastbuild/bin/toolchain/install/prefix_root/lib/carbon/../../lib/carbon/core/prelude/operators/as.carbon: No such file or directory\r\n```\r\n\r\nThe file in question is a symlink pointing to my git client's `core/prelude/operators/as.carbon`, which of course doesn't exist, hence the error.","closed":true,"closedAt":"2024-09-10T21:07:01Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc57C1xL","title":"Generate and use a manifest for prelude files.","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"This removes the directory crawl because bazel doesn't remove files from execroot when the rule generating them would no longer generate them.\r\n\r\nFixes #4288","url":"https://github.com/carbon-language/carbon-lang/pull/4291","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/8dd7a5d73caff810d9e839316b6ccabbf67fa864"},"id":"PURC_lADOD3caBc57C1xL2gAoOGRkN2E1ZDczY2FmZjgxMGQ5ZTgzOTMxNmI2Y2NhYmJmNjdmYTg2NA","resourcePath":"/carbon-language/carbon-lang/pull/4291/commits/8dd7a5d73caff810d9e839316b6ccabbf67fa864"}}]},"createdAt":"2024-09-10T19:45:25Z","closed":true,"closedAt":"2024-09-10T21:07:00Z"}}]},"createdAt":"2024-09-09T23:28:54Z","labels":{"edges":[{"node":{"id":"LA_kwDOD3caBc7ZJggV","color":"d93f0b","name":"toolchain"}}]},"author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc6YA9wT","title":"Cannot compile toolchain","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc6Ns-gi","author":{"login":"jonmeow","url":"https://github.com/jonmeow"},"body":"I see you're using LLVM 14: `/usr/lib/llvm-14/bin/clang++`\r\n\r\nWe require at least LLVM 16 to compile. Please see https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/contribution_tools.md#old-clang-versions for more information on this as well as some resolution advice.\r\n\r\nI'm closing this since using a more recent version of LLVM will resolve the issue.","createdAt":"2024-09-26T16:05:24Z"}},{"node":{"id":"IC_kwDOD3caBc6NwNen","author":{"login":"BhJaipal","url":"https://github.com/BhJaipal"},"body":"> I see you're using LLVM 14: `/usr/lib/llvm-14/bin/clang++`\n> \n> We require at least LLVM 16 to compile. Please see https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/contribution_tools.md#old-clang-versions for more information on this as well as some resolution advice.\n> \n> I'm closing this since using a more recent version of LLVM will resolve the issue.\n\nOk","createdAt":"2024-09-27T01:24:44Z"}},{"node":{"id":"IC_kwDOD3caBc6NyqyA","author":{"login":"BhJaipal","url":"https://github.com/BhJaipal"},"body":"> I see you're using LLVM 14: `/usr/lib/llvm-14/bin/clang++`\r\n> \r\n> We require at least LLVM 16 to compile. Please see https://github.com/carbon-language/carbon-lang/blob/trunk/docs/project/contribution_tools.md#old-clang-versions for more information on this as well as some resolution advice.\r\n> \r\n> I'm closing this since using a more recent version of LLVM will resolve the issue.\r\n\r\nI have installed llvm 16, what to do next because it still gives same error  run","createdAt":"2024-09-27T09:38:11Z"}},{"node":{"id":"IC_kwDOD3caBc6N6Qjp","author":{"login":"geoffromer","url":"https://github.com/geoffromer"},"body":"Does the error message still indicate it's using llvm 14?\n\nIt might be better to discuss this on the #build-help channel of our Discord server, since it's not clear this is a Carbon bug.","createdAt":"2024-09-28T18:35:34Z"}},{"node":{"id":"IC_kwDOD3caBc6N6W13","author":{"login":"BhJaipal","url":"https://github.com/BhJaipal"},"body":"> Does the error message still indicate it's using llvm 14?\n> \n> It might be better to discuss this on the #build-help channel of our Discord server, since it's not clear this is a Carbon bug.\n\nMaybe not, I did some environment variables changes then it use llvm 16 but still clang instead instead of clang++\nSo, I have decided, I will instead wait for its official debian release, when it's out, I will surely use it","createdAt":"2024-09-28T20:21:10Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/4344","body":"### Description of the bug:\n\n\nWhile I was tring to build carbon language toolchain and explorer error occured and it failed\n\n### What did you do, or what's a simple way to reproduce the bug?\n\n\nbazel run //toolchain\n\n### What did you expect to happen?\n\n\nI expected it to compile successfully\n\n### What actually happened?\n\n\nAn error occured\r\njaipal001@pop-os:~/.carbon-lang$ bazel run //toolchain\r\nINFO: Invocation ID: 59d6aa8e-a3f3-4174-80b3-8fd2893a5ae2\r\nINFO: Analyzed target //toolchain:toolchain (0 packages loaded, 0 targets configured).\r\nERROR: /home/jaipal001/.carbon-lang/common/BUILD:38:11: Compiling common/command_line.cpp failed: (Exit 1): clang++ failed: error executing CppCompile command (from target //common:command_line) /usr/lib/llvm-14/bin/clang++ -no-canonical-prefixes -fcolor-diagnostics -Werror -Wall -Wextra -Wthread-safety -Wself-assign -Wimplicit-fallthrough -Wctad-maybe-unsupported -Wextra-semi ... (remaining 105 arguments skipped)\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox and retain the sandbox build root for debugging\r\nIn file included from common/command_line.cpp:5:\r\nIn file included from ./common/command_line.h:11:\r\nIn file included from ./common/check.h:8:\r\n./common/check_internal.h:40:24: error: unknown attribute 'noinline' ignored [-Werror,-Wunknown-attributes]\r\n[[noreturn, gnu::cold, clang::noinline]] auto CheckFail(Ts&&... values)\r\n                       ^~~~~~~~~~~~~~~\r\n1 error generated.\r\nTarget //toolchain/install:run_carbon failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 21.486s, Critical Path: 21.21s\r\nINFO: 128 processes: 14 internal, 114 linux-sandbox.\r\nERROR: Build did NOT complete successfully\r\nERROR: Build failed. Not running target\n\n### Any other information, logs, or outputs that you want to share?\n\n\nError:\r\njaipal001@pop-os:~/.carbon-lang$ bazel run //toolchain\r\nINFO: Invocation ID: 59d6aa8e-a3f3-4174-80b3-8fd2893a5ae2\r\nINFO: Analyzed target //toolchain:toolchain (0 packages loaded, 0 targets configured).\r\nERROR: /home/jaipal001/.carbon-lang/common/BUILD:38:11: Compiling common/command_line.cpp failed: (Exit 1): clang++ failed: error executing CppCompile command (from target //common:command_line) /usr/lib/llvm-14/bin/clang++ -no-canonical-prefixes -fcolor-diagnostics -Werror -Wall -Wextra -Wthread-safety -Wself-assign -Wimplicit-fallthrough -Wctad-maybe-unsupported -Wextra-semi ... (remaining 105 arguments skipped)\r\n\r\nUse --sandbox_debug to see verbose messages from the sandbox and retain the sandbox build root for debugging\r\nIn file included from common/command_line.cpp:5:\r\nIn file included from ./common/command_line.h:11:\r\nIn file included from ./common/check.h:8:\r\n./common/check_internal.h:40:24: error: unknown attribute 'noinline' ignored [-Werror,-Wunknown-attributes]\r\n[[noreturn, gnu::cold, clang::noinline]] auto CheckFail(Ts&&... values)\r\n                       ^~~~~~~~~~~~~~~\r\n1 error generated.\r\nTarget //toolchain/install:run_carbon failed to build\r\nUse --verbose_failures to see the command lines of failed build steps.\r\nINFO: Elapsed time: 21.486s, Critical Path: 21.21s\r\nINFO: 128 processes: 14 internal, 114 linux-sandbox.\r\nERROR: Build did NOT complete successfully\r\nERROR: Build failed. Not running target","closed":true,"closedAt":"2024-09-26T16:05:24Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2024-09-26T12:08:55Z","labels":{"edges":[{"node":{"id":"LA_kwDOD3caBc7ZJggV","color":"d93f0b","name":"toolchain"}}]},"author":{"login":"BhJaipal","url":"https://github.com/BhJaipal"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc6YlpWf","title":"CHECK failure when using runtime implicit parameter","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc6OScXj","author":{"login":"zygoloid","url":"https://github.com/zygoloid"},"body":"This can be further reduced by removing the `addr`. That then reduces to this, which we accept despite it being invalid:\r\n```carbon\r\nfn F[s: ()]();\r\n```\r\nLooks like we are missing a check to reject runtime parameters (other than `self` for a method) in the implicit parameter list of a function.","createdAt":"2024-10-01T22:31:25Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/4356","body":"### Description of the bug:\r\n\r\n\r\nDefining a method with an improperly declared `addr` implicit parameter can cause the compiler to crash with a CHECK failure if that method is then called.\r\n\r\n### What did you do, or what's a simple way to reproduce the bug?\r\n\r\n\r\n```\r\n$ cat /tmp/tb.carbon\r\nclass Cell {\r\n  fn Put[addr NOTSELF: Self]() -> Cell;\r\n}\r\n\r\nfn Main() -> i32 {\r\n  var c: Cell;\r\n  c.Put();\r\n}\r\n$ bazel run -c dbg //toolchain -- compile --phase=check /tmp/tb.carbon\r\n```\r\n\r\n### What did you expect to happen?\r\n\r\n\r\nGive diagnostics and not crash. Replacing `NOTSELF` with `self` leads to diagnostics, but no check failure..\r\n\r\n### What actually happened?\r\n\r\n\r\n```\r\n$ bazel run -c dbg //toolchain -- compile --phase=check /tmp/tb.carbon\r\n...\r\n1.      Pending diagnostics:\r\n/tmp/tb.carbon:2:10: error: `addr` can only be applied to a `self` parameter\r\n  fn Put[addr NOTSELF: Self]() -> Cell;\r\n         ^~~~\r\n2.      Check::Context\r\n          NodeStack:\r\n            0. FunctionDefinitionStart: function2\r\n          inst_block_stack_:\r\n            0. block<invalid> {\r\n                package: <namespace> = namespace [template] {\r\n                  .Core = <unexpected>.inst+2\r\n                  .Cell = <unexpected>.inst+3.loc1_12\r\n                  .Main = <unexpected>.inst+27.loc5_18\r\n                }\r\n                <unexpected>.inst+1 = import Core\r\n                <unexpected>.inst+3.loc1_12: type = class_decl @Cell [template = constants.%Cell] {} {}\r\n                <unexpected>.inst+27.loc5_18: %Main.type = fn_decl @Main [template = constants.%Main] {} {\r\n                  <unexpected>.inst+23.loc5_14: init type = call constants.%Int32() [template = i32]\r\n                  <unexpected>.inst+24.loc5_14: type = value_of_initializer <unexpected>.inst+23.loc5_14 [template = i32]\r\n                  <unexpected>.inst+25.loc5_14: type = converted <unexpected>.inst+23.loc5_14, <unexpected>.inst+24.loc5_14 [template = i32]\r\n                  %return: ref i32 = var <return slot>\r\n                }\r\n              }\r\n            1. block9 {\r\n                <unexpected>.inst+30.loc6_10: type = name_ref Cell, <unexpected>.inst+3.loc1_12 [template = constants.%Cell]\r\n                <unexpected>.inst+32.loc6_7: ref %Cell = var c\r\n                <unexpected>.inst+33.loc6_7: ref %Cell = bind_name c, <unexpected>.inst+32.loc6_7\r\n                <unexpected>.inst+34.loc7_3: ref %Cell = name_ref c, <unexpected>.inst+33.loc6_7\r\n                <unexpected>.inst+35.loc7_4: %Put.type = name_ref Put, @Cell.%Put.decl [template = constants.%Put]\r\n                <unexpected>.inst+36.loc7_8: ref %Cell = temporary_storage\r\n              }\r\n          pattern_block_stack_:\r\n          param_and_arg_refs_stack:\r\n            0. block<invalid> {}\r\n          args_type_info_stack_:\r\n3.      /tmp/tb.carbon:7:3: checking CallExpr\r\n            c.Put();\r\n            ^~~~~~~\r\n...\r\n#10 0x0000555570b9425c Carbon::Check::ConvertCallArgs(Carbon::Check::Context&, Carbon::SemIR::LocId, Carbon::SemIR::InstId, llvm::ArrayRef<Carbon::SemIR::InstId>, Carbon::SemIR::InstId, Carbon::Check::CalleeParamsInfo const&, Carbon::SemIR::SpecificId) /proc/self/cwd/toolchain/check/convert.cpp:1221:7\r\n#11 0x0000555570b6864e Carbon::Check::PerformCall(Carbon::Check::Context&, Carbon::SemIR::LocId, Carbon::SemIR::InstId, llvm::ArrayRef<Carbon::SemIR::InstId>) /proc/self/cwd/toolchain/check/call.cpp:187:28\r\n#12 0x0000555570a99d68 Carbon::Check::HandleParseNode(Carbon::Check::Context&, Carbon::Parse::NodeIdForKind<Carbon::Parse::NodeKind::CallExpr>) /proc/self/cwd/toolchain/check/handle_call_expr.cpp:32:18\r\n#13 0x0000555570a4dd1a Carbon::Check::ProcessNodeIds(Carbon::Check::Context&, llvm::raw_ostream*, Carbon::ErrorTrackingDiagnosticConsumer&, Carbon::Parse::NodeLocConverter&) /proc/self/cwd/./toolchain/parse/node_kind.def:209:1\r\n#14 0x0000555570a36645 Carbon::Check::CheckParseTree(llvm::MutableArrayRef<Carbon::Parse::NodeLocConverter>, Carbon::Check::(anonymous namespace)::UnitInfo&, int, llvm::raw_ostream*) /proc/self/cwd/toolchain/check/check.cpp:905:8\r\n#15 0x0000555570a33c20 Carbon::Check::CheckParseTrees(llvm::MutableArrayRef<Carbon::Check::Unit>, llvm::MutableArrayRef<Carbon::Parse::NodeLocConverter>, bool, llvm::raw_ostream*) /proc/self/cwd/toolchain/check/check.cpp:1246:5\r\n...\r\nCHECK failure at toolchain/check/convert.cpp:1222: !param.runtime_index.is_valid(): Unexpected implicit parameter passed at runtime\r\n```\r\n\r\n### Any other information, logs, or outputs that you want to share?\r\n\r\nThis error was found by fuzz testing. I've manually minimized the example.","closed":true,"closedAt":"2024-10-03T21:13:12Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc59UR-e","title":"Handle runtime implicit parameters, and `self` outside of methods","author":{"login":"josh11b","url":"https://github.com/josh11b"},"body":"Closes #4356, #4359\r\n","url":"https://github.com/carbon-language/carbon-lang/pull/4361","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/cda0712ce612d4f9df0c07c0f38da9d2be6507b7"},"id":"PURC_lADOD3caBc59UR-e2gAoY2RhMDcxMmNlNjEyZDRmOWRmMGMwN2MwZjM4ZGE5ZDJiZTY1MDdiNw","resourcePath":"/carbon-language/carbon-lang/pull/4361/commits/cda0712ce612d4f9df0c07c0f38da9d2be6507b7"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/2d30035792150fbeb04e302fddd67480777d893a"},"id":"PURC_lADOD3caBc59UR-e2gAoMmQzMDAzNTc5MjE1MGZiZWIwNGUzMDJmZGRkNjc0ODA3NzdkODkzYQ","resourcePath":"/carbon-language/carbon-lang/pull/4361/commits/2d30035792150fbeb04e302fddd67480777d893a"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/b57492c2b990eb933ce0d92723fa5e3106312b6a"},"id":"PURC_lADOD3caBc59UR-e2gAoYjU3NDkyYzJiOTkwZWI5MzNjZTBkOTI3MjNmYTVlMzEwNjMxMmI2YQ","resourcePath":"/carbon-language/carbon-lang/pull/4361/commits/b57492c2b990eb933ce0d92723fa5e3106312b6a"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/13b255347a06d0d045e7780fb6f3c9249de0e5ca"},"id":"PURC_lADOD3caBc59UR-e2gAoMTNiMjU1MzQ3YTA2ZDBkMDQ1ZTc3ODBmYjZmM2M5MjQ5ZGUwZTVjYQ","resourcePath":"/carbon-language/carbon-lang/pull/4361/commits/13b255347a06d0d045e7780fb6f3c9249de0e5ca"}},{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/5de488890346015b3ae8a5558393d52e8f4b04d1"},"id":"PURC_lADOD3caBc59UR-e2gAoNWRlNDg4ODkwMzQ2MDE1YjNhZThhNTU1ODM5M2Q1MmU4ZjRiMDRkMQ","resourcePath":"/carbon-language/carbon-lang/pull/4361/commits/5de488890346015b3ae8a5558393d52e8f4b04d1"}}]},"createdAt":"2024-10-01T23:57:04Z","closed":true,"closedAt":"2024-10-03T21:13:11Z"}}]},"createdAt":"2024-10-01T19:17:52Z","labels":{"edges":[{"node":{"id":"LA_kwDOD3caBc7ZJggV","color":"d93f0b","name":"toolchain"}}]},"author":{"login":"josh11b","url":"https://github.com/josh11b"},"assignees":{"edges":[{"node":{"login":"josh11b"}}]}}},{"node":{"id":"I_kwDOD3caBc6Ym5VW","title":"`self` parameter allowed in implicit parameter list of non-function entities","comments":{"edges":[]},"url":"https://github.com/carbon-language/carbon-lang/issues/4359","body":"### Description of the bug:\n\n\nA `self` parameter should only be permitted in the implicit parameter list of a function declaration. But we allow it in all implicit parameter lists.\n\n### What did you do, or what's a simple way to reproduce the bug?\n\n\nThe following code is accepted:\r\n```carbon\r\nclass C[self:! type](x:! self) {}\r\nvar v: C(0);\r\n```\n\n### What did you expect to happen?\n\n\nAn error that a `self` parameter was provided in a non-function declaration.\n\n### What actually happened?\n\n\nCode is accepted. `self` is deduced as `i32`.\n\n### Any other information, logs, or outputs that you want to share?\n\n\n_No response_","closed":true,"closedAt":"2024-10-03T21:32:53Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2024-10-01T22:38:36Z","labels":{"edges":[{"node":{"id":"LA_kwDOD3caBc7ZJggV","color":"d93f0b","name":"toolchain"}}]},"author":{"login":"zygoloid","url":"https://github.com/zygoloid"},"assignees":{"edges":[{"node":{"login":"josh11b"}}]}}},{"node":{"id":"I_kwDOD3caBc6kMbrw","title":"Getting started instructions not working","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc6Yk2tf","author":{"login":"danakj","url":"https://github.com/danakj"},"body":"yes the Core.Print function has moved into the \"io\" library in Core. You can have a look at the `examples/` directory for code that is more likely to be working, but I will send a fix for the docs, thanks for pointing it out.","createdAt":"2024-12-23T14:22:33Z"}},{"node":{"id":"IC_kwDOD3caBc6Yk4Dh","author":{"login":"danakj","url":"https://github.com/danakj"},"body":"The missing nightly is because the actions started failing, not because of the holidays per se: https://github.com/carbon-language/carbon-lang/actions/runs/12450480722/job/34757345786","createdAt":"2024-12-23T14:25:50Z"}},{"node":{"id":"IC_kwDOD3caBc6Y2VRh","author":{"login":"libbooze","url":"https://github.com/libbooze"},"body":"thank you for fixing this","createdAt":"2024-12-28T16:56:26Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/4734","body":"### Description of the bug:\n\n\nFirst issue is that I guess due to holidays there were no recent releases so \r\n`VERSION=\"$(date -d yesterday +0.0.0-0.nightly.%Y.%m.%d)\"\r\n`\r\ndoes not work. \r\n\r\nSecond issue is that when I manually change date running the steps fails with:\r\n\r\n`forty_two.carbon:1:12: error: member name `Print` not found in `Core`\r\nfn Run() { Core.Print(42); }\r\n`\r\n\r\nI presume language changed since documentation was written. \n\n### Link to documentation:\n\n\nhttps://github.com/carbon-language/carbon-lang?tab=readme-ov-file#getting-started\n\n### What should it say instead?\n\n\nwould be nice if there was easy way to point to last release.\r\nwould be nice if program we are echoing compiles. \r\n\r\n\n\n### Any other information, logs, or outputs that you want to share?\n\n\nI reduced the script so maybe bug is on my side, although I doubt it. This is my exact script:\r\n\r\n\r\n```\r\n# A variable with the nightly version from yesterday:\r\n#VERSION=\"$(date -d yesterday +0.0.0-0.nightly.%Y.%m.%d)\"\r\nVERSION=\"$(date -d '3 days ago' +0.0.0-0.nightly.%Y.%m.%d)\"\r\n\r\n# Get the release\r\nwget https://github.com/carbon-language/carbon-lang/releases/download/v${VERSION}/carbon_toolchain-${VERSION}.tar.gz\r\n\r\n# Unpack the toolchain:\r\ntar -xvf carbon_toolchain-${VERSION}.tar.gz\r\n\r\n# Create a simple Carbon source file:\r\necho \"fn Run() { Core.Print(42); }\" > forty_two.carbon\r\n\r\n# Compile to an object file:\r\n./carbon_toolchain-${VERSION}/bin/carbon compile \\\r\n  --output=forty_two.o forty_two.carbon\r\n\r\n# Link to an executable:\r\n./carbon_toolchain-${VERSION}/bin/carbon link \\\r\n  --output=forty_two forty_two.o\r\n\r\n# Run it:\r\n./forty_two\r\n```\r\n\r\n","closed":true,"closedAt":"2024-12-28T16:56:26Z","closedByPullRequestsReferences":{"edges":[]},"createdAt":"2024-12-22T15:57:58Z","labels":{"edges":[]},"author":{"login":"libbooze","url":"https://github.com/libbooze"},"assignees":{"edges":[]}}},{"node":{"id":"I_kwDOD3caBc6lVqir","title":"Improve SemIR naming of `import_ref`s","comments":{"edges":[{"node":{"id":"IC_kwDOD3caBc6aGNua","author":{"login":"nirmal-j-patel","url":"https://github.com/nirmal-j-patel"},"body":"I recently submitted a pull request to fix a devcontainer issue. However, I have not taken any issues related to toolchain yet. Would it be ok if I attempt this?","createdAt":"2025-01-11T16:13:11Z"}},{"node":{"id":"IC_kwDOD3caBc6aSMTQ","author":{"login":"zygoloid","url":"https://github.com/zygoloid"},"body":"> I recently submitted a pull request to fix a devcontainer issue. However, I have not taken any issues related to toolchain yet. Would it be ok if I attempt this?\r\n\r\nYes, please go ahead. Our policy is to [not assign \"good first issue\" issues](https://docs.carbon-lang.dev/CONTRIBUTING.html#implement-carbons-design), so please feel free to get started.","createdAt":"2025-01-13T23:34:31Z"}},{"node":{"id":"IC_kwDOD3caBc6agK_4","author":{"login":"gamestime102","url":"https://github.com/gamestime102"},"body":"public class ImportRefGenerator {\r\n    private Map<String, String> libraryMapping = new HashMap<>();\r\n    private Map<String, String> importRefCache = new HashMap<>();\r\n\r\n    public ImportRefGenerator() {\r\n        libraryMapping.put(\"com.example.library\", \"myLibrary\");\r\n    }\r\n\r\n    public String generateImportRefName(Class<?> clazz, String functionName) {\r\n        String libraryName = clazz.getName().split(\"\\\\.\")[1];\r\n        String libraryKey = clazz.getName();\r\n        String functionNamePart = functionName;\r\n\r\n        if (libraryMapping.containsKey(libraryKey)) {\r\n            libraryName = libraryMapping.get(libraryKey);\r\n        }\r\n\r\n        String importRefName = libraryName + \"_\" + functionNamePart;\r\n\r\n        return importRefName;\r\n    }\r\n\r\n    public String generateImportRefValue(String importRefName) {\r\n        String targetIR = \"\";\r\n        IRProcessor processor = new IRProcessor();\r\n        targetIR = processor.getIRInfo();\r\n\r\n        importRefCache.put(importRefName, targetIR);\r\n\r\n        return targetIR;\r\n    }\r\n\r\n    public String getImportRefValue(String importRefName) {\r\n        return importRefCache.get(importRefName);\r\n    }\r\n}","createdAt":"2025-01-15T09:34:52Z"}},{"node":{"id":"IC_kwDOD3caBc6agMJb","author":{"login":"chandlerc","url":"https://github.com/chandlerc"},"body":"@gamestime102 - If you'd like to submit a patch, please use a GitHub pull request. Thanks!","createdAt":"2025-01-15T09:36:45Z"}},{"node":{"id":"IC_kwDOD3caBc6agRj6","author":{"login":"gamestime102","url":"https://github.com/gamestime102"},"body":"thank you","createdAt":"2025-01-15T09:46:32Z"}}]},"url":"https://github.com/carbon-language/carbon-lang/issues/4769","body":"Currently `import_ref`s have a non-descriptive name, containing only a content hash and disambiguator, such as `%import_ref.a69` or `%import_ref.f9d349.2`. We should be able to do better.\r\n\r\n### Ideas:\r\n\r\n- [ ] Include the name of the package and library from which the entity was ultimately imported in the name. We may want to do some shortening here, for example we could take the component of the library name following the final `/`.\r\n- [ ] When the `import_ref` is loaded, look at its constant value and use that to form a name for the `import_ref`.\r\n- [ ] Use the instruction in the target IR to form a name.\r\n- [ ] Cache `InstNamer`s for all IRs being processed by the toolchain invocation, and actually use the name of the instruction (including disambiguator) from the target IR, either in the name of the `import_ref` or at least in the right-hand side when printing formatted SemIR.","closed":true,"closedAt":"2025-01-22T07:29:27Z","closedByPullRequestsReferences":{"edges":[{"node":{"id":"PR_kwDOD3caBc6IZ78L","title":"Improve SemIR naming of `import_ref`s","author":{"login":"clavin","url":"https://github.com/clavin"},"body":"Changes the name of SemIR `import_ref`s to use the format `<package>.<entity>`.\r\n\r\n<table>\r\n<tr><th>Before</th><th>After</th></tr>\r\n<tr>\r\n<td><code>%import_ref.05a: type</code></td>\r\n<td><code>%Main.D: type</code></td>\r\n</tr>\r\n<tr>\r\n<td><code>%import_ref.8f2: &lt;witness&gt;</code></td>\r\n<td><code>%Main.import_ref.8f2: &lt;witness&gt;</code></td>\r\n</tr>\r\n</table>\r\n\r\n* [Discord discussion in #toolchain](https://discord.com/channels/655572317891461132/655578254970716160/1330253540999827577)\r\n* Closes #4769\r\n","url":"https://github.com/carbon-language/carbon-lang/pull/4824","commits":{"edges":[{"node":{"commit":{"url":"https://github.com/carbon-language/carbon-lang/commit/265648fbe4e5742c9091b1daad026be4b4968ee4"},"id":"PURC_lADOD3caBc6IZ78L2gAoMjY1NjQ4ZmJlNGU1NzQyYzkwOTFiMWRhYWQwMjZiZTRiNDk2OGVlNA","resourcePath":"/carbon-language/carbon-lang/pull/4824/commits/265648fbe4e5742c9091b1daad026be4b4968ee4"}}]},"createdAt":"2025-01-20T19:55:13Z","closed":true,"closedAt":"2025-01-22T07:29:26Z"}}]},"createdAt":"2025-01-07T23:14:49Z","labels":{"edges":[{"node":{"id":"MDU6TGFiZWwzMjc3MzExMzQ0","color":"bfdadc","name":"good first issue"}},{"node":{"id":"LA_kwDOD3caBc7ZJggV","color":"d93f0b","name":"toolchain"}}]},"author":{"login":"zygoloid","url":"https://github.com/zygoloid"},"assignees":{"edges":[]}}}]}}}}